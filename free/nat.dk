nat : cts.Term cts.triangle (cts.univ cts.box cts.triangle cts.I).

O :
  cts.Term
    cts.diamond
    (cts.cast
       cts.triangle
       cts.sinf
       (cts.univ cts.box cts.triangle cts.I)
       (cts.univ cts.diamond cts.sinf cts.I)
       cts.I
       nat.nat).

S :
  cts.Term
    cts.diamond
    (cts.cast
       cts.triangle
       cts.sinf
       (cts.univ cts.box cts.triangle cts.I)
       (cts.univ cts.diamond cts.sinf cts.I)
       cts.I
       (cts.prod cts.box cts.box cts.box cts.I nat.nat (x:(cts.Term cts.box nat.nat) => nat.nat))).

match_nat_prop :
  cts.Term
    cts.star
    (cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       (cts.prod
          cts.box
          cts.box
          cts.box
          cts.I
          nat.nat
          (x:(cts.Term cts.box nat.nat) => cts.univ cts.star cts.box cts.I))
       (x:(cts.Term
             cts.box
             (cts.prod
                cts.box
                cts.box
                cts.box
                cts.I
                nat.nat
                (x:(cts.Term cts.box nat.nat) => cts.univ cts.star cts.box cts.I))) =>
        cts.prod
          cts.star
          cts.star
          cts.star
          cts.I
          (x nat.O)
          (x0:(cts.Term cts.star (x nat.O)) =>
           cts.prod
             cts.star
             cts.star
             cts.star
             cts.I
             (cts.prod
                cts.box
                cts.star
                cts.star
                cts.I
                nat.nat
                (x1:(cts.Term cts.box nat.nat) => x (nat.S x1)))
             (x1:(cts.Term
                    cts.star
                    (cts.prod
                       cts.box
                       cts.star
                       cts.star
                       cts.I
                       nat.nat
                       (x1:(cts.Term cts.box nat.nat) => x (nat.S x1)))) =>
              cts.prod
                cts.box
                cts.star
                cts.star
                cts.I
                nat.nat
                (x2:(cts.Term cts.box nat.nat) => x x2))))).

match_nat_type :
  cts.Term
    cts.diamond
    (cts.prod
       cts.triangle
       cts.diamond
       cts.diamond
       cts.I
       (cts.univ cts.box cts.triangle cts.I)
       (x:(cts.Term cts.triangle (cts.univ cts.box cts.triangle cts.I)) =>
        cts.cast
          cts.triangle
          cts.sinf
          (cts.univ cts.box cts.triangle cts.I)
          (cts.univ cts.diamond cts.sinf cts.I)
          cts.I
          (cts.prod
             cts.box
             cts.box
             cts.box
             cts.I
             x
             (x0:(cts.Term cts.box x) =>
              cts.prod
                cts.box
                cts.box
                cts.box
                cts.I
                (cts.prod
                   cts.box
                   cts.box
                   cts.box
                   cts.I
                   nat.nat
                   (x1:(cts.Term cts.box nat.nat) => x))
                (x1:(cts.Term
                       cts.box
                       (cts.prod
                          cts.box
                          cts.box
                          cts.box
                          cts.I
                          nat.nat
                          (x1:(cts.Term cts.box nat.nat) => x))) =>
                 cts.prod
                   cts.box
                   cts.box
                   cts.box
                   cts.I
                   nat.nat
                   (x2:(cts.Term cts.box nat.nat) => x)))))).

axiom_match_nat_type_O :
  cts.Term
    cts.star
    (cts.prod
       cts.triangle
       cts.star
       cts.star
       cts.I
       (cts.univ cts.box cts.triangle cts.I)
       (x:(cts.Term cts.triangle (cts.univ cts.box cts.triangle cts.I)) =>
        cts.prod
          cts.box
          cts.star
          cts.star
          cts.I
          x
          (x0:(cts.Term cts.box x) =>
           cts.prod
             cts.box
             cts.star
             cts.star
             cts.I
             (cts.prod cts.box cts.box cts.box cts.I nat.nat (x1:(cts.Term cts.box nat.nat) => x))
             (x1:(cts.Term
                    cts.box
                    (cts.prod
                       cts.box
                       cts.box
                       cts.box
                       cts.I
                       nat.nat
                       (x1:(cts.Term cts.box nat.nat) => x))) =>
              connectives.equal x (nat.match_nat_type x x0 x1 nat.O) x0)))).

def eq_match_nat_type_O :
  cts.Term
    cts.star
    (cts.prod
       cts.triangle
       cts.star
       cts.star
       cts.I
       (cts.univ cts.box cts.triangle cts.I)
       (x:(cts.Term cts.triangle (cts.univ cts.box cts.triangle cts.I)) =>
        cts.prod
          cts.box
          cts.star
          cts.star
          cts.I
          x
          (x0:(cts.Term cts.box x) =>
           cts.prod
             cts.box
             cts.star
             cts.star
             cts.I
             (cts.prod cts.box cts.box cts.box cts.I nat.nat (x1:(cts.Term cts.box nat.nat) => x))
             (x1:(cts.Term
                    cts.box
                    (cts.prod
                       cts.box
                       cts.box
                       cts.box
                       cts.I
                       nat.nat
                       (x1:(cts.Term cts.box nat.nat) => x))) =>
              leibniz.leibniz x (nat.match_nat_type x x0 x1 nat.O) x0))))
  :=
  return_type:(cts.Term cts.triangle (cts.univ' cts.box cts.triangle)) =>
  case_O:(cts.Term cts.box return_type) =>
  case_S:(cts.Term
            cts.box
            (cts.prod'
               cts.box
               cts.box
               cts.box
               nat.nat
               (x1:(cts.Term cts.box nat.nat) => return_type))) =>
  connectives.equal_leibniz
    return_type
    (nat.match_nat_type return_type case_O case_S nat.O)
    case_O
    (nat.axiom_match_nat_type_O return_type case_O case_S).

def sym_eq_match_nat_type_O :
  cts.Term
    cts.star
    (cts.prod
       cts.triangle
       cts.star
       cts.star
       cts.I
       (cts.univ cts.box cts.triangle cts.I)
       (x:(cts.Term cts.triangle (cts.univ cts.box cts.triangle cts.I)) =>
        cts.prod
          cts.box
          cts.star
          cts.star
          cts.I
          x
          (x0:(cts.Term cts.box x) =>
           cts.prod
             cts.box
             cts.star
             cts.star
             cts.I
             (cts.prod cts.box cts.box cts.box cts.I nat.nat (x1:(cts.Term cts.box nat.nat) => x))
             (x1:(cts.Term
                    cts.box
                    (cts.prod
                       cts.box
                       cts.box
                       cts.box
                       cts.I
                       nat.nat
                       (x1:(cts.Term cts.box nat.nat) => x))) =>
              leibniz.leibniz x x0 (nat.match_nat_type x x0 x1 nat.O)))))
  :=
  return_type:(cts.Term cts.triangle (cts.univ' cts.box cts.triangle)) =>
  case_O:(cts.Term cts.box return_type) =>
  case_S:(cts.Term
            cts.box
            (cts.prod'
               cts.box
               cts.box
               cts.box
               nat.nat
               (x1:(cts.Term cts.box nat.nat) => return_type))) =>
  leibniz.sym_leibniz
    return_type
    (nat.match_nat_type return_type case_O case_S nat.O)
    case_O
    (nat.eq_match_nat_type_O return_type case_O case_S).

axiom_match_nat_type_S :
  cts.Term
    cts.star
    (cts.prod
       cts.triangle
       cts.star
       cts.star
       cts.I
       (cts.univ cts.box cts.triangle cts.I)
       (x:(cts.Term cts.triangle (cts.univ cts.box cts.triangle cts.I)) =>
        cts.prod
          cts.box
          cts.star
          cts.star
          cts.I
          x
          (x0:(cts.Term cts.box x) =>
           cts.prod
             cts.box
             cts.star
             cts.star
             cts.I
             (cts.prod cts.box cts.box cts.box cts.I nat.nat (x1:(cts.Term cts.box nat.nat) => x))
             (x1:(cts.Term
                    cts.box
                    (cts.prod
                       cts.box
                       cts.box
                       cts.box
                       cts.I
                       nat.nat
                       (x1:(cts.Term cts.box nat.nat) => x))) =>
              cts.prod
                cts.box
                cts.star
                cts.star
                cts.I
                nat.nat
                (x2:(cts.Term cts.box nat.nat) =>
                 connectives.equal x (nat.match_nat_type x x0 x1 (nat.S x2)) (x1 x2)))))).

def eq_match_nat_type_S :
  cts.Term
    cts.star
    (cts.prod
       cts.triangle
       cts.star
       cts.star
       cts.I
       (cts.univ cts.box cts.triangle cts.I)
       (x:(cts.Term cts.triangle (cts.univ cts.box cts.triangle cts.I)) =>
        cts.prod
          cts.box
          cts.star
          cts.star
          cts.I
          x
          (x0:(cts.Term cts.box x) =>
           cts.prod
             cts.box
             cts.star
             cts.star
             cts.I
             (cts.prod cts.box cts.box cts.box cts.I nat.nat (x1:(cts.Term cts.box nat.nat) => x))
             (x1:(cts.Term
                    cts.box
                    (cts.prod
                       cts.box
                       cts.box
                       cts.box
                       cts.I
                       nat.nat
                       (x1:(cts.Term cts.box nat.nat) => x))) =>
              cts.prod
                cts.box
                cts.star
                cts.star
                cts.I
                nat.nat
                (x2:(cts.Term cts.box nat.nat) =>
                 leibniz.leibniz x (nat.match_nat_type x x0 x1 (nat.S x2)) (x1 x2))))))
  :=
  return_type:(cts.Term cts.triangle (cts.univ' cts.box cts.triangle)) =>
  case_O:(cts.Term cts.box return_type) =>
  case_S:(cts.Term
            cts.box
            (cts.prod'
               cts.box
               cts.box
               cts.box
               nat.nat
               (x1:(cts.Term cts.box nat.nat) => return_type))) =>
  n:(cts.Term cts.box nat.nat) =>
  connectives.equal_leibniz
    return_type
    (nat.match_nat_type return_type case_O case_S (nat.S n))
    (case_S n)
    (nat.axiom_match_nat_type_S return_type case_O case_S n).

def sym_eq_match_nat_type_S :
  cts.Term
    cts.star
    (cts.prod
       cts.triangle
       cts.star
       cts.star
       cts.I
       (cts.univ cts.box cts.triangle cts.I)
       (x:(cts.Term cts.triangle (cts.univ cts.box cts.triangle cts.I)) =>
        cts.prod
          cts.box
          cts.star
          cts.star
          cts.I
          x
          (x0:(cts.Term cts.box x) =>
           cts.prod
             cts.box
             cts.star
             cts.star
             cts.I
             (cts.prod cts.box cts.box cts.box cts.I nat.nat (x1:(cts.Term cts.box nat.nat) => x))
             (x1:(cts.Term
                    cts.box
                    (cts.prod
                       cts.box
                       cts.box
                       cts.box
                       cts.I
                       nat.nat
                       (x1:(cts.Term cts.box nat.nat) => x))) =>
              cts.prod
                cts.box
                cts.star
                cts.star
                cts.I
                nat.nat
                (x2:(cts.Term cts.box nat.nat) =>
                 leibniz.leibniz x (x1 x2) (nat.match_nat_type x x0 x1 (nat.S x2)))))))
  :=
  return_type:(cts.Term cts.triangle (cts.univ' cts.box cts.triangle)) =>
  case_O:(cts.Term cts.box return_type) =>
  case_S:(cts.Term
            cts.box
            (cts.prod'
               cts.box
               cts.box
               cts.box
               nat.nat
               (x1:(cts.Term cts.box nat.nat) => return_type))) =>
  n:(cts.Term cts.box nat.nat) =>
  leibniz.sym_leibniz
    return_type
    (nat.match_nat_type return_type case_O case_S (nat.S n))
    (case_S n)
    (nat.eq_match_nat_type_S return_type case_O case_S n).

filter_nat_type :
  cts.Term
    cts.diamond
    (cts.prod
       cts.triangle
       cts.diamond
       cts.diamond
       cts.I
       (cts.univ cts.box cts.triangle cts.I)
       (x:(cts.Term cts.triangle (cts.univ cts.box cts.triangle cts.I)) =>
        cts.cast
          cts.triangle
          cts.sinf
          (cts.univ cts.box cts.triangle cts.I)
          (cts.univ cts.diamond cts.sinf cts.I)
          cts.I
          (cts.prod
             cts.box
             cts.box
             cts.box
             cts.I
             (cts.prod cts.box cts.box cts.box cts.I nat.nat (x0:(cts.Term cts.box nat.nat) => x))
             (x0:(cts.Term
                    cts.box
                    (cts.prod
                       cts.box
                       cts.box
                       cts.box
                       cts.I
                       nat.nat
                       (x0:(cts.Term cts.box nat.nat) => x))) =>
              cts.prod cts.box cts.box cts.box cts.I nat.nat (x1:(cts.Term cts.box nat.nat) => x))))).

axiom_filter_nat_type_O :
  cts.Term
    cts.star
    (cts.prod
       cts.triangle
       cts.star
       cts.star
       cts.I
       (cts.univ cts.box cts.triangle cts.I)
       (x:(cts.Term cts.triangle (cts.univ cts.box cts.triangle cts.I)) =>
        cts.prod
          cts.box
          cts.star
          cts.star
          cts.I
          (cts.prod cts.box cts.box cts.box cts.I nat.nat (x0:(cts.Term cts.box nat.nat) => x))
          (x0:(cts.Term
                 cts.box
                 (cts.prod
                    cts.box
                    cts.box
                    cts.box
                    cts.I
                    nat.nat
                    (x0:(cts.Term cts.box nat.nat) => x))) =>
           connectives.equal x (nat.filter_nat_type x x0 nat.O) (x0 nat.O)))).

def eq_filter_nat_type_O :
  cts.Term
    cts.star
    (cts.prod
       cts.triangle
       cts.star
       cts.star
       cts.I
       (cts.univ cts.box cts.triangle cts.I)
       (x:(cts.Term cts.triangle (cts.univ cts.box cts.triangle cts.I)) =>
        cts.prod
          cts.box
          cts.star
          cts.star
          cts.I
          (cts.prod cts.box cts.box cts.box cts.I nat.nat (x0:(cts.Term cts.box nat.nat) => x))
          (x0:(cts.Term
                 cts.box
                 (cts.prod
                    cts.box
                    cts.box
                    cts.box
                    cts.I
                    nat.nat
                    (x0:(cts.Term cts.box nat.nat) => x))) =>
           leibniz.leibniz x (nat.filter_nat_type x x0 nat.O) (x0 nat.O))))
  :=
  return_type:(cts.Term cts.triangle (cts.univ' cts.box cts.triangle)) =>
  return:(cts.Term
            cts.box
            (cts.prod'
               cts.box
               cts.box
               cts.box
               nat.nat
               (x0:(cts.Term cts.box nat.nat) => return_type))) =>
  connectives.equal_leibniz
    return_type
    (nat.filter_nat_type return_type return nat.O)
    (return nat.O)
    (nat.axiom_filter_nat_type_O return_type return).

def sym_eq_filter_nat_type_O :
  cts.Term
    cts.star
    (cts.prod
       cts.triangle
       cts.star
       cts.star
       cts.I
       (cts.univ cts.box cts.triangle cts.I)
       (x:(cts.Term cts.triangle (cts.univ cts.box cts.triangle cts.I)) =>
        cts.prod
          cts.box
          cts.star
          cts.star
          cts.I
          (cts.prod cts.box cts.box cts.box cts.I nat.nat (x0:(cts.Term cts.box nat.nat) => x))
          (x0:(cts.Term
                 cts.box
                 (cts.prod
                    cts.box
                    cts.box
                    cts.box
                    cts.I
                    nat.nat
                    (x0:(cts.Term cts.box nat.nat) => x))) =>
           leibniz.leibniz x (x0 nat.O) (nat.filter_nat_type x x0 nat.O))))
  :=
  return_type:(cts.Term cts.triangle (cts.univ' cts.box cts.triangle)) =>
  return:(cts.Term
            cts.box
            (cts.prod'
               cts.box
               cts.box
               cts.box
               nat.nat
               (x0:(cts.Term cts.box nat.nat) => return_type))) =>
  leibniz.sym_leibniz
    return_type
    (nat.filter_nat_type return_type return nat.O)
    (return nat.O)
    (nat.eq_filter_nat_type_O return_type return).

axiom_filter_nat_type_S :
  cts.Term
    cts.star
    (cts.prod
       cts.triangle
       cts.star
       cts.star
       cts.I
       (cts.univ cts.box cts.triangle cts.I)
       (x:(cts.Term cts.triangle (cts.univ cts.box cts.triangle cts.I)) =>
        cts.prod
          cts.box
          cts.star
          cts.star
          cts.I
          (cts.prod cts.box cts.box cts.box cts.I nat.nat (x0:(cts.Term cts.box nat.nat) => x))
          (x0:(cts.Term
                 cts.box
                 (cts.prod
                    cts.box
                    cts.box
                    cts.box
                    cts.I
                    nat.nat
                    (x0:(cts.Term cts.box nat.nat) => x))) =>
           cts.prod
             cts.box
             cts.star
             cts.star
             cts.I
             nat.nat
             (x1:(cts.Term cts.box nat.nat) =>
              connectives.equal x (nat.filter_nat_type x x0 (nat.S x1)) (x0 (nat.S x1)))))).

def eq_filter_nat_type_S :
  cts.Term
    cts.star
    (cts.prod
       cts.triangle
       cts.star
       cts.star
       cts.I
       (cts.univ cts.box cts.triangle cts.I)
       (x:(cts.Term cts.triangle (cts.univ cts.box cts.triangle cts.I)) =>
        cts.prod
          cts.box
          cts.star
          cts.star
          cts.I
          (cts.prod cts.box cts.box cts.box cts.I nat.nat (x0:(cts.Term cts.box nat.nat) => x))
          (x0:(cts.Term
                 cts.box
                 (cts.prod
                    cts.box
                    cts.box
                    cts.box
                    cts.I
                    nat.nat
                    (x0:(cts.Term cts.box nat.nat) => x))) =>
           cts.prod
             cts.box
             cts.star
             cts.star
             cts.I
             nat.nat
             (x1:(cts.Term cts.box nat.nat) =>
              leibniz.leibniz x (nat.filter_nat_type x x0 (nat.S x1)) (x0 (nat.S x1))))))
  :=
  return_type:(cts.Term cts.triangle (cts.univ' cts.box cts.triangle)) =>
  return:(cts.Term
            cts.box
            (cts.prod'
               cts.box
               cts.box
               cts.box
               nat.nat
               (x0:(cts.Term cts.box nat.nat) => return_type))) =>
  n:(cts.Term cts.box nat.nat) =>
  connectives.equal_leibniz
    return_type
    (nat.filter_nat_type return_type return (nat.S n))
    (return (nat.S n))
    (nat.axiom_filter_nat_type_S return_type return n).

def sym_eq_filter_nat_type_S :
  cts.Term
    cts.star
    (cts.prod
       cts.triangle
       cts.star
       cts.star
       cts.I
       (cts.univ cts.box cts.triangle cts.I)
       (x:(cts.Term cts.triangle (cts.univ cts.box cts.triangle cts.I)) =>
        cts.prod
          cts.box
          cts.star
          cts.star
          cts.I
          (cts.prod cts.box cts.box cts.box cts.I nat.nat (x0:(cts.Term cts.box nat.nat) => x))
          (x0:(cts.Term
                 cts.box
                 (cts.prod
                    cts.box
                    cts.box
                    cts.box
                    cts.I
                    nat.nat
                    (x0:(cts.Term cts.box nat.nat) => x))) =>
           cts.prod
             cts.box
             cts.star
             cts.star
             cts.I
             nat.nat
             (x1:(cts.Term cts.box nat.nat) =>
              leibniz.leibniz x (x0 (nat.S x1)) (nat.filter_nat_type x x0 (nat.S x1))))))
  :=
  return_type:(cts.Term cts.triangle (cts.univ' cts.box cts.triangle)) =>
  return:(cts.Term
            cts.box
            (cts.prod'
               cts.box
               cts.box
               cts.box
               nat.nat
               (x0:(cts.Term cts.box nat.nat) => return_type))) =>
  n:(cts.Term cts.box nat.nat) =>
  leibniz.sym_leibniz
    return_type
    (nat.filter_nat_type return_type return (nat.S n))
    (return (nat.S n))
    (nat.eq_filter_nat_type_S return_type return n).

nat_ind :
  cts.Term
    cts.star
    (cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       (cts.prod
          cts.box
          cts.box
          cts.box
          cts.I
          nat.nat
          (x:(cts.Term cts.box nat.nat) => cts.univ cts.star cts.box cts.I))
       (x:(cts.Term
             cts.box
             (cts.prod
                cts.box
                cts.box
                cts.box
                cts.I
                nat.nat
                (x:(cts.Term cts.box nat.nat) => cts.univ cts.star cts.box cts.I))) =>
        cts.prod
          cts.star
          cts.star
          cts.star
          cts.I
          (x nat.O)
          (x0:(cts.Term cts.star (x nat.O)) =>
           cts.prod
             cts.star
             cts.star
             cts.star
             cts.I
             (cts.prod
                cts.box
                cts.star
                cts.star
                cts.I
                nat.nat
                (x1:(cts.Term cts.box nat.nat) =>
                 cts.prod
                   cts.star
                   cts.star
                   cts.star
                   cts.I
                   (x x1)
                   (x2:(cts.Term cts.star (x x1)) => x (nat.S x1))))
             (x1:(cts.Term
                    cts.star
                    (cts.prod
                       cts.box
                       cts.star
                       cts.star
                       cts.I
                       nat.nat
                       (x1:(cts.Term cts.box nat.nat) =>
                        cts.prod
                          cts.star
                          cts.star
                          cts.star
                          cts.I
                          (x x1)
                          (x2:(cts.Term cts.star (x x1)) => x (nat.S x1))))) =>
              cts.prod
                cts.box
                cts.star
                cts.star
                cts.I
                nat.nat
                (x2:(cts.Term cts.box nat.nat) => x x2))))).

def pred :
  cts.Term
    cts.diamond
    (cts.cast
       cts.triangle
       cts.sinf
       (cts.univ cts.box cts.triangle cts.I)
       (cts.univ cts.diamond cts.sinf cts.I)
       cts.I
       (cts.prod cts.box cts.box cts.box cts.I nat.nat (x:(cts.Term cts.box nat.nat) => nat.nat)))
  :=
  n:(cts.Term cts.box nat.nat) =>
  nat.match_nat_type nat.nat nat.O (p:(cts.Term cts.box nat.nat) => p) n.

def not_zero :
  cts.Term
    cts.diamond
    (cts.cast
       cts.triangle
       cts.sinf
       (cts.univ cts.box cts.triangle cts.I)
       (cts.univ cts.diamond cts.sinf cts.I)
       cts.I
       (cts.prod
          cts.box
          cts.box
          cts.box
          cts.I
          nat.nat
          (x:(cts.Term cts.box nat.nat) => cts.univ cts.star cts.box cts.I)))
  :=
  n:(cts.Term cts.box nat.nat) =>
  nat.match_nat_type
    (cts.univ cts.star cts.box cts.I)
    connectives.False
    (p:(cts.Term cts.box nat.nat) => connectives.True)
    n.

le :
  cts.Term
    cts.diamond
    (cts.cast
       cts.triangle
       cts.sinf
       (cts.univ cts.box cts.triangle cts.I)
       (cts.univ cts.diamond cts.sinf cts.I)
       cts.I
       (cts.prod
          cts.box
          cts.box
          cts.box
          cts.I
          nat.nat
          (x:(cts.Term cts.box nat.nat) =>
           cts.prod
             cts.box
             cts.box
             cts.box
             cts.I
             nat.nat
             (x0:(cts.Term cts.box nat.nat) => cts.univ cts.star cts.box cts.I)))).

le_n :
  cts.Term
    cts.star
    (cts.prod cts.box cts.star cts.star cts.I nat.nat (x:(cts.Term cts.box nat.nat) => nat.le x x)).

le_S :
  cts.Term
    cts.star
    (cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       nat.nat
       (x:(cts.Term cts.box nat.nat) =>
        cts.prod
          cts.box
          cts.star
          cts.star
          cts.I
          nat.nat
          (x0:(cts.Term cts.box nat.nat) =>
           cts.prod
             cts.star
             cts.star
             cts.star
             cts.I
             (nat.le x x0)
             (x1:(cts.Term cts.star (nat.le x x0)) => nat.le x (nat.S x0))))).

match_le_prop :
  cts.Term
    cts.star
    (cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       nat.nat
       (x:(cts.Term cts.box nat.nat) =>
        cts.prod
          cts.box
          cts.star
          cts.star
          cts.I
          (cts.prod
             cts.box
             cts.box
             cts.box
             cts.I
             nat.nat
             (x0:(cts.Term cts.box nat.nat) => cts.univ cts.star cts.box cts.I))
          (x0:(cts.Term
                 cts.box
                 (cts.prod
                    cts.box
                    cts.box
                    cts.box
                    cts.I
                    nat.nat
                    (x0:(cts.Term cts.box nat.nat) => cts.univ cts.star cts.box cts.I))) =>
           cts.prod
             cts.star
             cts.star
             cts.star
             cts.I
             (x0 x)
             (x1:(cts.Term cts.star (x0 x)) =>
              cts.prod
                cts.star
                cts.star
                cts.star
                cts.I
                (cts.prod
                   cts.box
                   cts.star
                   cts.star
                   cts.I
                   nat.nat
                   (x2:(cts.Term cts.box nat.nat) => x0 (nat.S x2)))
                (x2:(cts.Term
                       cts.star
                       (cts.prod
                          cts.box
                          cts.star
                          cts.star
                          cts.I
                          nat.nat
                          (x2:(cts.Term cts.box nat.nat) => x0 (nat.S x2)))) =>
                 cts.prod
                   cts.box
                   cts.star
                   cts.star
                   cts.I
                   nat.nat
                   (x3:(cts.Term cts.box nat.nat) =>
                    cts.prod
                      cts.star
                      cts.star
                      cts.star
                      cts.I
                      (nat.le x x3)
                      (x4:(cts.Term cts.star (nat.le x x3)) => x0 x3))))))).

le_ind :
  cts.Term
    cts.star
    (cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       nat.nat
       (x:(cts.Term cts.box nat.nat) =>
        cts.prod
          cts.box
          cts.star
          cts.star
          cts.I
          (cts.prod
             cts.box
             cts.box
             cts.box
             cts.I
             nat.nat
             (x0:(cts.Term cts.box nat.nat) => cts.univ cts.star cts.box cts.I))
          (x0:(cts.Term
                 cts.box
                 (cts.prod
                    cts.box
                    cts.box
                    cts.box
                    cts.I
                    nat.nat
                    (x0:(cts.Term cts.box nat.nat) => cts.univ cts.star cts.box cts.I))) =>
           cts.prod
             cts.star
             cts.star
             cts.star
             cts.I
             (x0 x)
             (x1:(cts.Term cts.star (x0 x)) =>
              cts.prod
                cts.star
                cts.star
                cts.star
                cts.I
                (cts.prod
                   cts.box
                   cts.star
                   cts.star
                   cts.I
                   nat.nat
                   (x2:(cts.Term cts.box nat.nat) =>
                    cts.prod
                      cts.star
                      cts.star
                      cts.star
                      cts.I
                      (nat.le x x2)
                      (x3:(cts.Term cts.star (nat.le x x2)) =>
                       cts.prod
                         cts.star
                         cts.star
                         cts.star
                         cts.I
                         (x0 x2)
                         (x4:(cts.Term cts.star (x0 x2)) => x0 (nat.S x2)))))
                (x2:(cts.Term
                       cts.star
                       (cts.prod
                          cts.box
                          cts.star
                          cts.star
                          cts.I
                          nat.nat
                          (x2:(cts.Term cts.box nat.nat) =>
                           cts.prod
                             cts.star
                             cts.star
                             cts.star
                             cts.I
                             (nat.le x x2)
                             (x3:(cts.Term cts.star (nat.le x x2)) =>
                              cts.prod
                                cts.star
                                cts.star
                                cts.star
                                cts.I
                                (x0 x2)
                                (x4:(cts.Term cts.star (x0 x2)) => x0 (nat.S x2)))))) =>
                 cts.prod
                   cts.box
                   cts.star
                   cts.star
                   cts.I
                   nat.nat
                   (x3:(cts.Term cts.box nat.nat) =>
                    cts.prod
                      cts.star
                      cts.star
                      cts.star
                      cts.I
                      (nat.le x x3)
                      (x4:(cts.Term cts.star (nat.le x x3)) => x0 x3))))))).

def lt :
  cts.Term
    cts.diamond
    (cts.cast
       cts.triangle
       cts.sinf
       (cts.univ cts.box cts.triangle cts.I)
       (cts.univ cts.diamond cts.sinf cts.I)
       cts.I
       (cts.prod
          cts.box
          cts.box
          cts.box
          cts.I
          nat.nat
          (x:(cts.Term cts.box nat.nat) =>
           cts.prod
             cts.box
             cts.box
             cts.box
             cts.I
             nat.nat
             (x0:(cts.Term cts.box nat.nat) => cts.univ cts.star cts.box cts.I))))
  :=
  n:(cts.Term cts.box nat.nat) => m:(cts.Term cts.box nat.nat) => nat.le (nat.S n) m.

plus :
  cts.Term
    cts.diamond
    (cts.cast
       cts.triangle
       cts.sinf
       (cts.univ cts.box cts.triangle cts.I)
       (cts.univ cts.diamond cts.sinf cts.I)
       cts.I
       (cts.prod
          cts.box
          cts.box
          cts.box
          cts.I
          nat.nat
          (x:(cts.Term cts.box nat.nat) =>
           cts.prod
             cts.box
             cts.box
             cts.box
             cts.I
             nat.nat
             (x0:(cts.Term cts.box nat.nat) => nat.nat)))).

plus_body :
  cts.Term
    cts.diamond
    (cts.cast
       cts.triangle
       cts.sinf
       (cts.univ cts.box cts.triangle cts.I)
       (cts.univ cts.diamond cts.sinf cts.I)
       cts.I
       (cts.prod
          cts.box
          cts.box
          cts.box
          cts.I
          nat.nat
          (x:(cts.Term cts.box nat.nat) =>
           cts.prod
             cts.box
             cts.box
             cts.box
             cts.I
             nat.nat
             (x0:(cts.Term cts.box nat.nat) => nat.nat)))).

axiom_plus :
  cts.Term
    cts.star
    (cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       nat.nat
       (x:(cts.Term cts.box nat.nat) =>
        connectives.equal
          (cts.prod
             cts.box
             cts.box
             cts.box
             cts.I
             nat.nat
             (x0:(cts.Term cts.box nat.nat) => nat.nat))
          (nat.plus x)
          (nat.filter_nat_type
             (cts.prod
                cts.box
                cts.box
                cts.box
                cts.I
                nat.nat
                (x0:(cts.Term cts.box nat.nat) => nat.nat))
             nat.plus_body
             x))).

def eq_plus :
  cts.Term
    cts.star
    (cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       nat.nat
       (x:(cts.Term cts.box nat.nat) =>
        leibniz.leibniz
          (cts.prod
             cts.box
             cts.box
             cts.box
             cts.I
             nat.nat
             (x0:(cts.Term cts.box nat.nat) => nat.nat))
          (nat.plus x)
          (nat.filter_nat_type
             (cts.prod
                cts.box
                cts.box
                cts.box
                cts.I
                nat.nat
                (x0:(cts.Term cts.box nat.nat) => nat.nat))
             nat.plus_body
             x)))
  :=
  n:(cts.Term cts.box nat.nat) =>
  connectives.equal_leibniz
    (cts.prod cts.box cts.box cts.box cts.I nat.nat (x:(cts.Term cts.box nat.nat) => nat.nat))
    (nat.plus n)
    (nat.filter_nat_type
       (cts.prod cts.box cts.box cts.box cts.I nat.nat (x:(cts.Term cts.box nat.nat) => nat.nat))
       nat.plus_body
       n)
    (nat.axiom_plus n).

def sym_eq_plus :
  cts.Term
    cts.star
    (cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       nat.nat
       (x:(cts.Term cts.box nat.nat) =>
        leibniz.leibniz
          (cts.prod
             cts.box
             cts.box
             cts.box
             cts.I
             nat.nat
             (x0:(cts.Term cts.box nat.nat) => nat.nat))
          (nat.filter_nat_type
             (cts.prod
                cts.box
                cts.box
                cts.box
                cts.I
                nat.nat
                (x0:(cts.Term cts.box nat.nat) => nat.nat))
             nat.plus_body
             x)
          (nat.plus x)))
  :=
  n:(cts.Term cts.box nat.nat) =>
  leibniz.sym_leibniz
    (cts.prod cts.box cts.box cts.box cts.I nat.nat (x:(cts.Term cts.box nat.nat) => nat.nat))
    (nat.plus n)
    (nat.filter_nat_type
       (cts.prod cts.box cts.box cts.box cts.I nat.nat (x:(cts.Term cts.box nat.nat) => nat.nat))
       nat.plus_body
       n)
    (nat.eq_plus n).

axiom_plus_body_O :
  cts.Term
    cts.star
    (connectives.equal
       (cts.prod cts.box cts.box cts.box cts.I nat.nat (x:(cts.Term cts.box nat.nat) => nat.nat))
       (nat.plus_body nat.O)
       (m:(cts.Term cts.box nat.nat) => m)).

def eq_plus_body_O :
  cts.Term
    cts.star
    (leibniz.leibniz
       (cts.prod cts.box cts.box cts.box cts.I nat.nat (x:(cts.Term cts.box nat.nat) => nat.nat))
       (nat.plus_body nat.O)
       (m:(cts.Term cts.box nat.nat) => m))
  :=
  connectives.equal_leibniz
    (cts.prod cts.box cts.box cts.box cts.I nat.nat (x:(cts.Term cts.box nat.nat) => nat.nat))
    (nat.plus_body nat.O)
    (m:(cts.Term cts.box nat.nat) => m)
    nat.axiom_plus_body_O.

def sym_eq_plus_body_O :
  cts.Term
    cts.star
    (leibniz.leibniz
       (cts.prod cts.box cts.box cts.box cts.I nat.nat (x:(cts.Term cts.box nat.nat) => nat.nat))
       (m:(cts.Term cts.box nat.nat) => m)
       (nat.plus_body nat.O))
  :=
  leibniz.sym_leibniz
    (cts.prod cts.box cts.box cts.box cts.I nat.nat (x:(cts.Term cts.box nat.nat) => nat.nat))
    (nat.plus_body nat.O)
    (m:(cts.Term cts.box nat.nat) => m)
    nat.eq_plus_body_O.

axiom_plus_body_S :
  cts.Term
    cts.star
    (cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       nat.nat
       (x:(cts.Term cts.box nat.nat) =>
        connectives.equal
          (cts.prod
             cts.box
             cts.box
             cts.box
             cts.I
             nat.nat
             (x0:(cts.Term cts.box nat.nat) => nat.nat))
          (nat.plus_body (nat.S x))
          (m:(cts.Term cts.box nat.nat) => nat.S (nat.plus x m)))).

def eq_plus_body_S :
  cts.Term
    cts.star
    (cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       nat.nat
       (x:(cts.Term cts.box nat.nat) =>
        leibniz.leibniz
          (cts.prod
             cts.box
             cts.box
             cts.box
             cts.I
             nat.nat
             (x0:(cts.Term cts.box nat.nat) => nat.nat))
          (nat.plus_body (nat.S x))
          (m:(cts.Term cts.box nat.nat) => nat.S (nat.plus x m))))
  :=
  n:(cts.Term cts.box nat.nat) =>
  connectives.equal_leibniz
    (cts.prod cts.box cts.box cts.box cts.I nat.nat (x:(cts.Term cts.box nat.nat) => nat.nat))
    (nat.plus_body (nat.S n))
    (m:(cts.Term cts.box nat.nat) => nat.S (nat.plus n m))
    (nat.axiom_plus_body_S n).

def sym_eq_plus_body_S :
  cts.Term
    cts.star
    (cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       nat.nat
       (x:(cts.Term cts.box nat.nat) =>
        leibniz.leibniz
          (cts.prod
             cts.box
             cts.box
             cts.box
             cts.I
             nat.nat
             (x0:(cts.Term cts.box nat.nat) => nat.nat))
          (m:(cts.Term cts.box nat.nat) => nat.S (nat.plus x m))
          (nat.plus_body (nat.S x))))
  :=
  n:(cts.Term cts.box nat.nat) =>
  leibniz.sym_leibniz
    (cts.prod cts.box cts.box cts.box cts.I nat.nat (x:(cts.Term cts.box nat.nat) => nat.nat))
    (nat.plus_body (nat.S n))
    (m:(cts.Term cts.box nat.nat) => nat.S (nat.plus n m))
    (nat.eq_plus_body_S n).

times :
  cts.Term
    cts.diamond
    (cts.cast
       cts.triangle
       cts.sinf
       (cts.univ cts.box cts.triangle cts.I)
       (cts.univ cts.diamond cts.sinf cts.I)
       cts.I
       (cts.prod
          cts.box
          cts.box
          cts.box
          cts.I
          nat.nat
          (x:(cts.Term cts.box nat.nat) =>
           cts.prod
             cts.box
             cts.box
             cts.box
             cts.I
             nat.nat
             (x0:(cts.Term cts.box nat.nat) => nat.nat)))).

times_body :
  cts.Term
    cts.diamond
    (cts.cast
       cts.triangle
       cts.sinf
       (cts.univ cts.box cts.triangle cts.I)
       (cts.univ cts.diamond cts.sinf cts.I)
       cts.I
       (cts.prod
          cts.box
          cts.box
          cts.box
          cts.I
          nat.nat
          (x:(cts.Term cts.box nat.nat) =>
           cts.prod
             cts.box
             cts.box
             cts.box
             cts.I
             nat.nat
             (x0:(cts.Term cts.box nat.nat) => nat.nat)))).

axiom_times :
  cts.Term
    cts.star
    (cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       nat.nat
       (x:(cts.Term cts.box nat.nat) =>
        connectives.equal
          (cts.prod
             cts.box
             cts.box
             cts.box
             cts.I
             nat.nat
             (x0:(cts.Term cts.box nat.nat) => nat.nat))
          (nat.times x)
          (nat.filter_nat_type
             (cts.prod
                cts.box
                cts.box
                cts.box
                cts.I
                nat.nat
                (x0:(cts.Term cts.box nat.nat) => nat.nat))
             nat.times_body
             x))).

def eq_times :
  cts.Term
    cts.star
    (cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       nat.nat
       (x:(cts.Term cts.box nat.nat) =>
        leibniz.leibniz
          (cts.prod
             cts.box
             cts.box
             cts.box
             cts.I
             nat.nat
             (x0:(cts.Term cts.box nat.nat) => nat.nat))
          (nat.times x)
          (nat.filter_nat_type
             (cts.prod
                cts.box
                cts.box
                cts.box
                cts.I
                nat.nat
                (x0:(cts.Term cts.box nat.nat) => nat.nat))
             nat.times_body
             x)))
  :=
  n:(cts.Term cts.box nat.nat) =>
  connectives.equal_leibniz
    (cts.prod cts.box cts.box cts.box cts.I nat.nat (x:(cts.Term cts.box nat.nat) => nat.nat))
    (nat.times n)
    (nat.filter_nat_type
       (cts.prod cts.box cts.box cts.box cts.I nat.nat (x:(cts.Term cts.box nat.nat) => nat.nat))
       nat.times_body
       n)
    (nat.axiom_times n).

def sym_eq_times :
  cts.Term
    cts.star
    (cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       nat.nat
       (x:(cts.Term cts.box nat.nat) =>
        leibniz.leibniz
          (cts.prod
             cts.box
             cts.box
             cts.box
             cts.I
             nat.nat
             (x0:(cts.Term cts.box nat.nat) => nat.nat))
          (nat.filter_nat_type
             (cts.prod
                cts.box
                cts.box
                cts.box
                cts.I
                nat.nat
                (x0:(cts.Term cts.box nat.nat) => nat.nat))
             nat.times_body
             x)
          (nat.times x)))
  :=
  n:(cts.Term cts.box nat.nat) =>
  leibniz.sym_leibniz
    (cts.prod cts.box cts.box cts.box cts.I nat.nat (x:(cts.Term cts.box nat.nat) => nat.nat))
    (nat.times n)
    (nat.filter_nat_type
       (cts.prod cts.box cts.box cts.box cts.I nat.nat (x:(cts.Term cts.box nat.nat) => nat.nat))
       nat.times_body
       n)
    (nat.eq_times n).

axiom_times_body_O :
  cts.Term
    cts.star
    (connectives.equal
       (cts.prod cts.box cts.box cts.box cts.I nat.nat (x:(cts.Term cts.box nat.nat) => nat.nat))
       (nat.times_body nat.O)
       (m:(cts.Term cts.box nat.nat) => nat.O)).

def eq_times_body_O :
  cts.Term
    cts.star
    (leibniz.leibniz
       (cts.prod cts.box cts.box cts.box cts.I nat.nat (x:(cts.Term cts.box nat.nat) => nat.nat))
       (nat.times_body nat.O)
       (m:(cts.Term cts.box nat.nat) => nat.O))
  :=
  connectives.equal_leibniz
    (cts.prod cts.box cts.box cts.box cts.I nat.nat (x:(cts.Term cts.box nat.nat) => nat.nat))
    (nat.times_body nat.O)
    (m:(cts.Term cts.box nat.nat) => nat.O)
    nat.axiom_times_body_O.

def sym_eq_times_body_O :
  cts.Term
    cts.star
    (leibniz.leibniz
       (cts.prod cts.box cts.box cts.box cts.I nat.nat (x:(cts.Term cts.box nat.nat) => nat.nat))
       (m:(cts.Term cts.box nat.nat) => nat.O)
       (nat.times_body nat.O))
  :=
  leibniz.sym_leibniz
    (cts.prod cts.box cts.box cts.box cts.I nat.nat (x:(cts.Term cts.box nat.nat) => nat.nat))
    (nat.times_body nat.O)
    (m:(cts.Term cts.box nat.nat) => nat.O)
    nat.eq_times_body_O.

axiom_times_body_S :
  cts.Term
    cts.star
    (cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       nat.nat
       (x:(cts.Term cts.box nat.nat) =>
        connectives.equal
          (cts.prod
             cts.box
             cts.box
             cts.box
             cts.I
             nat.nat
             (x0:(cts.Term cts.box nat.nat) => nat.nat))
          (nat.times_body (nat.S x))
          (m:(cts.Term cts.box nat.nat) => nat.plus m (nat.times x m)))).

def eq_times_body_S :
  cts.Term
    cts.star
    (cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       nat.nat
       (x:(cts.Term cts.box nat.nat) =>
        leibniz.leibniz
          (cts.prod
             cts.box
             cts.box
             cts.box
             cts.I
             nat.nat
             (x0:(cts.Term cts.box nat.nat) => nat.nat))
          (nat.times_body (nat.S x))
          (m:(cts.Term cts.box nat.nat) => nat.plus m (nat.times x m))))
  :=
  n:(cts.Term cts.box nat.nat) =>
  connectives.equal_leibniz
    (cts.prod cts.box cts.box cts.box cts.I nat.nat (x:(cts.Term cts.box nat.nat) => nat.nat))
    (nat.times_body (nat.S n))
    (m:(cts.Term cts.box nat.nat) => nat.plus m (nat.times n m))
    (nat.axiom_times_body_S n).

def sym_eq_times_body_S :
  cts.Term
    cts.star
    (cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       nat.nat
       (x:(cts.Term cts.box nat.nat) =>
        leibniz.leibniz
          (cts.prod
             cts.box
             cts.box
             cts.box
             cts.I
             nat.nat
             (x0:(cts.Term cts.box nat.nat) => nat.nat))
          (m:(cts.Term cts.box nat.nat) => nat.plus m (nat.times x m))
          (nat.times_body (nat.S x))))
  :=
  n:(cts.Term cts.box nat.nat) =>
  leibniz.sym_leibniz
    (cts.prod cts.box cts.box cts.box cts.I nat.nat (x:(cts.Term cts.box nat.nat) => nat.nat))
    (nat.times_body (nat.S n))
    (m:(cts.Term cts.box nat.nat) => nat.plus m (nat.times n m))
    (nat.eq_times_body_S n).

minus :
  cts.Term
    cts.diamond
    (cts.cast
       cts.triangle
       cts.sinf
       (cts.univ cts.box cts.triangle cts.I)
       (cts.univ cts.diamond cts.sinf cts.I)
       cts.I
       (cts.prod
          cts.box
          cts.box
          cts.box
          cts.I
          nat.nat
          (x:(cts.Term cts.box nat.nat) =>
           cts.prod
             cts.box
             cts.box
             cts.box
             cts.I
             nat.nat
             (x0:(cts.Term cts.box nat.nat) => nat.nat)))).

minus_body :
  cts.Term
    cts.diamond
    (cts.cast
       cts.triangle
       cts.sinf
       (cts.univ cts.box cts.triangle cts.I)
       (cts.univ cts.diamond cts.sinf cts.I)
       cts.I
       (cts.prod
          cts.box
          cts.box
          cts.box
          cts.I
          nat.nat
          (x:(cts.Term cts.box nat.nat) =>
           cts.prod
             cts.box
             cts.box
             cts.box
             cts.I
             nat.nat
             (x0:(cts.Term cts.box nat.nat) => nat.nat)))).

axiom_minus :
  cts.Term
    cts.star
    (cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       nat.nat
       (x:(cts.Term cts.box nat.nat) =>
        connectives.equal
          (cts.prod
             cts.box
             cts.box
             cts.box
             cts.I
             nat.nat
             (x0:(cts.Term cts.box nat.nat) => nat.nat))
          (nat.minus x)
          (nat.filter_nat_type
             (cts.prod
                cts.box
                cts.box
                cts.box
                cts.I
                nat.nat
                (x0:(cts.Term cts.box nat.nat) => nat.nat))
             nat.minus_body
             x))).

def eq_minus :
  cts.Term
    cts.star
    (cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       nat.nat
       (x:(cts.Term cts.box nat.nat) =>
        leibniz.leibniz
          (cts.prod
             cts.box
             cts.box
             cts.box
             cts.I
             nat.nat
             (x0:(cts.Term cts.box nat.nat) => nat.nat))
          (nat.minus x)
          (nat.filter_nat_type
             (cts.prod
                cts.box
                cts.box
                cts.box
                cts.I
                nat.nat
                (x0:(cts.Term cts.box nat.nat) => nat.nat))
             nat.minus_body
             x)))
  :=
  n:(cts.Term cts.box nat.nat) =>
  connectives.equal_leibniz
    (cts.prod cts.box cts.box cts.box cts.I nat.nat (x:(cts.Term cts.box nat.nat) => nat.nat))
    (nat.minus n)
    (nat.filter_nat_type
       (cts.prod cts.box cts.box cts.box cts.I nat.nat (x:(cts.Term cts.box nat.nat) => nat.nat))
       nat.minus_body
       n)
    (nat.axiom_minus n).

def sym_eq_minus :
  cts.Term
    cts.star
    (cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       nat.nat
       (x:(cts.Term cts.box nat.nat) =>
        leibniz.leibniz
          (cts.prod
             cts.box
             cts.box
             cts.box
             cts.I
             nat.nat
             (x0:(cts.Term cts.box nat.nat) => nat.nat))
          (nat.filter_nat_type
             (cts.prod
                cts.box
                cts.box
                cts.box
                cts.I
                nat.nat
                (x0:(cts.Term cts.box nat.nat) => nat.nat))
             nat.minus_body
             x)
          (nat.minus x)))
  :=
  n:(cts.Term cts.box nat.nat) =>
  leibniz.sym_leibniz
    (cts.prod cts.box cts.box cts.box cts.I nat.nat (x:(cts.Term cts.box nat.nat) => nat.nat))
    (nat.minus n)
    (nat.filter_nat_type
       (cts.prod cts.box cts.box cts.box cts.I nat.nat (x:(cts.Term cts.box nat.nat) => nat.nat))
       nat.minus_body
       n)
    (nat.eq_minus n).

axiom_minus_body_O :
  cts.Term
    cts.star
    (connectives.equal
       (cts.prod cts.box cts.box cts.box cts.I nat.nat (x:(cts.Term cts.box nat.nat) => nat.nat))
       (nat.minus_body nat.O)
       (m:(cts.Term cts.box nat.nat) => nat.O)).

def eq_minus_body_O :
  cts.Term
    cts.star
    (leibniz.leibniz
       (cts.prod cts.box cts.box cts.box cts.I nat.nat (x:(cts.Term cts.box nat.nat) => nat.nat))
       (nat.minus_body nat.O)
       (m:(cts.Term cts.box nat.nat) => nat.O))
  :=
  connectives.equal_leibniz
    (cts.prod cts.box cts.box cts.box cts.I nat.nat (x:(cts.Term cts.box nat.nat) => nat.nat))
    (nat.minus_body nat.O)
    (m:(cts.Term cts.box nat.nat) => nat.O)
    nat.axiom_minus_body_O.

def sym_eq_minus_body_O :
  cts.Term
    cts.star
    (leibniz.leibniz
       (cts.prod cts.box cts.box cts.box cts.I nat.nat (x:(cts.Term cts.box nat.nat) => nat.nat))
       (m:(cts.Term cts.box nat.nat) => nat.O)
       (nat.minus_body nat.O))
  :=
  leibniz.sym_leibniz
    (cts.prod cts.box cts.box cts.box cts.I nat.nat (x:(cts.Term cts.box nat.nat) => nat.nat))
    (nat.minus_body nat.O)
    (m:(cts.Term cts.box nat.nat) => nat.O)
    nat.eq_minus_body_O.

axiom_minus_body_S :
  cts.Term
    cts.star
    (cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       nat.nat
       (x:(cts.Term cts.box nat.nat) =>
        connectives.equal
          (cts.prod
             cts.box
             cts.box
             cts.box
             cts.I
             nat.nat
             (x0:(cts.Term cts.box nat.nat) => nat.nat))
          (nat.minus_body (nat.S x))
          (m:(cts.Term cts.box nat.nat) =>
           nat.match_nat_type nat.nat (nat.S x) (q:(cts.Term cts.box nat.nat) => nat.minus x q) m))).

def eq_minus_body_S :
  cts.Term
    cts.star
    (cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       nat.nat
       (x:(cts.Term cts.box nat.nat) =>
        leibniz.leibniz
          (cts.prod
             cts.box
             cts.box
             cts.box
             cts.I
             nat.nat
             (x0:(cts.Term cts.box nat.nat) => nat.nat))
          (nat.minus_body (nat.S x))
          (m:(cts.Term cts.box nat.nat) =>
           nat.match_nat_type nat.nat (nat.S x) (q:(cts.Term cts.box nat.nat) => nat.minus x q) m)))
  :=
  n:(cts.Term cts.box nat.nat) =>
  connectives.equal_leibniz
    (cts.prod cts.box cts.box cts.box cts.I nat.nat (x:(cts.Term cts.box nat.nat) => nat.nat))
    (nat.minus_body (nat.S n))
    (m:(cts.Term cts.box nat.nat) =>
     nat.match_nat_type nat.nat (nat.S n) (q:(cts.Term cts.box nat.nat) => nat.minus n q) m)
    (nat.axiom_minus_body_S n).

def sym_eq_minus_body_S :
  cts.Term
    cts.star
    (cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       nat.nat
       (x:(cts.Term cts.box nat.nat) =>
        leibniz.leibniz
          (cts.prod
             cts.box
             cts.box
             cts.box
             cts.I
             nat.nat
             (x0:(cts.Term cts.box nat.nat) => nat.nat))
          (m:(cts.Term cts.box nat.nat) =>
           nat.match_nat_type nat.nat (nat.S x) (q:(cts.Term cts.box nat.nat) => nat.minus x q) m)
          (nat.minus_body (nat.S x))))
  :=
  n:(cts.Term cts.box nat.nat) =>
  leibniz.sym_leibniz
    (cts.prod cts.box cts.box cts.box cts.I nat.nat (x:(cts.Term cts.box nat.nat) => nat.nat))
    (nat.minus_body (nat.S n))
    (m:(cts.Term cts.box nat.nat) =>
     nat.match_nat_type nat.nat (nat.S n) (q:(cts.Term cts.box nat.nat) => nat.minus n q) m)
    (nat.eq_minus_body_S n).

def nat_case :
  cts.Term
    cts.star
    (cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       nat.nat
       (x:(cts.Term cts.box nat.nat) =>
        cts.prod
          cts.box
          cts.star
          cts.star
          cts.I
          (cts.prod
             cts.box
             cts.box
             cts.box
             cts.I
             nat.nat
             (x0:(cts.Term cts.box nat.nat) => cts.univ cts.star cts.box cts.I))
          (x0:(cts.Term
                 cts.box
                 (cts.prod
                    cts.box
                    cts.box
                    cts.box
                    cts.I
                    nat.nat
                    (x0:(cts.Term cts.box nat.nat) => cts.univ cts.star cts.box cts.I))) =>
           cts.prod
             cts.star
             cts.star
             cts.star
             cts.I
             (cts.prod
                cts.star
                cts.star
                cts.star
                cts.I
                (logic.eq nat.nat x nat.O)
                (x1:(cts.Term cts.star (logic.eq nat.nat x nat.O)) => x0 nat.O))
             (x1:(cts.Term
                    cts.star
                    (cts.prod
                       cts.star
                       cts.star
                       cts.star
                       cts.I
                       (logic.eq nat.nat x nat.O)
                       (x1:(cts.Term cts.star (logic.eq nat.nat x nat.O)) => x0 nat.O))) =>
              cts.prod
                cts.star
                cts.star
                cts.star
                cts.I
                (cts.prod
                   cts.box
                   cts.star
                   cts.star
                   cts.I
                   nat.nat
                   (x2:(cts.Term cts.box nat.nat) =>
                    cts.prod
                      cts.star
                      cts.star
                      cts.star
                      cts.I
                      (logic.eq nat.nat x (nat.S x2))
                      (x3:(cts.Term cts.star (logic.eq nat.nat x (nat.S x2))) => x0 (nat.S x2))))
                (x2:(cts.Term
                       cts.star
                       (cts.prod
                          cts.box
                          cts.star
                          cts.star
                          cts.I
                          nat.nat
                          (x2:(cts.Term cts.box nat.nat) =>
                           cts.prod
                             cts.star
                             cts.star
                             cts.star
                             cts.I
                             (logic.eq nat.nat x (nat.S x2))
                             (x3:(cts.Term cts.star (logic.eq nat.nat x (nat.S x2))) =>
                              x0 (nat.S x2))))) =>
                 x0 x)))))
  :=
  n:(cts.Term cts.box nat.nat) =>
  P:(cts.Term
       cts.box
       (cts.prod'
          cts.box
          cts.box
          cts.box
          nat.nat
          (x0:(cts.Term cts.box nat.nat) => cts.univ cts.star cts.box cts.I))) =>
  nat.nat_ind
    (_x_365:(cts.Term cts.box nat.nat) =>
     cts.prod
       cts.star
       cts.star
       cts.star
       cts.I
       (cts.prod
          cts.star
          cts.star
          cts.star
          cts.I
          (logic.eq nat.nat _x_365 nat.O)
          (x:(cts.Term cts.star (logic.eq nat.nat _x_365 nat.O)) => P nat.O))
       (x:(cts.Term
             cts.star
             (cts.prod
                cts.star
                cts.star
                cts.star
                cts.I
                (logic.eq nat.nat _x_365 nat.O)
                (x:(cts.Term cts.star (logic.eq nat.nat _x_365 nat.O)) => P nat.O))) =>
        cts.prod
          cts.star
          cts.star
          cts.star
          cts.I
          (cts.prod
             cts.box
             cts.star
             cts.star
             cts.I
             nat.nat
             (x0:(cts.Term cts.box nat.nat) =>
              cts.prod
                cts.star
                cts.star
                cts.star
                cts.I
                (logic.eq nat.nat _x_365 (nat.S x0))
                (x1:(cts.Term cts.star (logic.eq nat.nat _x_365 (nat.S x0))) => P (nat.S x0))))
          (x0:(cts.Term
                 cts.star
                 (cts.prod
                    cts.box
                    cts.star
                    cts.star
                    cts.I
                    nat.nat
                    (x0:(cts.Term cts.box nat.nat) =>
                     cts.prod
                       cts.star
                       cts.star
                       cts.star
                       cts.I
                       (logic.eq nat.nat _x_365 (nat.S x0))
                       (x1:(cts.Term cts.star (logic.eq nat.nat _x_365 (nat.S x0))) =>
                        P (nat.S x0))))) =>
           P _x_365)))
    (auto:(cts.Term
             cts.star
             (cts.prod'
                cts.star
                cts.star
                cts.star
                (logic.eq nat.nat nat.O nat.O)
                (x:(cts.Term cts.star (logic.eq nat.nat nat.O nat.O)) => P nat.O))) =>
     auto':(cts.Term
              cts.star
              (cts.prod'
                 cts.box
                 cts.star
                 cts.star
                 nat.nat
                 (x0:(cts.Term cts.box nat.nat) =>
                  cts.prod
                    cts.star
                    cts.star
                    cts.star
                    cts.I
                    (logic.eq nat.nat nat.O (nat.S x0))
                    (x1:(cts.Term cts.star (logic.eq nat.nat nat.O (nat.S x0))) => P (nat.S x0))))) =>
     auto (logic.refl nat.nat nat.O))
    (x_366:(cts.Term cts.box nat.nat) =>
     _x_368:(cts.Term
               cts.star
               (cts.prod'
                  cts.star
                  cts.star
                  cts.star
                  (cts.prod'
                     cts.star
                     cts.star
                     cts.star
                     (logic.eq nat.nat x_366 nat.O)
                     (x:(cts.Term cts.star (logic.eq nat.nat x_366 nat.O)) => P nat.O))
                  (x:(cts.Term
                        cts.star
                        (cts.prod
                           cts.star
                           cts.star
                           cts.star
                           cts.I
                           (logic.eq nat.nat x_366 nat.O)
                           (x:(cts.Term cts.star (logic.eq nat.nat x_366 nat.O)) => P nat.O))) =>
                   cts.prod
                     cts.star
                     cts.star
                     cts.star
                     cts.I
                     (cts.prod
                        cts.box
                        cts.star
                        cts.star
                        cts.I
                        nat.nat
                        (x0:(cts.Term cts.box nat.nat) =>
                         cts.prod
                           cts.star
                           cts.star
                           cts.star
                           cts.I
                           (logic.eq nat.nat x_366 (nat.S x0))
                           (x1:(cts.Term cts.star (logic.eq nat.nat x_366 (nat.S x0))) =>
                            P (nat.S x0))))
                     (x0:(cts.Term
                            cts.star
                            (cts.prod
                               cts.box
                               cts.star
                               cts.star
                               cts.I
                               nat.nat
                               (x0:(cts.Term cts.box nat.nat) =>
                                cts.prod
                                  cts.star
                                  cts.star
                                  cts.star
                                  cts.I
                                  (logic.eq nat.nat x_366 (nat.S x0))
                                  (x1:(cts.Term
                                         cts.star
                                         (logic.eq nat.nat x_366 (nat.S x0))) =>
                                   P (nat.S x0))))) =>
                      P x_366)))) =>
     auto:(cts.Term
             cts.star
             (cts.prod'
                cts.star
                cts.star
                cts.star
                (logic.eq nat.nat (nat.S x_366) nat.O)
                (x:(cts.Term cts.star (logic.eq nat.nat (nat.S x_366) nat.O)) => P nat.O))) =>
     auto':(cts.Term
              cts.star
              (cts.prod'
                 cts.box
                 cts.star
                 cts.star
                 nat.nat
                 (x0:(cts.Term cts.box nat.nat) =>
                  cts.prod
                    cts.star
                    cts.star
                    cts.star
                    cts.I
                    (logic.eq nat.nat (nat.S x_366) (nat.S x0))
                    (x1:(cts.Term cts.star (logic.eq nat.nat (nat.S x_366) (nat.S x0))) =>
                     P (nat.S x0))))) =>
     auto' x_366 (logic.refl nat.nat (nat.S x_366)))
    n.

def nat_elim2 :
  cts.Term
    cts.star
    (cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       (cts.prod
          cts.box
          cts.box
          cts.box
          cts.I
          nat.nat
          (x:(cts.Term cts.box nat.nat) =>
           cts.prod
             cts.box
             cts.box
             cts.box
             cts.I
             nat.nat
             (x0:(cts.Term cts.box nat.nat) => cts.univ cts.star cts.box cts.I)))
       (x:(cts.Term
             cts.box
             (cts.prod
                cts.box
                cts.box
                cts.box
                cts.I
                nat.nat
                (x:(cts.Term cts.box nat.nat) =>
                 cts.prod
                   cts.box
                   cts.box
                   cts.box
                   cts.I
                   nat.nat
                   (x0:(cts.Term cts.box nat.nat) => cts.univ cts.star cts.box cts.I)))) =>
        cts.prod
          cts.star
          cts.star
          cts.star
          cts.I
          (cts.prod
             cts.box
             cts.star
             cts.star
             cts.I
             nat.nat
             (x0:(cts.Term cts.box nat.nat) => x nat.O x0))
          (x0:(cts.Term
                 cts.star
                 (cts.prod
                    cts.box
                    cts.star
                    cts.star
                    cts.I
                    nat.nat
                    (x0:(cts.Term cts.box nat.nat) => x nat.O x0))) =>
           cts.prod
             cts.star
             cts.star
             cts.star
             cts.I
             (cts.prod
                cts.box
                cts.star
                cts.star
                cts.I
                nat.nat
                (x1:(cts.Term cts.box nat.nat) => x (nat.S x1) nat.O))
             (x1:(cts.Term
                    cts.star
                    (cts.prod
                       cts.box
                       cts.star
                       cts.star
                       cts.I
                       nat.nat
                       (x1:(cts.Term cts.box nat.nat) => x (nat.S x1) nat.O))) =>
              cts.prod
                cts.star
                cts.star
                cts.star
                cts.I
                (cts.prod
                   cts.box
                   cts.star
                   cts.star
                   cts.I
                   nat.nat
                   (x2:(cts.Term cts.box nat.nat) =>
                    cts.prod
                      cts.box
                      cts.star
                      cts.star
                      cts.I
                      nat.nat
                      (x3:(cts.Term cts.box nat.nat) =>
                       cts.prod
                         cts.star
                         cts.star
                         cts.star
                         cts.I
                         (x x2 x3)
                         (x4:(cts.Term cts.star (x x2 x3)) => x (nat.S x2) (nat.S x3)))))
                (x2:(cts.Term
                       cts.star
                       (cts.prod
                          cts.box
                          cts.star
                          cts.star
                          cts.I
                          nat.nat
                          (x2:(cts.Term cts.box nat.nat) =>
                           cts.prod
                             cts.box
                             cts.star
                             cts.star
                             cts.I
                             nat.nat
                             (x3:(cts.Term cts.box nat.nat) =>
                              cts.prod
                                cts.star
                                cts.star
                                cts.star
                                cts.I
                                (x x2 x3)
                                (x4:(cts.Term cts.star (x x2 x3)) =>
                                 x (nat.S x2) (nat.S x3)))))) =>
                 cts.prod
                   cts.box
                   cts.star
                   cts.star
                   cts.I
                   nat.nat
                   (x3:(cts.Term cts.box nat.nat) =>
                    cts.prod
                      cts.box
                      cts.star
                      cts.star
                      cts.I
                      nat.nat
                      (x4:(cts.Term cts.box nat.nat) => x x3 x4)))))))
  :=
  R:(cts.Term
       cts.box
       (cts.prod'
          cts.box
          cts.box
          cts.box
          nat.nat
          (x:(cts.Term cts.box nat.nat) =>
           cts.prod
             cts.box
             cts.box
             cts.box
             cts.I
             nat.nat
             (x0:(cts.Term cts.box nat.nat) => cts.univ cts.star cts.box cts.I)))) =>
  ROn:(cts.Term
         cts.star
         (cts.prod'
            cts.box
            cts.star
            cts.star
            nat.nat
            (x0:(cts.Term cts.box nat.nat) => R nat.O x0))) =>
  RSO:(cts.Term
         cts.star
         (cts.prod'
            cts.box
            cts.star
            cts.star
            nat.nat
            (x1:(cts.Term cts.box nat.nat) => R (nat.S x1) nat.O))) =>
  RSS:(cts.Term
         cts.star
         (cts.prod'
            cts.box
            cts.star
            cts.star
            nat.nat
            (x2:(cts.Term cts.box nat.nat) =>
             cts.prod
               cts.box
               cts.star
               cts.star
               cts.I
               nat.nat
               (x3:(cts.Term cts.box nat.nat) =>
                cts.prod
                  cts.star
                  cts.star
                  cts.star
                  cts.I
                  (R x2 x3)
                  (x4:(cts.Term cts.star (R x2 x3)) => R (nat.S x2) (nat.S x3)))))) =>
  n:(cts.Term cts.box nat.nat) =>
  nat.nat_ind
    (_x_365:(cts.Term cts.box nat.nat) =>
     cts.prod cts.box cts.star cts.star cts.I nat.nat (x:(cts.Term cts.box nat.nat) => R _x_365 x))
    (m:(cts.Term cts.box nat.nat) => ROn m)
    (n0:(cts.Term cts.box nat.nat) =>
     Rn0m:(cts.Term
             cts.star
             (cts.prod'
                cts.box
                cts.star
                cts.star
                nat.nat
                (x:(cts.Term cts.box nat.nat) => R n0 x))) =>
     m:(cts.Term cts.box nat.nat) =>
     nat.match_nat_prop
       (__:(cts.Term cts.box nat.nat) => R (nat.S n0) __)
       (RSO n0)
       (auto:(cts.Term cts.box nat.nat) => RSS n0 auto (Rn0m auto))
       m)
    n.

def le_gen :
  cts.Term
    cts.star
    (cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       (cts.prod
          cts.box
          cts.box
          cts.box
          cts.I
          nat.nat
          (x:(cts.Term cts.box nat.nat) => cts.univ cts.star cts.box cts.I))
       (x:(cts.Term
             cts.box
             (cts.prod
                cts.box
                cts.box
                cts.box
                cts.I
                nat.nat
                (x:(cts.Term cts.box nat.nat) => cts.univ cts.star cts.box cts.I))) =>
        cts.prod
          cts.box
          cts.star
          cts.star
          cts.I
          nat.nat
          (x0:(cts.Term cts.box nat.nat) =>
           cts.prod
             cts.star
             cts.star
             cts.star
             cts.I
             (cts.prod
                cts.box
                cts.star
                cts.star
                cts.I
                nat.nat
                (x1:(cts.Term cts.box nat.nat) =>
                 cts.prod
                   cts.star
                   cts.star
                   cts.star
                   cts.I
                   (nat.le x1 x0)
                   (x2:(cts.Term cts.star (nat.le x1 x0)) => x x1)))
             (x1:(cts.Term
                    cts.star
                    (cts.prod
                       cts.box
                       cts.star
                       cts.star
                       cts.I
                       nat.nat
                       (x1:(cts.Term cts.box nat.nat) =>
                        cts.prod
                          cts.star
                          cts.star
                          cts.star
                          cts.I
                          (nat.le x1 x0)
                          (x2:(cts.Term cts.star (nat.le x1 x0)) => x x1)))) =>
              x x0))))
  :=
  P:(cts.Term
       cts.box
       (cts.prod'
          cts.box
          cts.box
          cts.box
          nat.nat
          (x:(cts.Term cts.box nat.nat) => cts.univ cts.star cts.box cts.I))) =>
  n:(cts.Term cts.box nat.nat) =>
  auto:(cts.Term
          cts.star
          (cts.prod'
             cts.box
             cts.star
             cts.star
             nat.nat
             (x1:(cts.Term cts.box nat.nat) =>
              cts.prod
                cts.star
                cts.star
                cts.star
                cts.I
                (nat.le x1 n)
                (x2:(cts.Term cts.star (nat.le x1 n)) => P x1)))) =>
  auto n (nat.le_n n).

def pred_Sn :
  cts.Term
    cts.star
    (cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       nat.nat
       (x:(cts.Term cts.box nat.nat) => logic.eq nat.nat x (nat.pred (nat.S x))))
  :=
  n:(cts.Term cts.box nat.nat) =>
  nat.sym_eq_match_nat_type_S
    nat.nat
    nat.O
    (p:(cts.Term cts.box nat.nat) => p)
    n
    (y:(cts.Term cts.box nat.nat) => logic.eq nat.nat n y)
    (logic.refl nat.nat n).

def injective_S :
  cts.Term cts.star (relations.injective_ nat.nat nat.nat nat.S)
  :=
  x:(cts.Term cts.box nat.nat) =>
  y:(cts.Term cts.box nat.nat) =>
  auto:(cts.Term cts.star (logic.eq nat.nat (nat.S x) (nat.S y))) =>
  logic.rewrite_l
    nat.nat
    y
    (__:(cts.Term cts.box nat.nat) => logic.eq nat.nat __ y)
    (logic.refl nat.nat y)
    x
    (logic.rewrite_r
       nat.nat
       (nat.pred (nat.S x))
       (__:(cts.Term cts.box nat.nat) => logic.eq nat.nat y __)
       (logic.rewrite_r
          nat.nat
          (nat.S y)
          (__:(cts.Term cts.box nat.nat) => logic.eq nat.nat y (nat.pred __))
          (nat.pred_Sn y)
          (nat.S x)
          auto)
       x
       (nat.pred_Sn x)).

def S_pred :
  cts.Term
    cts.star
    (cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       nat.nat
       (x:(cts.Term cts.box nat.nat) =>
        cts.prod
          cts.star
          cts.star
          cts.star
          cts.I
          (nat.lt nat.O x)
          (x0:(cts.Term cts.star (nat.lt nat.O x)) => logic.eq nat.nat (nat.S (nat.pred x)) x)))
  :=
  n:(cts.Term cts.box nat.nat) =>
  posn:(cts.Term cts.star (nat.le (nat.S nat.O) n)) =>
  nat.match_le_prop
    (nat.S nat.O)
    (__:(cts.Term cts.box nat.nat) => logic.eq nat.nat (nat.S (nat.pred __)) __)
    (logic.rewrite_l
       nat.nat
       nat.O
       (__:(cts.Term cts.box nat.nat) => logic.eq nat.nat (nat.S __) (nat.S nat.O))
       (logic.refl nat.nat (nat.S nat.O))
       (nat.pred (nat.S nat.O))
       (nat.pred_Sn nat.O))
    (m:(cts.Term cts.box nat.nat) =>
     logic.rewrite_l
       nat.nat
       m
       (__:(cts.Term cts.box nat.nat) => logic.eq nat.nat (nat.S __) (nat.S m))
       (logic.refl nat.nat (nat.S m))
       (nat.pred (nat.S m))
       (nat.pred_Sn m))
    n
    posn.

def plus_O_n :
  cts.Term
    cts.star
    (cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       nat.nat
       (x:(cts.Term cts.box nat.nat) => logic.eq nat.nat x (nat.plus nat.O x)))
  :=
  n:(cts.Term cts.box nat.nat) =>
  nat.sym_eq_plus
    nat.O
    (y:(cts.Term
          cts.box
          (cts.prod' cts.box cts.box cts.box nat.nat (x0:(cts.Term cts.box nat.nat) => nat.nat))) =>
     logic.eq nat.nat n (y n))
    (nat.sym_eq_filter_nat_type_O
       (cts.prod cts.box cts.box cts.box cts.I nat.nat (x:(cts.Term cts.box nat.nat) => nat.nat))
       nat.plus_body
       (y:(cts.Term
             cts.box
             (cts.prod'
                cts.box
                cts.box
                cts.box
                nat.nat
                (x:(cts.Term cts.box nat.nat) => nat.nat))) =>
        logic.eq nat.nat n (y n))
       (nat.sym_eq_plus_body_O
          (y:(cts.Term
                cts.box
                (cts.prod'
                   cts.box
                   cts.box
                   cts.box
                   nat.nat
                   (x:(cts.Term cts.box nat.nat) => nat.nat))) =>
           logic.eq nat.nat n (y n))
          (logic.refl nat.nat n))).

def plus_n_O :
  cts.Term
    cts.star
    (cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       nat.nat
       (x:(cts.Term cts.box nat.nat) => logic.eq nat.nat x (nat.plus x nat.O)))
  :=
  n:(cts.Term cts.box nat.nat) =>
  nat.nat_ind
    (_x_365:(cts.Term cts.box nat.nat) => logic.eq nat.nat _x_365 (nat.plus _x_365 nat.O))
    (nat.sym_eq_plus
       nat.O
       (y:(cts.Term
             cts.box
             (cts.prod'
                cts.box
                cts.box
                cts.box
                nat.nat
                (x0:(cts.Term cts.box nat.nat) => nat.nat))) =>
        logic.eq nat.nat nat.O (y nat.O))
       (nat.sym_eq_filter_nat_type_O
          (cts.prod cts.box cts.box cts.box cts.I nat.nat (x:(cts.Term cts.box nat.nat) => nat.nat))
          nat.plus_body
          (y:(cts.Term
                cts.box
                (cts.prod'
                   cts.box
                   cts.box
                   cts.box
                   nat.nat
                   (x:(cts.Term cts.box nat.nat) => nat.nat))) =>
           logic.eq nat.nat nat.O (y nat.O))
          (nat.sym_eq_plus_body_O
             (y:(cts.Term
                   cts.box
                   (cts.prod'
                      cts.box
                      cts.box
                      cts.box
                      nat.nat
                      (x:(cts.Term cts.box nat.nat) => nat.nat))) =>
              logic.eq nat.nat nat.O (y nat.O))
             (logic.refl nat.nat nat.O))))
    (x_366:(cts.Term cts.box nat.nat) =>
     _x_368:(cts.Term cts.star (logic.eq nat.nat x_366 (nat.plus x_366 nat.O))) =>
     nat.sym_eq_plus
       (nat.S x_366)
       (y:(cts.Term
             cts.box
             (cts.prod'
                cts.box
                cts.box
                cts.box
                nat.nat
                (x0:(cts.Term cts.box nat.nat) => nat.nat))) =>
        logic.eq nat.nat (nat.S x_366) (y nat.O))
       (nat.sym_eq_filter_nat_type_S
          (cts.prod cts.box cts.box cts.box cts.I nat.nat (x:(cts.Term cts.box nat.nat) => nat.nat))
          nat.plus_body
          x_366
          (y:(cts.Term
                cts.box
                (cts.prod'
                   cts.box
                   cts.box
                   cts.box
                   nat.nat
                   (x:(cts.Term cts.box nat.nat) => nat.nat))) =>
           logic.eq nat.nat (nat.S x_366) (y nat.O))
          (nat.sym_eq_plus_body_S
             x_366
             (y:(cts.Term
                   cts.box
                   (cts.prod'
                      cts.box
                      cts.box
                      cts.box
                      nat.nat
                      (x0:(cts.Term cts.box nat.nat) => nat.nat))) =>
              logic.eq nat.nat (nat.S x_366) (y nat.O))
             (logic.rewrite_l
                nat.nat
                x_366
                (__:(cts.Term cts.box nat.nat) => logic.eq nat.nat (nat.S x_366) (nat.S __))
                (logic.refl nat.nat (nat.S x_366))
                (nat.plus x_366 nat.O)
                _x_368))))
    n.

def plus_n_Sm :
  cts.Term
    cts.star
    (cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       nat.nat
       (x:(cts.Term cts.box nat.nat) =>
        cts.prod
          cts.box
          cts.star
          cts.star
          cts.I
          nat.nat
          (x0:(cts.Term cts.box nat.nat) =>
           logic.eq nat.nat (nat.S (nat.plus x x0)) (nat.plus x (nat.S x0)))))
  :=
  n:(cts.Term cts.box nat.nat) =>
  nat.nat_ind
    (_x_365:(cts.Term cts.box nat.nat) =>
     cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       nat.nat
       (x:(cts.Term cts.box nat.nat) =>
        logic.eq nat.nat (nat.S (nat.plus _x_365 x)) (nat.plus _x_365 (nat.S x))))
    (m:(cts.Term cts.box nat.nat) =>
     nat.sym_eq_plus
       nat.O
       (y:(cts.Term
             cts.box
             (cts.prod'
                cts.box
                cts.box
                cts.box
                nat.nat
                (x0:(cts.Term cts.box nat.nat) => nat.nat))) =>
        logic.eq nat.nat (nat.S (y m)) (nat.plus nat.O (nat.S m)))
       (nat.sym_eq_plus
          nat.O
          (y:(cts.Term
                cts.box
                (cts.prod'
                   cts.box
                   cts.box
                   cts.box
                   nat.nat
                   (x0:(cts.Term cts.box nat.nat) => nat.nat))) =>
           logic.eq
             nat.nat
             (nat.S
                (nat.filter_nat_type
                   (cts.prod
                      cts.box
                      cts.box
                      cts.box
                      cts.I
                      nat.nat
                      (x:(cts.Term cts.box nat.nat) => nat.nat))
                   nat.plus_body
                   nat.O
                   m))
             (y (nat.S m)))
          (nat.sym_eq_filter_nat_type_O
             (cts.prod
                cts.box
                cts.box
                cts.box
                cts.I
                nat.nat
                (x:(cts.Term cts.box nat.nat) => nat.nat))
             nat.plus_body
             (y:(cts.Term
                   cts.box
                   (cts.prod'
                      cts.box
                      cts.box
                      cts.box
                      nat.nat
                      (x:(cts.Term cts.box nat.nat) => nat.nat))) =>
              logic.eq
                nat.nat
                (nat.S
                   (nat.filter_nat_type
                      (cts.prod
                         cts.box
                         cts.box
                         cts.box
                         cts.I
                         nat.nat
                         (x:(cts.Term cts.box nat.nat) => nat.nat))
                      nat.plus_body
                      nat.O
                      m))
                (y (nat.S m)))
             (nat.sym_eq_filter_nat_type_O
                (cts.prod
                   cts.box
                   cts.box
                   cts.box
                   cts.I
                   nat.nat
                   (x:(cts.Term cts.box nat.nat) => nat.nat))
                nat.plus_body
                (y:(cts.Term
                      cts.box
                      (cts.prod'
                         cts.box
                         cts.box
                         cts.box
                         nat.nat
                         (x:(cts.Term cts.box nat.nat) => nat.nat))) =>
                 logic.eq nat.nat (nat.S (y m)) (nat.plus_body nat.O (nat.S m)))
                (nat.sym_eq_plus_body_O
                   (y:(cts.Term
                         cts.box
                         (cts.prod'
                            cts.box
                            cts.box
                            cts.box
                            nat.nat
                            (x:(cts.Term cts.box nat.nat) => nat.nat))) =>
                    logic.eq nat.nat (nat.S (y m)) (nat.plus_body nat.O (nat.S m)))
                   (nat.sym_eq_plus_body_O
                      (y:(cts.Term
                            cts.box
                            (cts.prod'
                               cts.box
                               cts.box
                               cts.box
                               nat.nat
                               (x:(cts.Term cts.box nat.nat) => nat.nat))) =>
                       logic.eq nat.nat (nat.S m) (y (nat.S m)))
                      (logic.refl nat.nat (nat.S m))))))))
    (x_366:(cts.Term cts.box nat.nat) =>
     _x_368:(cts.Term
               cts.star
               (cts.prod'
                  cts.box
                  cts.star
                  cts.star
                  nat.nat
                  (x:(cts.Term cts.box nat.nat) =>
                   logic.eq nat.nat (nat.S (nat.plus x_366 x)) (nat.plus x_366 (nat.S x))))) =>
     m:(cts.Term cts.box nat.nat) =>
     nat.sym_eq_plus
       (nat.S x_366)
       (y:(cts.Term
             cts.box
             (cts.prod'
                cts.box
                cts.box
                cts.box
                nat.nat
                (x0:(cts.Term cts.box nat.nat) => nat.nat))) =>
        logic.eq nat.nat (nat.S (y m)) (nat.plus (nat.S x_366) (nat.S m)))
       (nat.sym_eq_plus
          (nat.S x_366)
          (y:(cts.Term
                cts.box
                (cts.prod'
                   cts.box
                   cts.box
                   cts.box
                   nat.nat
                   (x0:(cts.Term cts.box nat.nat) => nat.nat))) =>
           logic.eq
             nat.nat
             (nat.S
                (nat.filter_nat_type
                   (cts.prod
                      cts.box
                      cts.box
                      cts.box
                      cts.I
                      nat.nat
                      (x:(cts.Term cts.box nat.nat) => nat.nat))
                   nat.plus_body
                   (nat.S x_366)
                   m))
             (y (nat.S m)))
          (nat.sym_eq_filter_nat_type_S
             (cts.prod
                cts.box
                cts.box
                cts.box
                cts.I
                nat.nat
                (x:(cts.Term cts.box nat.nat) => nat.nat))
             nat.plus_body
             x_366
             (y:(cts.Term
                   cts.box
                   (cts.prod'
                      cts.box
                      cts.box
                      cts.box
                      nat.nat
                      (x:(cts.Term cts.box nat.nat) => nat.nat))) =>
              logic.eq
                nat.nat
                (nat.S
                   (nat.filter_nat_type
                      (cts.prod
                         cts.box
                         cts.box
                         cts.box
                         cts.I
                         nat.nat
                         (x:(cts.Term cts.box nat.nat) => nat.nat))
                      nat.plus_body
                      (nat.S x_366)
                      m))
                (y (nat.S m)))
             (nat.sym_eq_filter_nat_type_S
                (cts.prod
                   cts.box
                   cts.box
                   cts.box
                   cts.I
                   nat.nat
                   (x:(cts.Term cts.box nat.nat) => nat.nat))
                nat.plus_body
                x_366
                (y:(cts.Term
                      cts.box
                      (cts.prod'
                         cts.box
                         cts.box
                         cts.box
                         nat.nat
                         (x:(cts.Term cts.box nat.nat) => nat.nat))) =>
                 logic.eq nat.nat (nat.S (y m)) (nat.plus_body (nat.S x_366) (nat.S m)))
                (nat.sym_eq_plus_body_S
                   x_366
                   (y:(cts.Term
                         cts.box
                         (cts.prod'
                            cts.box
                            cts.box
                            cts.box
                            nat.nat
                            (x0:(cts.Term cts.box nat.nat) => nat.nat))) =>
                    logic.eq nat.nat (nat.S (y m)) (nat.plus_body (nat.S x_366) (nat.S m)))
                   (nat.sym_eq_plus_body_S
                      x_366
                      (y:(cts.Term
                            cts.box
                            (cts.prod'
                               cts.box
                               cts.box
                               cts.box
                               nat.nat
                               (x0:(cts.Term cts.box nat.nat) => nat.nat))) =>
                       logic.eq nat.nat (nat.S (nat.S (nat.plus x_366 m))) (y (nat.S m)))
                      (logic.rewrite_r
                         nat.nat
                         (nat.plus x_366 (nat.S m))
                         (__:(cts.Term cts.box nat.nat) =>
                          logic.eq nat.nat (nat.S __) (nat.S (nat.plus x_366 (nat.S m))))
                         (logic.rewrite_r
                            nat.nat
                            (nat.plus x_366 (nat.S (nat.S m)))
                            (__:(cts.Term cts.box nat.nat) =>
                             logic.eq nat.nat __ (nat.S (nat.plus x_366 (nat.S m))))
                            (logic.rewrite_r
                               nat.nat
                               (nat.plus x_366 (nat.S (nat.S m)))
                               (__:(cts.Term cts.box nat.nat) =>
                                logic.eq nat.nat (nat.plus x_366 (nat.S (nat.S m))) __)
                               (logic.refl nat.nat (nat.plus x_366 (nat.S (nat.S m))))
                               (nat.S (nat.plus x_366 (nat.S m)))
                               (_x_368 (nat.S m)))
                            (nat.S (nat.plus x_366 (nat.S m)))
                            (_x_368 (nat.S m)))
                         (nat.S (nat.plus x_366 m))
                         (_x_368 m))))))))
    n.

def commutative_plus :
  cts.Term cts.star (relations.commutative nat.nat nat.plus)
  :=
  n:(cts.Term cts.box nat.nat) =>
  nat.nat_ind
    (_x_365:(cts.Term cts.box nat.nat) =>
     cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       nat.nat
       (x:(cts.Term cts.box nat.nat) => logic.eq nat.nat (nat.plus _x_365 x) (nat.plus x _x_365)))
    (y:(cts.Term cts.box nat.nat) =>
     nat.sym_eq_plus
       nat.O
       (z:(cts.Term
             cts.box
             (cts.prod'
                cts.box
                cts.box
                cts.box
                nat.nat
                (x0:(cts.Term cts.box nat.nat) => nat.nat))) =>
        logic.eq nat.nat (z y) (nat.plus y nat.O))
       (nat.sym_eq_filter_nat_type_O
          (cts.prod cts.box cts.box cts.box cts.I nat.nat (x:(cts.Term cts.box nat.nat) => nat.nat))
          nat.plus_body
          (z:(cts.Term
                cts.box
                (cts.prod'
                   cts.box
                   cts.box
                   cts.box
                   nat.nat
                   (x:(cts.Term cts.box nat.nat) => nat.nat))) =>
           logic.eq nat.nat (z y) (nat.plus y nat.O))
          (nat.sym_eq_plus_body_O
             (z:(cts.Term
                   cts.box
                   (cts.prod'
                      cts.box
                      cts.box
                      cts.box
                      nat.nat
                      (x:(cts.Term cts.box nat.nat) => nat.nat))) =>
              logic.eq nat.nat (z y) (nat.plus y nat.O))
             (logic.rewrite_l
                nat.nat
                y
                (__:(cts.Term cts.box nat.nat) => logic.eq nat.nat y __)
                (logic.refl nat.nat y)
                (nat.plus y nat.O)
                (nat.plus_n_O y)))))
    (x_366:(cts.Term cts.box nat.nat) =>
     _x_368:(cts.Term
               cts.star
               (cts.prod'
                  cts.box
                  cts.star
                  cts.star
                  nat.nat
                  (x:(cts.Term cts.box nat.nat) =>
                   logic.eq nat.nat (nat.plus x_366 x) (nat.plus x x_366)))) =>
     y:(cts.Term cts.box nat.nat) =>
     nat.sym_eq_plus
       (nat.S x_366)
       (z:(cts.Term
             cts.box
             (cts.prod'
                cts.box
                cts.box
                cts.box
                nat.nat
                (x0:(cts.Term cts.box nat.nat) => nat.nat))) =>
        logic.eq nat.nat (z y) (nat.plus y (nat.S x_366)))
       (nat.sym_eq_filter_nat_type_S
          (cts.prod cts.box cts.box cts.box cts.I nat.nat (x:(cts.Term cts.box nat.nat) => nat.nat))
          nat.plus_body
          x_366
          (z:(cts.Term
                cts.box
                (cts.prod'
                   cts.box
                   cts.box
                   cts.box
                   nat.nat
                   (x:(cts.Term cts.box nat.nat) => nat.nat))) =>
           logic.eq nat.nat (z y) (nat.plus y (nat.S x_366)))
          (nat.sym_eq_plus_body_S
             x_366
             (z:(cts.Term
                   cts.box
                   (cts.prod'
                      cts.box
                      cts.box
                      cts.box
                      nat.nat
                      (x0:(cts.Term cts.box nat.nat) => nat.nat))) =>
              logic.eq nat.nat (z y) (nat.plus y (nat.S x_366)))
             (logic.rewrite_r
                nat.nat
                (nat.plus x_366 (nat.S y))
                (__:(cts.Term cts.box nat.nat) => logic.eq nat.nat __ (nat.plus y (nat.S x_366)))
                (logic.rewrite_r
                   nat.nat
                   (nat.plus y (nat.S x_366))
                   (__:(cts.Term cts.box nat.nat) =>
                    logic.eq nat.nat __ (nat.plus y (nat.S x_366)))
                   (logic.refl nat.nat (nat.plus y (nat.S x_366)))
                   (nat.plus x_366 (nat.S y))
                   (logic.rewrite_l
                      nat.nat
                      (nat.S (nat.plus x_366 y))
                      (__:(cts.Term cts.box nat.nat) =>
                       logic.eq nat.nat __ (nat.plus y (nat.S x_366)))
                      (logic.rewrite_r
                         nat.nat
                         (nat.plus y x_366)
                         (__:(cts.Term cts.box nat.nat) =>
                          logic.eq nat.nat (nat.S __) (nat.plus y (nat.S x_366)))
                         (nat.plus_n_Sm y x_366)
                         (nat.plus x_366 y)
                         (_x_368 y))
                      (nat.plus x_366 (nat.S y))
                      (nat.plus_n_Sm x_366 y)))
                (nat.S (nat.plus x_366 y))
                (nat.plus_n_Sm x_366 y)))))
    n.

def associative_plus :
  cts.Term cts.star (relations.associative nat.nat nat.plus)
  :=
  n:(cts.Term cts.box nat.nat) =>
  nat.nat_ind
    (_x_365:(cts.Term cts.box nat.nat) =>
     cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       nat.nat
       (x:(cts.Term cts.box nat.nat) =>
        cts.prod
          cts.box
          cts.star
          cts.star
          cts.I
          nat.nat
          (x0:(cts.Term cts.box nat.nat) =>
           logic.eq nat.nat (nat.plus (nat.plus _x_365 x) x0) (nat.plus _x_365 (nat.plus x x0)))))
    (y:(cts.Term cts.box nat.nat) =>
     z:(cts.Term cts.box nat.nat) =>
     nat.sym_eq_plus
       nat.O
       (x:(cts.Term
             cts.box
             (cts.prod'
                cts.box
                cts.box
                cts.box
                nat.nat
                (x0:(cts.Term cts.box nat.nat) => nat.nat))) =>
        logic.eq nat.nat (nat.plus (nat.plus nat.O y) z) (x (nat.plus y z)))
       (nat.sym_eq_plus
          nat.O
          (x:(cts.Term
                cts.box
                (cts.prod'
                   cts.box
                   cts.box
                   cts.box
                   nat.nat
                   (x0:(cts.Term cts.box nat.nat) => nat.nat))) =>
           logic.eq
             nat.nat
             (nat.plus (x y) z)
             (nat.filter_nat_type
                (cts.prod
                   cts.box
                   cts.box
                   cts.box
                   cts.I
                   nat.nat
                   (x0:(cts.Term cts.box nat.nat) => nat.nat))
                nat.plus_body
                nat.O
                (nat.plus y z)))
          (nat.sym_eq_filter_nat_type_O
             (cts.prod
                cts.box
                cts.box
                cts.box
                cts.I
                nat.nat
                (x:(cts.Term cts.box nat.nat) => nat.nat))
             nat.plus_body
             (x:(cts.Term
                   cts.box
                   (cts.prod'
                      cts.box
                      cts.box
                      cts.box
                      nat.nat
                      (x:(cts.Term cts.box nat.nat) => nat.nat))) =>
              logic.eq
                nat.nat
                (nat.plus (x y) z)
                (nat.filter_nat_type
                   (cts.prod
                      cts.box
                      cts.box
                      cts.box
                      cts.I
                      nat.nat
                      (x0:(cts.Term cts.box nat.nat) => nat.nat))
                   nat.plus_body
                   nat.O
                   (nat.plus y z)))
             (nat.sym_eq_filter_nat_type_O
                (cts.prod
                   cts.box
                   cts.box
                   cts.box
                   cts.I
                   nat.nat
                   (x:(cts.Term cts.box nat.nat) => nat.nat))
                nat.plus_body
                (x:(cts.Term
                      cts.box
                      (cts.prod'
                         cts.box
                         cts.box
                         cts.box
                         nat.nat
                         (x:(cts.Term cts.box nat.nat) => nat.nat))) =>
                 logic.eq nat.nat (nat.plus (nat.plus_body nat.O y) z) (x (nat.plus y z)))
                (nat.sym_eq_plus_body_O
                   (x:(cts.Term
                         cts.box
                         (cts.prod'
                            cts.box
                            cts.box
                            cts.box
                            nat.nat
                            (x:(cts.Term cts.box nat.nat) => nat.nat))) =>
                    logic.eq nat.nat (nat.plus (nat.plus_body nat.O y) z) (x (nat.plus y z)))
                   (nat.sym_eq_plus_body_O
                      (x:(cts.Term
                            cts.box
                            (cts.prod'
                               cts.box
                               cts.box
                               cts.box
                               nat.nat
                               (x:(cts.Term cts.box nat.nat) => nat.nat))) =>
                       logic.eq nat.nat (nat.plus (x y) z) (nat.plus y z))
                      (logic.refl nat.nat (nat.plus y z))))))))
    (x_366:(cts.Term cts.box nat.nat) =>
     _x_368:(cts.Term
               cts.star
               (cts.prod'
                  cts.box
                  cts.star
                  cts.star
                  nat.nat
                  (x:(cts.Term cts.box nat.nat) =>
                   cts.prod
                     cts.box
                     cts.star
                     cts.star
                     cts.I
                     nat.nat
                     (x0:(cts.Term cts.box nat.nat) =>
                      logic.eq
                        nat.nat
                        (nat.plus (nat.plus x_366 x) x0)
                        (nat.plus x_366 (nat.plus x x0)))))) =>
     y:(cts.Term cts.box nat.nat) =>
     z:(cts.Term cts.box nat.nat) =>
     nat.sym_eq_plus
       (nat.S x_366)
       (x:(cts.Term
             cts.box
             (cts.prod'
                cts.box
                cts.box
                cts.box
                nat.nat
                (x0:(cts.Term cts.box nat.nat) => nat.nat))) =>
        logic.eq nat.nat (nat.plus (nat.plus (nat.S x_366) y) z) (x (nat.plus y z)))
       (nat.sym_eq_plus
          (nat.S x_366)
          (x:(cts.Term
                cts.box
                (cts.prod'
                   cts.box
                   cts.box
                   cts.box
                   nat.nat
                   (x0:(cts.Term cts.box nat.nat) => nat.nat))) =>
           logic.eq
             nat.nat
             (nat.plus (x y) z)
             (nat.filter_nat_type
                (cts.prod
                   cts.box
                   cts.box
                   cts.box
                   cts.I
                   nat.nat
                   (x0:(cts.Term cts.box nat.nat) => nat.nat))
                nat.plus_body
                (nat.S x_366)
                (nat.plus y z)))
          (nat.sym_eq_filter_nat_type_S
             (cts.prod
                cts.box
                cts.box
                cts.box
                cts.I
                nat.nat
                (x:(cts.Term cts.box nat.nat) => nat.nat))
             nat.plus_body
             x_366
             (x:(cts.Term
                   cts.box
                   (cts.prod'
                      cts.box
                      cts.box
                      cts.box
                      nat.nat
                      (x:(cts.Term cts.box nat.nat) => nat.nat))) =>
              logic.eq
                nat.nat
                (nat.plus (x y) z)
                (nat.filter_nat_type
                   (cts.prod
                      cts.box
                      cts.box
                      cts.box
                      cts.I
                      nat.nat
                      (x0:(cts.Term cts.box nat.nat) => nat.nat))
                   nat.plus_body
                   (nat.S x_366)
                   (nat.plus y z)))
             (nat.sym_eq_filter_nat_type_S
                (cts.prod
                   cts.box
                   cts.box
                   cts.box
                   cts.I
                   nat.nat
                   (x:(cts.Term cts.box nat.nat) => nat.nat))
                nat.plus_body
                x_366
                (x:(cts.Term
                      cts.box
                      (cts.prod'
                         cts.box
                         cts.box
                         cts.box
                         nat.nat
                         (x:(cts.Term cts.box nat.nat) => nat.nat))) =>
                 logic.eq nat.nat (nat.plus (nat.plus_body (nat.S x_366) y) z) (x (nat.plus y z)))
                (nat.sym_eq_plus_body_S
                   x_366
                   (x:(cts.Term
                         cts.box
                         (cts.prod'
                            cts.box
                            cts.box
                            cts.box
                            nat.nat
                            (x0:(cts.Term cts.box nat.nat) => nat.nat))) =>
                    logic.eq
                      nat.nat
                      (nat.plus (nat.plus_body (nat.S x_366) y) z)
                      (x (nat.plus y z)))
                   (nat.sym_eq_plus_body_S
                      x_366
                      (x:(cts.Term
                            cts.box
                            (cts.prod'
                               cts.box
                               cts.box
                               cts.box
                               nat.nat
                               (x0:(cts.Term cts.box nat.nat) => nat.nat))) =>
                       logic.eq
                         nat.nat
                         (nat.plus (x y) z)
                         (nat.S (nat.plus x_366 (nat.plus y z))))
                      (nat.sym_eq_plus
                         (nat.S (nat.plus x_366 y))
                         (x:(cts.Term
                               cts.box
                               (cts.prod'
                                  cts.box
                                  cts.box
                                  cts.box
                                  nat.nat
                                  (x0:(cts.Term cts.box nat.nat) => nat.nat))) =>
                          logic.eq nat.nat (x z) (nat.S (nat.plus x_366 (nat.plus y z))))
                         (nat.sym_eq_filter_nat_type_S
                            (cts.prod
                               cts.box
                               cts.box
                               cts.box
                               cts.I
                               nat.nat
                               (x:(cts.Term cts.box nat.nat) => nat.nat))
                            nat.plus_body
                            (nat.plus x_366 y)
                            (x:(cts.Term
                                  cts.box
                                  (cts.prod'
                                     cts.box
                                     cts.box
                                     cts.box
                                     nat.nat
                                     (x:(cts.Term cts.box nat.nat) => nat.nat))) =>
                             logic.eq nat.nat (x z) (nat.S (nat.plus x_366 (nat.plus y z))))
                            (nat.sym_eq_plus_body_S
                               (nat.plus x_366 y)
                               (x:(cts.Term
                                     cts.box
                                     (cts.prod'
                                        cts.box
                                        cts.box
                                        cts.box
                                        nat.nat
                                        (x0:(cts.Term cts.box nat.nat) => nat.nat))) =>
                                logic.eq
                                  nat.nat
                                  (x z)
                                  (nat.S (nat.plus x_366 (nat.plus y z))))
                               (logic.rewrite_r
                                  nat.nat
                                  (nat.plus x_366 (nat.plus y z))
                                  (__:(cts.Term cts.box nat.nat) =>
                                   logic.eq
                                     nat.nat
                                     (nat.S __)
                                     (nat.S (nat.plus x_366 (nat.plus y z))))
                                  (logic.refl
                                     nat.nat
                                     (nat.S (nat.plus x_366 (nat.plus y z))))
                                  (nat.plus (nat.plus x_366 y) z)
                                  (_x_368 y z)))))))))))
    n.

def assoc_plus1 :
  cts.Term
    cts.star
    (cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       nat.nat
       (x:(cts.Term cts.box nat.nat) =>
        cts.prod
          cts.box
          cts.star
          cts.star
          cts.I
          nat.nat
          (x0:(cts.Term cts.box nat.nat) =>
           cts.prod
             cts.box
             cts.star
             cts.star
             cts.I
             nat.nat
             (x1:(cts.Term cts.box nat.nat) =>
              logic.eq nat.nat (nat.plus x1 (nat.plus x0 x)) (nat.plus (nat.plus x0 x1) x)))))
  :=
  a:(cts.Term cts.box nat.nat) =>
  b:(cts.Term cts.box nat.nat) =>
  c:(cts.Term cts.box nat.nat) =>
  logic.rewrite_r
    nat.nat
    (nat.plus a b)
    (__:(cts.Term cts.box nat.nat) => logic.eq nat.nat (nat.plus c __) (nat.plus (nat.plus b c) a))
    (logic.rewrite_r
       nat.nat
       (nat.plus a (nat.plus b c))
       (__:(cts.Term cts.box nat.nat) => logic.eq nat.nat (nat.plus c (nat.plus a b)) __)
       (logic.rewrite_r
          nat.nat
          (nat.plus a (nat.plus b c))
          (__:(cts.Term cts.box nat.nat) => logic.eq nat.nat __ (nat.plus a (nat.plus b c)))
          (logic.refl nat.nat (nat.plus a (nat.plus b c)))
          (nat.plus c (nat.plus a b))
          (logic.rewrite_l
             nat.nat
             (nat.plus (nat.plus a b) c)
             (__:(cts.Term cts.box nat.nat) => logic.eq nat.nat (nat.plus c (nat.plus a b)) __)
             (nat.commutative_plus c (nat.plus a b))
             (nat.plus a (nat.plus b c))
             (nat.associative_plus a b c)))
       (nat.plus (nat.plus b c) a)
       (nat.commutative_plus (nat.plus b c) a))
    (nat.plus b a)
    (nat.commutative_plus b a).

def injective_plus_r :
  cts.Term
    cts.star
    (cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       nat.nat
       (x:(cts.Term cts.box nat.nat) =>
        relations.injective_ nat.nat nat.nat (m:(cts.Term cts.box nat.nat) => nat.plus x m)))
  :=
  n:(cts.Term cts.box nat.nat) =>
  nat.nat_ind
    (_x_365:(cts.Term cts.box nat.nat) =>
     relations.injective_ nat.nat nat.nat (m:(cts.Term cts.box nat.nat) => nat.plus _x_365 m))
    (nat.sym_eq_plus
       nat.O
       (y:(cts.Term
             cts.box
             (cts.prod'
                cts.box
                cts.box
                cts.box
                nat.nat
                (x0:(cts.Term cts.box nat.nat) => nat.nat))) =>
        relations.injective_ nat.nat nat.nat (m:(cts.Term cts.box nat.nat) => y m))
       (nat.sym_eq_filter_nat_type_O
          (cts.prod cts.box cts.box cts.box cts.I nat.nat (x:(cts.Term cts.box nat.nat) => nat.nat))
          nat.plus_body
          (y:(cts.Term
                cts.box
                (cts.prod'
                   cts.box
                   cts.box
                   cts.box
                   nat.nat
                   (x:(cts.Term cts.box nat.nat) => nat.nat))) =>
           relations.injective_ nat.nat nat.nat (m:(cts.Term cts.box nat.nat) => y m))
          (nat.sym_eq_plus_body_O
             (y:(cts.Term
                   cts.box
                   (cts.prod'
                      cts.box
                      cts.box
                      cts.box
                      nat.nat
                      (x:(cts.Term cts.box nat.nat) => nat.nat))) =>
              relations.injective_ nat.nat nat.nat (m:(cts.Term cts.box nat.nat) => y m))
             (x:(cts.Term cts.box nat.nat) =>
              y:(cts.Term cts.box nat.nat) =>
              auto:(cts.Term
                      cts.star
                      (logic.eq
                         nat.nat
                         ((m:(cts.Term cts.box nat.nat) =>
                           (m0:(cts.Term cts.box nat.nat) => m0) m)
                            x)
                         ((m:(cts.Term cts.box nat.nat) =>
                           (m0:(cts.Term cts.box nat.nat) => m0) m)
                            y))) =>
              logic.rewrite_l
                nat.nat
                x
                (__:(cts.Term cts.box nat.nat) => logic.eq nat.nat x __)
                (logic.refl nat.nat x)
                y
                auto))))
    (x_366:(cts.Term cts.box nat.nat) =>
     _x_368:(cts.Term
               cts.star
               (cts.prod'
                  cts.box
                  cts.star
                  cts.star
                  nat.nat
                  (x:(cts.Term cts.box nat.nat) =>
                   cts.prod
                     cts.box
                     cts.star
                     cts.star
                     cts.I
                     nat.nat
                     (x0:(cts.Term cts.box nat.nat) =>
                      cts.prod
                        cts.star
                        cts.star
                        cts.star
                        cts.I
                        (logic.eq
                           nat.nat
                           ((m:(cts.Term cts.box nat.nat) => nat.plus x_366 m) x)
                           ((m:(cts.Term cts.box nat.nat) => nat.plus x_366 m) x0))
                        (x1:(cts.Term
                               cts.star
                               (logic.eq
                                  nat.nat
                                  ((m:(cts.Term cts.box nat.nat) => nat.plus x_366 m) x)
                                  ((m:(cts.Term cts.box nat.nat) => nat.plus x_366 m) x0))) =>
                         logic.eq nat.nat x x0))))) =>
     nat.sym_eq_plus
       (nat.S x_366)
       (y:(cts.Term
             cts.box
             (cts.prod'
                cts.box
                cts.box
                cts.box
                nat.nat
                (x0:(cts.Term cts.box nat.nat) => nat.nat))) =>
        relations.injective_ nat.nat nat.nat (m:(cts.Term cts.box nat.nat) => y m))
       (nat.sym_eq_filter_nat_type_S
          (cts.prod cts.box cts.box cts.box cts.I nat.nat (x:(cts.Term cts.box nat.nat) => nat.nat))
          nat.plus_body
          x_366
          (y:(cts.Term
                cts.box
                (cts.prod'
                   cts.box
                   cts.box
                   cts.box
                   nat.nat
                   (x:(cts.Term cts.box nat.nat) => nat.nat))) =>
           relations.injective_ nat.nat nat.nat (m:(cts.Term cts.box nat.nat) => y m))
          (nat.sym_eq_plus_body_S
             x_366
             (y:(cts.Term
                   cts.box
                   (cts.prod'
                      cts.box
                      cts.box
                      cts.box
                      nat.nat
                      (x0:(cts.Term cts.box nat.nat) => nat.nat))) =>
              relations.injective_ nat.nat nat.nat (m:(cts.Term cts.box nat.nat) => y m))
             (x:(cts.Term cts.box nat.nat) =>
              y:(cts.Term cts.box nat.nat) =>
              auto:(cts.Term
                      cts.star
                      (logic.eq
                         nat.nat
                         ((m:(cts.Term cts.box nat.nat) =>
                           (m0:(cts.Term cts.box nat.nat) => nat.S (nat.plus x_366 m0)) m)
                            x)
                         ((m:(cts.Term cts.box nat.nat) =>
                           (m0:(cts.Term cts.box nat.nat) => nat.S (nat.plus x_366 m0)) m)
                            y))) =>
              _x_368
                x
                y
                (nat.injective_S
                   (nat.plus x_366 x)
                   (nat.plus x_366 y)
                   (logic.rewrite_r
                      nat.nat
                      (nat.plus x_366 (nat.S x))
                      (__:(cts.Term cts.box nat.nat) =>
                       logic.eq nat.nat __ (nat.S (nat.plus x_366 y)))
                      (logic.rewrite_r
                         nat.nat
                         (nat.plus x_366 (nat.S y))
                         (__:(cts.Term cts.box nat.nat) =>
                          logic.eq nat.nat (nat.plus x_366 (nat.S x)) __)
                         (logic.rewrite_l
                            nat.nat
                            (nat.plus x_366 (nat.S x))
                            (__:(cts.Term cts.box nat.nat) =>
                             logic.eq nat.nat (nat.plus x_366 (nat.S x)) __)
                            (logic.refl nat.nat (nat.plus x_366 (nat.S x)))
                            (nat.plus x_366 (nat.S y))
                            (logic.rewrite_l
                               nat.nat
                               (nat.S (nat.plus x_366 y))
                               (__:(cts.Term cts.box nat.nat) =>
                                logic.eq nat.nat (nat.plus x_366 (nat.S x)) __)
                               (logic.rewrite_l
                                  nat.nat
                                  (nat.S (nat.plus x_366 x))
                                  (__:(cts.Term cts.box nat.nat) =>
                                   logic.eq nat.nat __ (nat.S (nat.plus x_366 y)))
                                  auto
                                  (nat.plus x_366 (nat.S x))
                                  (nat.plus_n_Sm x_366 x))
                               (nat.plus x_366 (nat.S y))
                               (nat.plus_n_Sm x_366 y)))
                         (nat.S (nat.plus x_366 y))
                         (nat.plus_n_Sm x_366 y))
                      (nat.S (nat.plus x_366 x))
                      (nat.plus_n_Sm x_366 x)))))))
    n.

def times_Sn_m :
  cts.Term
    cts.star
    (cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       nat.nat
       (x:(cts.Term cts.box nat.nat) =>
        cts.prod
          cts.box
          cts.star
          cts.star
          cts.I
          nat.nat
          (x0:(cts.Term cts.box nat.nat) =>
           logic.eq nat.nat (nat.plus x0 (nat.times x x0)) (nat.times (nat.S x) x0))))
  :=
  n:(cts.Term cts.box nat.nat) =>
  m:(cts.Term cts.box nat.nat) =>
  nat.sym_eq_times
    (nat.S n)
    (y:(cts.Term
          cts.box
          (cts.prod' cts.box cts.box cts.box nat.nat (x0:(cts.Term cts.box nat.nat) => nat.nat))) =>
     logic.eq nat.nat (nat.plus m (nat.times n m)) (y m))
    (nat.sym_eq_filter_nat_type_S
       (cts.prod cts.box cts.box cts.box cts.I nat.nat (x:(cts.Term cts.box nat.nat) => nat.nat))
       nat.times_body
       n
       (y:(cts.Term
             cts.box
             (cts.prod'
                cts.box
                cts.box
                cts.box
                nat.nat
                (x:(cts.Term cts.box nat.nat) => nat.nat))) =>
        logic.eq nat.nat (nat.plus m (nat.times n m)) (y m))
       (nat.sym_eq_times_body_S
          n
          (y:(cts.Term
                cts.box
                (cts.prod'
                   cts.box
                   cts.box
                   cts.box
                   nat.nat
                   (x0:(cts.Term cts.box nat.nat) => nat.nat))) =>
           logic.eq nat.nat (nat.plus m (nat.times n m)) (y m))
          (logic.refl nat.nat (nat.plus m (nat.times n m))))).

def times_O_n :
  cts.Term
    cts.star
    (cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       nat.nat
       (x:(cts.Term cts.box nat.nat) => logic.eq nat.nat nat.O (nat.times nat.O x)))
  :=
  n:(cts.Term cts.box nat.nat) =>
  nat.sym_eq_times
    nat.O
    (y:(cts.Term
          cts.box
          (cts.prod' cts.box cts.box cts.box nat.nat (x0:(cts.Term cts.box nat.nat) => nat.nat))) =>
     logic.eq nat.nat nat.O (y n))
    (nat.sym_eq_filter_nat_type_O
       (cts.prod cts.box cts.box cts.box cts.I nat.nat (x:(cts.Term cts.box nat.nat) => nat.nat))
       nat.times_body
       (y:(cts.Term
             cts.box
             (cts.prod'
                cts.box
                cts.box
                cts.box
                nat.nat
                (x:(cts.Term cts.box nat.nat) => nat.nat))) =>
        logic.eq nat.nat nat.O (y n))
       (nat.sym_eq_times_body_O
          (y:(cts.Term
                cts.box
                (cts.prod'
                   cts.box
                   cts.box
                   cts.box
                   nat.nat
                   (x:(cts.Term cts.box nat.nat) => nat.nat))) =>
           logic.eq nat.nat nat.O (y n))
          (logic.refl nat.nat nat.O))).

def times_n_O :
  cts.Term
    cts.star
    (cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       nat.nat
       (x:(cts.Term cts.box nat.nat) => logic.eq nat.nat nat.O (nat.times x nat.O)))
  :=
  n:(cts.Term cts.box nat.nat) =>
  nat.nat_ind
    (_x_365:(cts.Term cts.box nat.nat) => logic.eq nat.nat nat.O (nat.times _x_365 nat.O))
    (logic.rewrite_l
       nat.nat
       nat.O
       (__:(cts.Term cts.box nat.nat) => logic.eq nat.nat nat.O __)
       (logic.refl nat.nat nat.O)
       (nat.times nat.O nat.O)
       (nat.times_O_n nat.O))
    (x_366:(cts.Term cts.box nat.nat) =>
     _x_368:(cts.Term cts.star (logic.eq nat.nat nat.O (nat.times x_366 nat.O))) =>
     logic.rewrite_l
       nat.nat
       (nat.plus nat.O (nat.times x_366 nat.O))
       (__:(cts.Term cts.box nat.nat) => logic.eq nat.nat nat.O __)
       (logic.rewrite_l
          nat.nat
          nat.O
          (__:(cts.Term cts.box nat.nat) => logic.eq nat.nat nat.O (nat.plus nat.O __))
          (logic.rewrite_l
             nat.nat
             nat.O
             (__:(cts.Term cts.box nat.nat) => logic.eq nat.nat nat.O __)
             (logic.refl nat.nat nat.O)
             (nat.plus nat.O nat.O)
             (nat.plus_O_n nat.O))
          (nat.times x_366 nat.O)
          _x_368)
       (nat.times (nat.S x_366) nat.O)
       (nat.times_Sn_m x_366 nat.O))
    n.

def times_n_Sm :
  cts.Term
    cts.star
    (cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       nat.nat
       (x:(cts.Term cts.box nat.nat) =>
        cts.prod
          cts.box
          cts.star
          cts.star
          cts.I
          nat.nat
          (x0:(cts.Term cts.box nat.nat) =>
           logic.eq nat.nat (nat.plus x (nat.times x x0)) (nat.times x (nat.S x0)))))
  :=
  n:(cts.Term cts.box nat.nat) =>
  nat.nat_ind
    (_x_365:(cts.Term cts.box nat.nat) =>
     cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       nat.nat
       (x:(cts.Term cts.box nat.nat) =>
        logic.eq nat.nat (nat.plus _x_365 (nat.times _x_365 x)) (nat.times _x_365 (nat.S x))))
    (nat.sym_eq_times
       nat.O
       (y:(cts.Term
             cts.box
             (cts.prod'
                cts.box
                cts.box
                cts.box
                nat.nat
                (x0:(cts.Term cts.box nat.nat) => nat.nat))) =>
        cts.prod
          cts.box
          cts.star
          cts.star
          cts.I
          nat.nat
          (x:(cts.Term cts.box nat.nat) =>
           logic.eq nat.nat (nat.plus nat.O (nat.times nat.O x)) (y (nat.S x))))
       (nat.sym_eq_times
          nat.O
          (y:(cts.Term
                cts.box
                (cts.prod'
                   cts.box
                   cts.box
                   cts.box
                   nat.nat
                   (x0:(cts.Term cts.box nat.nat) => nat.nat))) =>
           cts.prod
             cts.box
             cts.star
             cts.star
             cts.I
             nat.nat
             (x:(cts.Term cts.box nat.nat) =>
              logic.eq
                nat.nat
                (nat.plus nat.O (y x))
                (nat.filter_nat_type
                   (cts.prod
                      cts.box
                      cts.box
                      cts.box
                      cts.I
                      nat.nat
                      (x0:(cts.Term cts.box nat.nat) => nat.nat))
                   nat.times_body
                   nat.O
                   (nat.S x))))
          (nat.sym_eq_filter_nat_type_O
             (cts.prod
                cts.box
                cts.box
                cts.box
                cts.I
                nat.nat
                (x:(cts.Term cts.box nat.nat) => nat.nat))
             nat.times_body
             (y:(cts.Term
                   cts.box
                   (cts.prod'
                      cts.box
                      cts.box
                      cts.box
                      nat.nat
                      (x:(cts.Term cts.box nat.nat) => nat.nat))) =>
              cts.prod
                cts.box
                cts.star
                cts.star
                cts.I
                nat.nat
                (x:(cts.Term cts.box nat.nat) =>
                 logic.eq
                   nat.nat
                   (nat.plus nat.O (y x))
                   (nat.filter_nat_type
                      (cts.prod
                         cts.box
                         cts.box
                         cts.box
                         cts.I
                         nat.nat
                         (x0:(cts.Term cts.box nat.nat) => nat.nat))
                      nat.times_body
                      nat.O
                      (nat.S x))))
             (nat.sym_eq_filter_nat_type_O
                (cts.prod
                   cts.box
                   cts.box
                   cts.box
                   cts.I
                   nat.nat
                   (x:(cts.Term cts.box nat.nat) => nat.nat))
                nat.times_body
                (y:(cts.Term
                      cts.box
                      (cts.prod'
                         cts.box
                         cts.box
                         cts.box
                         nat.nat
                         (x:(cts.Term cts.box nat.nat) => nat.nat))) =>
                 cts.prod
                   cts.box
                   cts.star
                   cts.star
                   cts.I
                   nat.nat
                   (x:(cts.Term cts.box nat.nat) =>
                    logic.eq nat.nat (nat.plus nat.O (nat.times_body nat.O x)) (y (nat.S x))))
                (nat.sym_eq_times_body_O
                   (y:(cts.Term
                         cts.box
                         (cts.prod'
                            cts.box
                            cts.box
                            cts.box
                            nat.nat
                            (x:(cts.Term cts.box nat.nat) => nat.nat))) =>
                    cts.prod
                      cts.box
                      cts.star
                      cts.star
                      cts.I
                      nat.nat
                      (x:(cts.Term cts.box nat.nat) =>
                       logic.eq nat.nat (nat.plus nat.O (nat.times_body nat.O x)) (y (nat.S x))))
                   (nat.sym_eq_times_body_O
                      (y:(cts.Term
                            cts.box
                            (cts.prod'
                               cts.box
                               cts.box
                               cts.box
                               nat.nat
                               (x:(cts.Term cts.box nat.nat) => nat.nat))) =>
                       cts.prod
                         cts.box
                         cts.star
                         cts.star
                         cts.I
                         nat.nat
                         (x:(cts.Term cts.box nat.nat) =>
                          logic.eq nat.nat (nat.plus nat.O (y x)) nat.O))
                      (nat.sym_eq_plus
                         nat.O
                         (y:(cts.Term
                               cts.box
                               (cts.prod'
                                  cts.box
                                  cts.box
                                  cts.box
                                  nat.nat
                                  (x0:(cts.Term cts.box nat.nat) => nat.nat))) =>
                          cts.prod
                            cts.box
                            cts.star
                            cts.star
                            cts.I
                            nat.nat
                            (x:(cts.Term cts.box nat.nat) => logic.eq nat.nat (y nat.O) nat.O))
                         (nat.sym_eq_filter_nat_type_O
                            (cts.prod
                               cts.box
                               cts.box
                               cts.box
                               cts.I
                               nat.nat
                               (x:(cts.Term cts.box nat.nat) => nat.nat))
                            nat.plus_body
                            (y:(cts.Term
                                  cts.box
                                  (cts.prod'
                                     cts.box
                                     cts.box
                                     cts.box
                                     nat.nat
                                     (x:(cts.Term cts.box nat.nat) => nat.nat))) =>
                             cts.prod
                               cts.box
                               cts.star
                               cts.star
                               cts.I
                               nat.nat
                               (x:(cts.Term cts.box nat.nat) =>
                                logic.eq nat.nat (y nat.O) nat.O))
                            (nat.sym_eq_plus_body_O
                               (y:(cts.Term
                                     cts.box
                                     (cts.prod'
                                        cts.box
                                        cts.box
                                        cts.box
                                        nat.nat
                                        (x:(cts.Term cts.box nat.nat) => nat.nat))) =>
                                cts.prod
                                  cts.box
                                  cts.star
                                  cts.star
                                  cts.I
                                  nat.nat
                                  (x:(cts.Term cts.box nat.nat) =>
                                   logic.eq nat.nat (y nat.O) nat.O))
                               (_m:(cts.Term cts.box nat.nat) => logic.refl nat.nat nat.O))))))))))
    (x_366:(cts.Term cts.box nat.nat) =>
     _x_368:(cts.Term
               cts.star
               (cts.prod'
                  cts.box
                  cts.star
                  cts.star
                  nat.nat
                  (x:(cts.Term cts.box nat.nat) =>
                   logic.eq
                     nat.nat
                     (nat.plus x_366 (nat.times x_366 x))
                     (nat.times x_366 (nat.S x))))) =>
     m:(cts.Term cts.box nat.nat) =>
     nat.sym_eq_times
       (nat.S x_366)
       (y:(cts.Term
             cts.box
             (cts.prod'
                cts.box
                cts.box
                cts.box
                nat.nat
                (x0:(cts.Term cts.box nat.nat) => nat.nat))) =>
        logic.eq nat.nat (nat.plus (nat.S x_366) (nat.times (nat.S x_366) m)) (y (nat.S m)))
       (nat.sym_eq_times
          (nat.S x_366)
          (y:(cts.Term
                cts.box
                (cts.prod'
                   cts.box
                   cts.box
                   cts.box
                   nat.nat
                   (x0:(cts.Term cts.box nat.nat) => nat.nat))) =>
           logic.eq
             nat.nat
             (nat.plus (nat.S x_366) (y m))
             (nat.filter_nat_type
                (cts.prod
                   cts.box
                   cts.box
                   cts.box
                   cts.I
                   nat.nat
                   (x:(cts.Term cts.box nat.nat) => nat.nat))
                nat.times_body
                (nat.S x_366)
                (nat.S m)))
          (nat.sym_eq_filter_nat_type_S
             (cts.prod
                cts.box
                cts.box
                cts.box
                cts.I
                nat.nat
                (x:(cts.Term cts.box nat.nat) => nat.nat))
             nat.times_body
             x_366
             (y:(cts.Term
                   cts.box
                   (cts.prod'
                      cts.box
                      cts.box
                      cts.box
                      nat.nat
                      (x:(cts.Term cts.box nat.nat) => nat.nat))) =>
              logic.eq
                nat.nat
                (nat.plus (nat.S x_366) (y m))
                (nat.filter_nat_type
                   (cts.prod
                      cts.box
                      cts.box
                      cts.box
                      cts.I
                      nat.nat
                      (x:(cts.Term cts.box nat.nat) => nat.nat))
                   nat.times_body
                   (nat.S x_366)
                   (nat.S m)))
             (nat.sym_eq_filter_nat_type_S
                (cts.prod
                   cts.box
                   cts.box
                   cts.box
                   cts.I
                   nat.nat
                   (x:(cts.Term cts.box nat.nat) => nat.nat))
                nat.times_body
                x_366
                (y:(cts.Term
                      cts.box
                      (cts.prod'
                         cts.box
                         cts.box
                         cts.box
                         nat.nat
                         (x:(cts.Term cts.box nat.nat) => nat.nat))) =>
                 logic.eq
                   nat.nat
                   (nat.plus (nat.S x_366) (nat.times_body (nat.S x_366) m))
                   (y (nat.S m)))
                (nat.sym_eq_times_body_S
                   x_366
                   (y:(cts.Term
                         cts.box
                         (cts.prod'
                            cts.box
                            cts.box
                            cts.box
                            nat.nat
                            (x0:(cts.Term cts.box nat.nat) => nat.nat))) =>
                    logic.eq
                      nat.nat
                      (nat.plus (nat.S x_366) (nat.times_body (nat.S x_366) m))
                      (y (nat.S m)))
                   (nat.sym_eq_times_body_S
                      x_366
                      (y:(cts.Term
                            cts.box
                            (cts.prod'
                               cts.box
                               cts.box
                               cts.box
                               nat.nat
                               (x0:(cts.Term cts.box nat.nat) => nat.nat))) =>
                       logic.eq
                         nat.nat
                         (nat.plus (nat.S x_366) (y m))
                         (nat.plus (nat.S m) (nat.times x_366 (nat.S m))))
                      (nat.sym_eq_plus
                         (nat.S x_366)
                         (y:(cts.Term
                               cts.box
                               (cts.prod'
                                  cts.box
                                  cts.box
                                  cts.box
                                  nat.nat
                                  (x0:(cts.Term cts.box nat.nat) => nat.nat))) =>
                          logic.eq
                            nat.nat
                            (y (nat.plus m (nat.times x_366 m)))
                            (nat.plus (nat.S m) (nat.times x_366 (nat.S m))))
                         (nat.sym_eq_filter_nat_type_S
                            (cts.prod
                               cts.box
                               cts.box
                               cts.box
                               cts.I
                               nat.nat
                               (x:(cts.Term cts.box nat.nat) => nat.nat))
                            nat.plus_body
                            x_366
                            (y:(cts.Term
                                  cts.box
                                  (cts.prod'
                                     cts.box
                                     cts.box
                                     cts.box
                                     nat.nat
                                     (x:(cts.Term cts.box nat.nat) => nat.nat))) =>
                             logic.eq
                               nat.nat
                               (y (nat.plus m (nat.times x_366 m)))
                               (nat.plus (nat.S m) (nat.times x_366 (nat.S m))))
                            (nat.sym_eq_plus_body_S
                               x_366
                               (y:(cts.Term
                                     cts.box
                                     (cts.prod'
                                        cts.box
                                        cts.box
                                        cts.box
                                        nat.nat
                                        (x0:(cts.Term cts.box nat.nat) => nat.nat))) =>
                                logic.eq
                                  nat.nat
                                  (y (nat.plus m (nat.times x_366 m)))
                                  (nat.plus (nat.S m) (nat.times x_366 (nat.S m))))
                               (nat.sym_eq_plus
                                  (nat.S m)
                                  (y:(cts.Term
                                        cts.box
                                        (cts.prod'
                                           cts.box
                                           cts.box
                                           cts.box
                                           nat.nat
                                           (x0:(cts.Term cts.box nat.nat) => nat.nat))) =>
                                   logic.eq
                                     nat.nat
                                     (nat.S
                                        (nat.plus x_366 (nat.plus m (nat.times x_366 m))))
                                     (y (nat.times x_366 (nat.S m))))
                                  (nat.sym_eq_filter_nat_type_S
                                     (cts.prod
                                        cts.box
                                        cts.box
                                        cts.box
                                        cts.I
                                        nat.nat
                                        (x:(cts.Term cts.box nat.nat) => nat.nat))
                                     nat.plus_body
                                     m
                                     (y:(cts.Term
                                           cts.box
                                           (cts.prod'
                                              cts.box
                                              cts.box
                                              cts.box
                                              nat.nat
                                              (x:(cts.Term cts.box nat.nat) =>
                                               nat.nat))) =>
                                      logic.eq
                                        nat.nat
                                        (nat.S
                                           (nat.plus
                                              x_366
                                              (nat.plus m (nat.times x_366 m))))
                                        (y (nat.times x_366 (nat.S m))))
                                     (nat.sym_eq_plus_body_S
                                        m
                                        (y:(cts.Term
                                              cts.box
                                              (cts.prod'
                                                 cts.box
                                                 cts.box
                                                 cts.box
                                                 nat.nat
                                                 (x0:(cts.Term cts.box nat.nat) =>
                                                  nat.nat))) =>
                                         logic.eq
                                           nat.nat
                                           (nat.S
                                              (nat.plus
                                                 x_366
                                                 (nat.plus m (nat.times x_366 m))))
                                           (y (nat.times x_366 (nat.S m))))
                                        (logic.rewrite_r
                                           nat.nat
                                           (nat.plus
                                              x_366
                                              (nat.S (nat.plus m (nat.times x_366 m))))
                                           (__:(cts.Term cts.box nat.nat) =>
                                            logic.eq
                                              nat.nat
                                              __
                                              (nat.S
                                                 (nat.plus
                                                    m
                                                    (nat.times x_366 (nat.S m)))))
                                           (logic.rewrite_r
                                              nat.nat
                                              (nat.plus m (nat.S (nat.times x_366 m)))
                                              (__:(cts.Term cts.box nat.nat) =>
                                               logic.eq
                                                 nat.nat
                                                 (nat.plus x_366 __)
                                                 (nat.S
                                                    (nat.plus
                                                       m
                                                       (nat.times x_366 (nat.S m)))))
                                              (logic.rewrite_l
                                                 nat.nat
                                                 (nat.plus x_366 (nat.times x_366 m))
                                                 (__:(cts.Term cts.box nat.nat) =>
                                                  logic.eq
                                                    nat.nat
                                                    (nat.plus
                                                       x_366
                                                       (nat.plus
                                                          m
                                                          (nat.S
                                                             (nat.times x_366 m))))
                                                    (nat.S (nat.plus m __)))
                                                 (logic.rewrite_r
                                                    nat.nat
                                                    (nat.plus
                                                       x_366
                                                       (nat.plus
                                                          m
                                                          (nat.times x_366 m)))
                                                    (__:(cts.Term cts.box nat.nat) =>
                                                     logic.eq
                                                       nat.nat
                                                       (nat.plus
                                                          x_366
                                                          (nat.plus
                                                             m
                                                             (nat.S
                                                                (nat.times
                                                                   x_366
                                                                   m))))
                                                       (nat.S __))
                                                    (logic.rewrite_r
                                                       nat.nat
                                                       (nat.plus
                                                          x_366
                                                          (nat.S
                                                             (nat.plus
                                                                m
                                                                (nat.times
                                                                   x_366
                                                                   m))))
                                                       (__:(cts.Term
                                                              cts.box
                                                              nat.nat) =>
                                                        logic.eq
                                                          nat.nat
                                                          (nat.plus
                                                             x_366
                                                             (nat.plus
                                                                m
                                                                (nat.S
                                                                   (nat.times
                                                                    x_366
                                                                    m))))
                                                          __)
                                                       (logic.rewrite_r
                                                          nat.nat
                                                          (nat.plus
                                                             m
                                                             (nat.S
                                                                (nat.times
                                                                   x_366
                                                                   m)))
                                                          (__:(cts.Term
                                                                 cts.box
                                                                 nat.nat) =>
                                                           logic.eq
                                                             nat.nat
                                                             (nat.plus
                                                                x_366
                                                                (nat.plus
                                                                   m
                                                                   (nat.S
                                                                    (nat.times
                                                                    x_366
                                                                    m))))
                                                             (nat.plus x_366 __))
                                                          (logic.refl
                                                             nat.nat
                                                             (nat.plus
                                                                x_366
                                                                (nat.plus
                                                                   m
                                                                   (nat.S
                                                                    (nat.times
                                                                    x_366
                                                                    m)))))
                                                          (nat.S
                                                             (nat.plus
                                                                m
                                                                (nat.times
                                                                   x_366
                                                                   m)))
                                                          (nat.plus_n_Sm
                                                             m
                                                             (nat.times x_366 m)))
                                                       (nat.S
                                                          (nat.plus
                                                             x_366
                                                             (nat.plus
                                                                m
                                                                (nat.times
                                                                   x_366
                                                                   m))))
                                                       (nat.plus_n_Sm
                                                          x_366
                                                          (nat.plus
                                                             m
                                                             (nat.times x_366 m))))
                                                    (nat.plus
                                                       m
                                                       (nat.plus
                                                          x_366
                                                          (nat.times x_366 m)))
                                                    (logic.rewrite_l
                                                       nat.nat
                                                       (nat.plus
                                                          (nat.plus x_366 m)
                                                          (nat.times x_366 m))
                                                       (__:(cts.Term
                                                              cts.box
                                                              nat.nat) =>
                                                        logic.eq
                                                          nat.nat
                                                          (nat.plus
                                                             m
                                                             (nat.plus
                                                                x_366
                                                                (nat.times
                                                                   x_366
                                                                   m)))
                                                          __)
                                                       (nat.assoc_plus1
                                                          (nat.times x_366 m)
                                                          x_366
                                                          m)
                                                       (nat.plus
                                                          x_366
                                                          (nat.plus
                                                             m
                                                             (nat.times x_366 m)))
                                                       (nat.associative_plus
                                                          x_366
                                                          m
                                                          (nat.times x_366 m))))
                                                 (nat.times x_366 (nat.S m))
                                                 (_x_368 m))
                                              (nat.S (nat.plus m (nat.times x_366 m)))
                                              (nat.plus_n_Sm m (nat.times x_366 m)))
                                           (nat.S
                                              (nat.plus
                                                 x_366
                                                 (nat.plus m (nat.times x_366 m))))
                                           (nat.plus_n_Sm
                                              x_366
                                              (nat.plus m (nat.times x_366 m))))))))))))))))
    n.

def commutative_times :
  cts.Term cts.star (relations.commutative nat.nat nat.times)
  :=
  n:(cts.Term cts.box nat.nat) =>
  nat.nat_ind
    (_x_365:(cts.Term cts.box nat.nat) =>
     cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       nat.nat
       (x:(cts.Term cts.box nat.nat) => logic.eq nat.nat (nat.times _x_365 x) (nat.times x _x_365)))
    (nat.sym_eq_times
       nat.O
       (y:(cts.Term
             cts.box
             (cts.prod'
                cts.box
                cts.box
                cts.box
                nat.nat
                (x0:(cts.Term cts.box nat.nat) => nat.nat))) =>
        cts.prod
          cts.box
          cts.star
          cts.star
          cts.I
          nat.nat
          (x:(cts.Term cts.box nat.nat) => logic.eq nat.nat (y x) (nat.times x nat.O)))
       (nat.sym_eq_filter_nat_type_O
          (cts.prod cts.box cts.box cts.box cts.I nat.nat (x:(cts.Term cts.box nat.nat) => nat.nat))
          nat.times_body
          (y:(cts.Term
                cts.box
                (cts.prod'
                   cts.box
                   cts.box
                   cts.box
                   nat.nat
                   (x:(cts.Term cts.box nat.nat) => nat.nat))) =>
           cts.prod
             cts.box
             cts.star
             cts.star
             cts.I
             nat.nat
             (x:(cts.Term cts.box nat.nat) => logic.eq nat.nat (y x) (nat.times x nat.O)))
          (nat.sym_eq_times_body_O
             (y:(cts.Term
                   cts.box
                   (cts.prod'
                      cts.box
                      cts.box
                      cts.box
                      nat.nat
                      (x:(cts.Term cts.box nat.nat) => nat.nat))) =>
              cts.prod
                cts.box
                cts.star
                cts.star
                cts.I
                nat.nat
                (x:(cts.Term cts.box nat.nat) => logic.eq nat.nat (y x) (nat.times x nat.O)))
             (y:(cts.Term cts.box nat.nat) =>
              logic.rewrite_l
                nat.nat
                nat.O
                (__:(cts.Term cts.box nat.nat) => logic.eq nat.nat nat.O __)
                (logic.refl nat.nat nat.O)
                (nat.times y nat.O)
                (nat.times_n_O y)))))
    (x_366:(cts.Term cts.box nat.nat) =>
     _x_368:(cts.Term
               cts.star
               (cts.prod'
                  cts.box
                  cts.star
                  cts.star
                  nat.nat
                  (x:(cts.Term cts.box nat.nat) =>
                   logic.eq nat.nat (nat.times x_366 x) (nat.times x x_366)))) =>
     y:(cts.Term cts.box nat.nat) =>
     nat.sym_eq_times
       (nat.S x_366)
       (z:(cts.Term
             cts.box
             (cts.prod'
                cts.box
                cts.box
                cts.box
                nat.nat
                (x0:(cts.Term cts.box nat.nat) => nat.nat))) =>
        logic.eq nat.nat (z y) (nat.times y (nat.S x_366)))
       (nat.sym_eq_filter_nat_type_S
          (cts.prod cts.box cts.box cts.box cts.I nat.nat (x:(cts.Term cts.box nat.nat) => nat.nat))
          nat.times_body
          x_366
          (z:(cts.Term
                cts.box
                (cts.prod'
                   cts.box
                   cts.box
                   cts.box
                   nat.nat
                   (x:(cts.Term cts.box nat.nat) => nat.nat))) =>
           logic.eq nat.nat (z y) (nat.times y (nat.S x_366)))
          (nat.sym_eq_times_body_S
             x_366
             (z:(cts.Term
                   cts.box
                   (cts.prod'
                      cts.box
                      cts.box
                      cts.box
                      nat.nat
                      (x0:(cts.Term cts.box nat.nat) => nat.nat))) =>
              logic.eq nat.nat (z y) (nat.times y (nat.S x_366)))
             (logic.rewrite_l
                nat.nat
                (nat.plus y (nat.times y x_366))
                (__:(cts.Term cts.box nat.nat) =>
                 logic.eq nat.nat (nat.plus y (nat.times x_366 y)) __)
                (logic.rewrite_l
                   nat.nat
                   (nat.times x_366 y)
                   (__:(cts.Term cts.box nat.nat) =>
                    logic.eq nat.nat (nat.plus y (nat.times x_366 y)) (nat.plus y __))
                   (logic.refl nat.nat (nat.plus y (nat.times x_366 y)))
                   (nat.times y x_366)
                   (_x_368 y))
                (nat.times y (nat.S x_366))
                (nat.times_n_Sm y x_366)))))
    n.

def distributive_times_plus :
  cts.Term cts.star (relations.distributive nat.nat nat.times nat.plus)
  :=
  n:(cts.Term cts.box nat.nat) =>
  nat.nat_ind
    (_x_365:(cts.Term cts.box nat.nat) =>
     cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       nat.nat
       (x:(cts.Term cts.box nat.nat) =>
        cts.prod
          cts.box
          cts.star
          cts.star
          cts.I
          nat.nat
          (x0:(cts.Term cts.box nat.nat) =>
           logic.eq
             nat.nat
             (nat.times _x_365 (nat.plus x x0))
             (nat.plus (nat.times _x_365 x) (nat.times _x_365 x0)))))
    (nat.sym_eq_times
       nat.O
       (x:(cts.Term
             cts.box
             (cts.prod'
                cts.box
                cts.box
                cts.box
                nat.nat
                (x0:(cts.Term cts.box nat.nat) => nat.nat))) =>
        cts.prod
          cts.box
          cts.star
          cts.star
          cts.I
          nat.nat
          (x0:(cts.Term cts.box nat.nat) =>
           cts.prod
             cts.box
             cts.star
             cts.star
             cts.I
             nat.nat
             (x1:(cts.Term cts.box nat.nat) =>
              logic.eq
                nat.nat
                (nat.times nat.O (nat.plus x0 x1))
                (nat.plus (nat.times nat.O x0) (x x1)))))
       (nat.sym_eq_times
          nat.O
          (x:(cts.Term
                cts.box
                (cts.prod'
                   cts.box
                   cts.box
                   cts.box
                   nat.nat
                   (x0:(cts.Term cts.box nat.nat) => nat.nat))) =>
           cts.prod
             cts.box
             cts.star
             cts.star
             cts.I
             nat.nat
             (x0:(cts.Term cts.box nat.nat) =>
              cts.prod
                cts.box
                cts.star
                cts.star
                cts.I
                nat.nat
                (x1:(cts.Term cts.box nat.nat) =>
                 logic.eq
                   nat.nat
                   (nat.times nat.O (nat.plus x0 x1))
                   (nat.plus
                      (x x0)
                      (nat.filter_nat_type
                         (cts.prod
                            cts.box
                            cts.box
                            cts.box
                            cts.I
                            nat.nat
                            (x2:(cts.Term cts.box nat.nat) => nat.nat))
                         nat.times_body
                         nat.O
                         x1)))))
          (nat.sym_eq_times
             nat.O
             (x:(cts.Term
                   cts.box
                   (cts.prod'
                      cts.box
                      cts.box
                      cts.box
                      nat.nat
                      (x0:(cts.Term cts.box nat.nat) => nat.nat))) =>
              cts.prod
                cts.box
                cts.star
                cts.star
                cts.I
                nat.nat
                (x0:(cts.Term cts.box nat.nat) =>
                 cts.prod
                   cts.box
                   cts.star
                   cts.star
                   cts.I
                   nat.nat
                   (x1:(cts.Term cts.box nat.nat) =>
                    logic.eq
                      nat.nat
                      (x (nat.plus x0 x1))
                      (nat.plus
                         (nat.filter_nat_type
                            (cts.prod
                               cts.box
                               cts.box
                               cts.box
                               cts.I
                               nat.nat
                               (x2:(cts.Term cts.box nat.nat) => nat.nat))
                            nat.times_body
                            nat.O
                            x0)
                         (nat.filter_nat_type
                            (cts.prod
                               cts.box
                               cts.box
                               cts.box
                               cts.I
                               nat.nat
                               (x2:(cts.Term cts.box nat.nat) => nat.nat))
                            nat.times_body
                            nat.O
                            x1)))))
             (nat.sym_eq_filter_nat_type_O
                (cts.prod
                   cts.box
                   cts.box
                   cts.box
                   cts.I
                   nat.nat
                   (x:(cts.Term cts.box nat.nat) => nat.nat))
                nat.times_body
                (x:(cts.Term
                      cts.box
                      (cts.prod'
                         cts.box
                         cts.box
                         cts.box
                         nat.nat
                         (x:(cts.Term cts.box nat.nat) => nat.nat))) =>
                 cts.prod
                   cts.box
                   cts.star
                   cts.star
                   cts.I
                   nat.nat
                   (x0:(cts.Term cts.box nat.nat) =>
                    cts.prod
                      cts.box
                      cts.star
                      cts.star
                      cts.I
                      nat.nat
                      (x1:(cts.Term cts.box nat.nat) =>
                       logic.eq
                         nat.nat
                         (x (nat.plus x0 x1))
                         (nat.plus
                            (nat.filter_nat_type
                               (cts.prod
                                  cts.box
                                  cts.box
                                  cts.box
                                  cts.I
                                  nat.nat
                                  (x2:(cts.Term cts.box nat.nat) => nat.nat))
                               nat.times_body
                               nat.O
                               x0)
                            (nat.filter_nat_type
                               (cts.prod
                                  cts.box
                                  cts.box
                                  cts.box
                                  cts.I
                                  nat.nat
                                  (x2:(cts.Term cts.box nat.nat) => nat.nat))
                               nat.times_body
                               nat.O
                               x1)))))
                (nat.sym_eq_filter_nat_type_O
                   (cts.prod
                      cts.box
                      cts.box
                      cts.box
                      cts.I
                      nat.nat
                      (x:(cts.Term cts.box nat.nat) => nat.nat))
                   nat.times_body
                   (x:(cts.Term
                         cts.box
                         (cts.prod'
                            cts.box
                            cts.box
                            cts.box
                            nat.nat
                            (x:(cts.Term cts.box nat.nat) => nat.nat))) =>
                    cts.prod
                      cts.box
                      cts.star
                      cts.star
                      cts.I
                      nat.nat
                      (x0:(cts.Term cts.box nat.nat) =>
                       cts.prod
                         cts.box
                         cts.star
                         cts.star
                         cts.I
                         nat.nat
                         (x1:(cts.Term cts.box nat.nat) =>
                          logic.eq
                            nat.nat
                            (nat.times_body nat.O (nat.plus x0 x1))
                            (nat.plus
                               (x x0)
                               (nat.filter_nat_type
                                  (cts.prod
                                     cts.box
                                     cts.box
                                     cts.box
                                     cts.I
                                     nat.nat
                                     (x2:(cts.Term cts.box nat.nat) => nat.nat))
                                  nat.times_body
                                  nat.O
                                  x1)))))
                   (nat.sym_eq_filter_nat_type_O
                      (cts.prod
                         cts.box
                         cts.box
                         cts.box
                         cts.I
                         nat.nat
                         (x:(cts.Term cts.box nat.nat) => nat.nat))
                      nat.times_body
                      (x:(cts.Term
                            cts.box
                            (cts.prod'
                               cts.box
                               cts.box
                               cts.box
                               nat.nat
                               (x:(cts.Term cts.box nat.nat) => nat.nat))) =>
                       cts.prod
                         cts.box
                         cts.star
                         cts.star
                         cts.I
                         nat.nat
                         (x0:(cts.Term cts.box nat.nat) =>
                          cts.prod
                            cts.box
                            cts.star
                            cts.star
                            cts.I
                            nat.nat
                            (x1:(cts.Term cts.box nat.nat) =>
                             logic.eq
                               nat.nat
                               (nat.times_body nat.O (nat.plus x0 x1))
                               (nat.plus (nat.times_body nat.O x0) (x x1)))))
                      (nat.sym_eq_times_body_O
                         (x:(cts.Term
                               cts.box
                               (cts.prod'
                                  cts.box
                                  cts.box
                                  cts.box
                                  nat.nat
                                  (x:(cts.Term cts.box nat.nat) => nat.nat))) =>
                          cts.prod
                            cts.box
                            cts.star
                            cts.star
                            cts.I
                            nat.nat
                            (x0:(cts.Term cts.box nat.nat) =>
                             cts.prod
                               cts.box
                               cts.star
                               cts.star
                               cts.I
                               nat.nat
                               (x1:(cts.Term cts.box nat.nat) =>
                                logic.eq
                                  nat.nat
                                  (nat.times_body nat.O (nat.plus x0 x1))
                                  (nat.plus (nat.times_body nat.O x0) (x x1)))))
                         (nat.sym_eq_times_body_O
                            (x:(cts.Term
                                  cts.box
                                  (cts.prod'
                                     cts.box
                                     cts.box
                                     cts.box
                                     nat.nat
                                     (x:(cts.Term cts.box nat.nat) => nat.nat))) =>
                             cts.prod
                               cts.box
                               cts.star
                               cts.star
                               cts.I
                               nat.nat
                               (x0:(cts.Term cts.box nat.nat) =>
                                cts.prod
                                  cts.box
                                  cts.star
                                  cts.star
                                  cts.I
                                  nat.nat
                                  (x1:(cts.Term cts.box nat.nat) =>
                                   logic.eq
                                     nat.nat
                                     (nat.times_body nat.O (nat.plus x0 x1))
                                     (nat.plus (x x0) nat.O))))
                            (nat.sym_eq_times_body_O
                               (x:(cts.Term
                                     cts.box
                                     (cts.prod'
                                        cts.box
                                        cts.box
                                        cts.box
                                        nat.nat
                                        (x:(cts.Term cts.box nat.nat) => nat.nat))) =>
                                cts.prod
                                  cts.box
                                  cts.star
                                  cts.star
                                  cts.I
                                  nat.nat
                                  (x0:(cts.Term cts.box nat.nat) =>
                                   cts.prod
                                     cts.box
                                     cts.star
                                     cts.star
                                     cts.I
                                     nat.nat
                                     (x1:(cts.Term cts.box nat.nat) =>
                                      logic.eq
                                        nat.nat
                                        (x (nat.plus x0 x1))
                                        (nat.plus nat.O nat.O))))
                               (nat.sym_eq_plus
                                  nat.O
                                  (x:(cts.Term
                                        cts.box
                                        (cts.prod'
                                           cts.box
                                           cts.box
                                           cts.box
                                           nat.nat
                                           (x0:(cts.Term cts.box nat.nat) => nat.nat))) =>
                                   cts.prod
                                     cts.box
                                     cts.star
                                     cts.star
                                     cts.I
                                     nat.nat
                                     (x0:(cts.Term cts.box nat.nat) =>
                                      cts.prod
                                        cts.box
                                        cts.star
                                        cts.star
                                        cts.I
                                        nat.nat
                                        (x1:(cts.Term cts.box nat.nat) =>
                                         logic.eq nat.nat nat.O (x nat.O))))
                                  (nat.sym_eq_filter_nat_type_O
                                     (cts.prod
                                        cts.box
                                        cts.box
                                        cts.box
                                        cts.I
                                        nat.nat
                                        (x:(cts.Term cts.box nat.nat) => nat.nat))
                                     nat.plus_body
                                     (x:(cts.Term
                                           cts.box
                                           (cts.prod'
                                              cts.box
                                              cts.box
                                              cts.box
                                              nat.nat
                                              (x:(cts.Term cts.box nat.nat) =>
                                               nat.nat))) =>
                                      cts.prod
                                        cts.box
                                        cts.star
                                        cts.star
                                        cts.I
                                        nat.nat
                                        (x0:(cts.Term cts.box nat.nat) =>
                                         cts.prod
                                           cts.box
                                           cts.star
                                           cts.star
                                           cts.I
                                           nat.nat
                                           (x1:(cts.Term cts.box nat.nat) =>
                                            logic.eq nat.nat nat.O (x nat.O))))
                                     (nat.sym_eq_plus_body_O
                                        (x:(cts.Term
                                              cts.box
                                              (cts.prod'
                                                 cts.box
                                                 cts.box
                                                 cts.box
                                                 nat.nat
                                                 (x:(cts.Term cts.box nat.nat) =>
                                                  nat.nat))) =>
                                         cts.prod
                                           cts.box
                                           cts.star
                                           cts.star
                                           cts.I
                                           nat.nat
                                           (x0:(cts.Term cts.box nat.nat) =>
                                            cts.prod
                                              cts.box
                                              cts.star
                                              cts.star
                                              cts.I
                                              nat.nat
                                              (x1:(cts.Term cts.box nat.nat) =>
                                               logic.eq nat.nat nat.O (x nat.O))))
                                        (_y:(cts.Term cts.box nat.nat) =>
                                         _z:(cts.Term cts.box nat.nat) =>
                                         logic.refl nat.nat nat.O)))))))))))))
    (x_366:(cts.Term cts.box nat.nat) =>
     _x_368:(cts.Term
               cts.star
               (cts.prod'
                  cts.box
                  cts.star
                  cts.star
                  nat.nat
                  (x:(cts.Term cts.box nat.nat) =>
                   cts.prod
                     cts.box
                     cts.star
                     cts.star
                     cts.I
                     nat.nat
                     (x0:(cts.Term cts.box nat.nat) =>
                      logic.eq
                        nat.nat
                        (nat.times x_366 (nat.plus x x0))
                        (nat.plus (nat.times x_366 x) (nat.times x_366 x0)))))) =>
     y:(cts.Term cts.box nat.nat) =>
     z:(cts.Term cts.box nat.nat) =>
     nat.sym_eq_times
       (nat.S x_366)
       (x:(cts.Term
             cts.box
             (cts.prod'
                cts.box
                cts.box
                cts.box
                nat.nat
                (x0:(cts.Term cts.box nat.nat) => nat.nat))) =>
        logic.eq
          nat.nat
          (nat.times (nat.S x_366) (nat.plus y z))
          (nat.plus (nat.times (nat.S x_366) y) (x z)))
       (nat.sym_eq_times
          (nat.S x_366)
          (x:(cts.Term
                cts.box
                (cts.prod'
                   cts.box
                   cts.box
                   cts.box
                   nat.nat
                   (x0:(cts.Term cts.box nat.nat) => nat.nat))) =>
           logic.eq
             nat.nat
             (nat.times (nat.S x_366) (nat.plus y z))
             (nat.plus
                (x y)
                (nat.filter_nat_type
                   (cts.prod
                      cts.box
                      cts.box
                      cts.box
                      cts.I
                      nat.nat
                      (x0:(cts.Term cts.box nat.nat) => nat.nat))
                   nat.times_body
                   (nat.S x_366)
                   z)))
          (nat.sym_eq_times
             (nat.S x_366)
             (x:(cts.Term
                   cts.box
                   (cts.prod'
                      cts.box
                      cts.box
                      cts.box
                      nat.nat
                      (x0:(cts.Term cts.box nat.nat) => nat.nat))) =>
              logic.eq
                nat.nat
                (x (nat.plus y z))
                (nat.plus
                   (nat.filter_nat_type
                      (cts.prod
                         cts.box
                         cts.box
                         cts.box
                         cts.I
                         nat.nat
                         (x0:(cts.Term cts.box nat.nat) => nat.nat))
                      nat.times_body
                      (nat.S x_366)
                      y)
                   (nat.filter_nat_type
                      (cts.prod
                         cts.box
                         cts.box
                         cts.box
                         cts.I
                         nat.nat
                         (x0:(cts.Term cts.box nat.nat) => nat.nat))
                      nat.times_body
                      (nat.S x_366)
                      z)))
             (nat.sym_eq_filter_nat_type_S
                (cts.prod
                   cts.box
                   cts.box
                   cts.box
                   cts.I
                   nat.nat
                   (x:(cts.Term cts.box nat.nat) => nat.nat))
                nat.times_body
                x_366
                (x:(cts.Term
                      cts.box
                      (cts.prod'
                         cts.box
                         cts.box
                         cts.box
                         nat.nat
                         (x:(cts.Term cts.box nat.nat) => nat.nat))) =>
                 logic.eq
                   nat.nat
                   (x (nat.plus y z))
                   (nat.plus
                      (nat.filter_nat_type
                         (cts.prod
                            cts.box
                            cts.box
                            cts.box
                            cts.I
                            nat.nat
                            (x0:(cts.Term cts.box nat.nat) => nat.nat))
                         nat.times_body
                         (nat.S x_366)
                         y)
                      (nat.filter_nat_type
                         (cts.prod
                            cts.box
                            cts.box
                            cts.box
                            cts.I
                            nat.nat
                            (x0:(cts.Term cts.box nat.nat) => nat.nat))
                         nat.times_body
                         (nat.S x_366)
                         z)))
                (nat.sym_eq_filter_nat_type_S
                   (cts.prod
                      cts.box
                      cts.box
                      cts.box
                      cts.I
                      nat.nat
                      (x:(cts.Term cts.box nat.nat) => nat.nat))
                   nat.times_body
                   x_366
                   (x:(cts.Term
                         cts.box
                         (cts.prod'
                            cts.box
                            cts.box
                            cts.box
                            nat.nat
                            (x:(cts.Term cts.box nat.nat) => nat.nat))) =>
                    logic.eq
                      nat.nat
                      (nat.times_body (nat.S x_366) (nat.plus y z))
                      (nat.plus
                         (x y)
                         (nat.filter_nat_type
                            (cts.prod
                               cts.box
                               cts.box
                               cts.box
                               cts.I
                               nat.nat
                               (x0:(cts.Term cts.box nat.nat) => nat.nat))
                            nat.times_body
                            (nat.S x_366)
                            z)))
                   (nat.sym_eq_filter_nat_type_S
                      (cts.prod
                         cts.box
                         cts.box
                         cts.box
                         cts.I
                         nat.nat
                         (x:(cts.Term cts.box nat.nat) => nat.nat))
                      nat.times_body
                      x_366
                      (x:(cts.Term
                            cts.box
                            (cts.prod'
                               cts.box
                               cts.box
                               cts.box
                               nat.nat
                               (x:(cts.Term cts.box nat.nat) => nat.nat))) =>
                       logic.eq
                         nat.nat
                         (nat.times_body (nat.S x_366) (nat.plus y z))
                         (nat.plus (nat.times_body (nat.S x_366) y) (x z)))
                      (nat.sym_eq_times_body_S
                         x_366
                         (x:(cts.Term
                               cts.box
                               (cts.prod'
                                  cts.box
                                  cts.box
                                  cts.box
                                  nat.nat
                                  (x0:(cts.Term cts.box nat.nat) => nat.nat))) =>
                          logic.eq
                            nat.nat
                            (nat.times_body (nat.S x_366) (nat.plus y z))
                            (nat.plus (nat.times_body (nat.S x_366) y) (x z)))
                         (nat.sym_eq_times_body_S
                            x_366
                            (x:(cts.Term
                                  cts.box
                                  (cts.prod'
                                     cts.box
                                     cts.box
                                     cts.box
                                     nat.nat
                                     (x0:(cts.Term cts.box nat.nat) => nat.nat))) =>
                             logic.eq
                               nat.nat
                               (nat.times_body (nat.S x_366) (nat.plus y z))
                               (nat.plus (x y) (nat.plus z (nat.times x_366 z))))
                            (nat.sym_eq_times_body_S
                               x_366
                               (x:(cts.Term
                                     cts.box
                                     (cts.prod'
                                        cts.box
                                        cts.box
                                        cts.box
                                        nat.nat
                                        (x0:(cts.Term cts.box nat.nat) => nat.nat))) =>
                                logic.eq
                                  nat.nat
                                  (x (nat.plus y z))
                                  (nat.plus
                                     (nat.plus y (nat.times x_366 y))
                                     (nat.plus z (nat.times x_366 z))))
                               (logic.rewrite_r
                                  nat.nat
                                  (nat.plus y (nat.plus z (nat.times x_366 (nat.plus y z))))
                                  (__:(cts.Term cts.box nat.nat) =>
                                   logic.eq
                                     nat.nat
                                     __
                                     (nat.plus
                                        (nat.plus y (nat.times x_366 y))
                                        (nat.plus z (nat.times x_366 z))))
                                  (logic.rewrite_r
                                     nat.nat
                                     (nat.plus
                                        y
                                        (nat.plus
                                           (nat.times x_366 y)
                                           (nat.plus z (nat.times x_366 z))))
                                     (__:(cts.Term cts.box nat.nat) =>
                                      logic.eq
                                        nat.nat
                                        (nat.plus
                                           y
                                           (nat.plus z (nat.times x_366 (nat.plus y z))))
                                        __)
                                     (logic.rewrite_r
                                        nat.nat
                                        (nat.plus
                                           z
                                           (nat.plus
                                              (nat.times x_366 y)
                                              (nat.times x_366 z)))
                                        (__:(cts.Term cts.box nat.nat) =>
                                         logic.eq
                                           nat.nat
                                           (nat.plus
                                              y
                                              (nat.plus
                                                 z
                                                 (nat.times x_366 (nat.plus y z))))
                                           (nat.plus y __))
                                        (logic.rewrite_l
                                           nat.nat
                                           (nat.times x_366 (nat.plus y z))
                                           (__:(cts.Term cts.box nat.nat) =>
                                            logic.eq
                                              nat.nat
                                              (nat.plus
                                                 y
                                                 (nat.plus
                                                    z
                                                    (nat.times x_366 (nat.plus y z))))
                                              (nat.plus y (nat.plus z __)))
                                           (logic.refl
                                              nat.nat
                                              (nat.plus
                                                 y
                                                 (nat.plus
                                                    z
                                                    (nat.times x_366 (nat.plus y z)))))
                                           (nat.plus
                                              (nat.times x_366 y)
                                              (nat.times x_366 z))
                                           (_x_368 y z))
                                        (nat.plus
                                           (nat.times x_366 y)
                                           (nat.plus z (nat.times x_366 z)))
                                        (logic.rewrite_l
                                           nat.nat
                                           (nat.plus
                                              (nat.plus z (nat.times x_366 y))
                                              (nat.times x_366 z))
                                           (__:(cts.Term cts.box nat.nat) =>
                                            logic.eq
                                              nat.nat
                                              (nat.plus
                                                 (nat.times x_366 y)
                                                 (nat.plus z (nat.times x_366 z)))
                                              __)
                                           (nat.assoc_plus1
                                              (nat.times x_366 z)
                                              z
                                              (nat.times x_366 y))
                                           (nat.plus
                                              z
                                              (nat.plus
                                                 (nat.times x_366 y)
                                                 (nat.times x_366 z)))
                                           (nat.associative_plus
                                              z
                                              (nat.times x_366 y)
                                              (nat.times x_366 z))))
                                     (nat.plus
                                        (nat.plus y (nat.times x_366 y))
                                        (nat.plus z (nat.times x_366 z)))
                                     (nat.associative_plus
                                        y
                                        (nat.times x_366 y)
                                        (nat.plus z (nat.times x_366 z))))
                                  (nat.plus (nat.plus y z) (nat.times x_366 (nat.plus y z)))
                                  (nat.associative_plus
                                     y
                                     z
                                     (nat.times x_366 (nat.plus y z)))))))))))))
    n.

def distributive_times_plus_r :
  cts.Term
    cts.star
    (cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       nat.nat
       (x:(cts.Term cts.box nat.nat) =>
        cts.prod
          cts.box
          cts.star
          cts.star
          cts.I
          nat.nat
          (x0:(cts.Term cts.box nat.nat) =>
           cts.prod
             cts.box
             cts.star
             cts.star
             cts.I
             nat.nat
             (x1:(cts.Term cts.box nat.nat) =>
              logic.eq
                nat.nat
                (nat.times (nat.plus x0 x1) x)
                (nat.plus (nat.times x0 x) (nat.times x1 x))))))
  :=
  a:(cts.Term cts.box nat.nat) =>
  b:(cts.Term cts.box nat.nat) =>
  c:(cts.Term cts.box nat.nat) =>
  logic.rewrite_r
    nat.nat
    (nat.times a (nat.plus b c))
    (__:(cts.Term cts.box nat.nat) => logic.eq nat.nat __ (nat.plus (nat.times b a) (nat.times c a)))
    (logic.rewrite_r
       nat.nat
       (nat.times a b)
       (__:(cts.Term cts.box nat.nat) =>
        logic.eq nat.nat (nat.times a (nat.plus b c)) (nat.plus __ (nat.times c a)))
       (logic.rewrite_r
          nat.nat
          (nat.times a c)
          (__:(cts.Term cts.box nat.nat) =>
           logic.eq nat.nat (nat.times a (nat.plus b c)) (nat.plus (nat.times a b) __))
          (logic.rewrite_l
             nat.nat
             (nat.times a (nat.plus b c))
             (__:(cts.Term cts.box nat.nat) => logic.eq nat.nat (nat.times a (nat.plus b c)) __)
             (logic.refl nat.nat (nat.times a (nat.plus b c)))
             (nat.plus (nat.times a b) (nat.times a c))
             (nat.distributive_times_plus a b c))
          (nat.times c a)
          (nat.commutative_times c a))
       (nat.times b a)
       (nat.commutative_times b a))
    (nat.times (nat.plus b c) a)
    (nat.commutative_times (nat.plus b c) a).

def associative_times :
  cts.Term cts.star (relations.associative nat.nat nat.times)
  :=
  n:(cts.Term cts.box nat.nat) =>
  nat.nat_ind
    (_x_365:(cts.Term cts.box nat.nat) =>
     cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       nat.nat
       (x:(cts.Term cts.box nat.nat) =>
        cts.prod
          cts.box
          cts.star
          cts.star
          cts.I
          nat.nat
          (x0:(cts.Term cts.box nat.nat) =>
           logic.eq nat.nat (nat.times (nat.times _x_365 x) x0) (nat.times _x_365 (nat.times x x0)))))
    (nat.sym_eq_times
       nat.O
       (x:(cts.Term
             cts.box
             (cts.prod'
                cts.box
                cts.box
                cts.box
                nat.nat
                (x0:(cts.Term cts.box nat.nat) => nat.nat))) =>
        cts.prod
          cts.box
          cts.star
          cts.star
          cts.I
          nat.nat
          (x0:(cts.Term cts.box nat.nat) =>
           cts.prod
             cts.box
             cts.star
             cts.star
             cts.I
             nat.nat
             (x1:(cts.Term cts.box nat.nat) =>
              logic.eq nat.nat (nat.times (nat.times nat.O x0) x1) (x (nat.times x0 x1)))))
       (nat.sym_eq_times
          nat.O
          (x:(cts.Term
                cts.box
                (cts.prod'
                   cts.box
                   cts.box
                   cts.box
                   nat.nat
                   (x0:(cts.Term cts.box nat.nat) => nat.nat))) =>
           cts.prod
             cts.box
             cts.star
             cts.star
             cts.I
             nat.nat
             (x0:(cts.Term cts.box nat.nat) =>
              cts.prod
                cts.box
                cts.star
                cts.star
                cts.I
                nat.nat
                (x1:(cts.Term cts.box nat.nat) =>
                 logic.eq
                   nat.nat
                   (nat.times (x x0) x1)
                   (nat.filter_nat_type
                      (cts.prod
                         cts.box
                         cts.box
                         cts.box
                         cts.I
                         nat.nat
                         (x2:(cts.Term cts.box nat.nat) => nat.nat))
                      nat.times_body
                      nat.O
                      (nat.times x0 x1)))))
          (nat.sym_eq_filter_nat_type_O
             (cts.prod
                cts.box
                cts.box
                cts.box
                cts.I
                nat.nat
                (x:(cts.Term cts.box nat.nat) => nat.nat))
             nat.times_body
             (x:(cts.Term
                   cts.box
                   (cts.prod'
                      cts.box
                      cts.box
                      cts.box
                      nat.nat
                      (x:(cts.Term cts.box nat.nat) => nat.nat))) =>
              cts.prod
                cts.box
                cts.star
                cts.star
                cts.I
                nat.nat
                (x0:(cts.Term cts.box nat.nat) =>
                 cts.prod
                   cts.box
                   cts.star
                   cts.star
                   cts.I
                   nat.nat
                   (x1:(cts.Term cts.box nat.nat) =>
                    logic.eq
                      nat.nat
                      (nat.times (x x0) x1)
                      (nat.filter_nat_type
                         (cts.prod
                            cts.box
                            cts.box
                            cts.box
                            cts.I
                            nat.nat
                            (x2:(cts.Term cts.box nat.nat) => nat.nat))
                         nat.times_body
                         nat.O
                         (nat.times x0 x1)))))
             (nat.sym_eq_filter_nat_type_O
                (cts.prod
                   cts.box
                   cts.box
                   cts.box
                   cts.I
                   nat.nat
                   (x:(cts.Term cts.box nat.nat) => nat.nat))
                nat.times_body
                (x:(cts.Term
                      cts.box
                      (cts.prod'
                         cts.box
                         cts.box
                         cts.box
                         nat.nat
                         (x:(cts.Term cts.box nat.nat) => nat.nat))) =>
                 cts.prod
                   cts.box
                   cts.star
                   cts.star
                   cts.I
                   nat.nat
                   (x0:(cts.Term cts.box nat.nat) =>
                    cts.prod
                      cts.box
                      cts.star
                      cts.star
                      cts.I
                      nat.nat
                      (x1:(cts.Term cts.box nat.nat) =>
                       logic.eq
                         nat.nat
                         (nat.times (nat.times_body nat.O x0) x1)
                         (x (nat.times x0 x1)))))
                (nat.sym_eq_times_body_O
                   (x:(cts.Term
                         cts.box
                         (cts.prod'
                            cts.box
                            cts.box
                            cts.box
                            nat.nat
                            (x:(cts.Term cts.box nat.nat) => nat.nat))) =>
                    cts.prod
                      cts.box
                      cts.star
                      cts.star
                      cts.I
                      nat.nat
                      (x0:(cts.Term cts.box nat.nat) =>
                       cts.prod
                         cts.box
                         cts.star
                         cts.star
                         cts.I
                         nat.nat
                         (x1:(cts.Term cts.box nat.nat) =>
                          logic.eq
                            nat.nat
                            (nat.times (nat.times_body nat.O x0) x1)
                            (x (nat.times x0 x1)))))
                   (nat.sym_eq_times_body_O
                      (x:(cts.Term
                            cts.box
                            (cts.prod'
                               cts.box
                               cts.box
                               cts.box
                               nat.nat
                               (x:(cts.Term cts.box nat.nat) => nat.nat))) =>
                       cts.prod
                         cts.box
                         cts.star
                         cts.star
                         cts.I
                         nat.nat
                         (x0:(cts.Term cts.box nat.nat) =>
                          cts.prod
                            cts.box
                            cts.star
                            cts.star
                            cts.I
                            nat.nat
                            (x1:(cts.Term cts.box nat.nat) =>
                             logic.eq nat.nat (nat.times (x x0) x1) nat.O)))
                      (nat.sym_eq_times
                         nat.O
                         (x:(cts.Term
                               cts.box
                               (cts.prod'
                                  cts.box
                                  cts.box
                                  cts.box
                                  nat.nat
                                  (x0:(cts.Term cts.box nat.nat) => nat.nat))) =>
                          cts.prod
                            cts.box
                            cts.star
                            cts.star
                            cts.I
                            nat.nat
                            (x0:(cts.Term cts.box nat.nat) =>
                             cts.prod
                               cts.box
                               cts.star
                               cts.star
                               cts.I
                               nat.nat
                               (x1:(cts.Term cts.box nat.nat) =>
                                logic.eq nat.nat (x x1) nat.O)))
                         (nat.sym_eq_filter_nat_type_O
                            (cts.prod
                               cts.box
                               cts.box
                               cts.box
                               cts.I
                               nat.nat
                               (x:(cts.Term cts.box nat.nat) => nat.nat))
                            nat.times_body
                            (x:(cts.Term
                                  cts.box
                                  (cts.prod'
                                     cts.box
                                     cts.box
                                     cts.box
                                     nat.nat
                                     (x:(cts.Term cts.box nat.nat) => nat.nat))) =>
                             cts.prod
                               cts.box
                               cts.star
                               cts.star
                               cts.I
                               nat.nat
                               (x0:(cts.Term cts.box nat.nat) =>
                                cts.prod
                                  cts.box
                                  cts.star
                                  cts.star
                                  cts.I
                                  nat.nat
                                  (x1:(cts.Term cts.box nat.nat) =>
                                   logic.eq nat.nat (x x1) nat.O)))
                            (nat.sym_eq_times_body_O
                               (x:(cts.Term
                                     cts.box
                                     (cts.prod'
                                        cts.box
                                        cts.box
                                        cts.box
                                        nat.nat
                                        (x:(cts.Term cts.box nat.nat) => nat.nat))) =>
                                cts.prod
                                  cts.box
                                  cts.star
                                  cts.star
                                  cts.I
                                  nat.nat
                                  (x0:(cts.Term cts.box nat.nat) =>
                                   cts.prod
                                     cts.box
                                     cts.star
                                     cts.star
                                     cts.I
                                     nat.nat
                                     (x1:(cts.Term cts.box nat.nat) =>
                                      logic.eq nat.nat (x x1) nat.O)))
                               (_y:(cts.Term cts.box nat.nat) =>
                                _z:(cts.Term cts.box nat.nat) => logic.refl nat.nat nat.O))))))))))
    (x_366:(cts.Term cts.box nat.nat) =>
     _x_368:(cts.Term
               cts.star
               (cts.prod'
                  cts.box
                  cts.star
                  cts.star
                  nat.nat
                  (x:(cts.Term cts.box nat.nat) =>
                   cts.prod
                     cts.box
                     cts.star
                     cts.star
                     cts.I
                     nat.nat
                     (x0:(cts.Term cts.box nat.nat) =>
                      logic.eq
                        nat.nat
                        (nat.times (nat.times x_366 x) x0)
                        (nat.times x_366 (nat.times x x0)))))) =>
     y:(cts.Term cts.box nat.nat) =>
     z:(cts.Term cts.box nat.nat) =>
     nat.sym_eq_times
       (nat.S x_366)
       (x:(cts.Term
             cts.box
             (cts.prod'
                cts.box
                cts.box
                cts.box
                nat.nat
                (x0:(cts.Term cts.box nat.nat) => nat.nat))) =>
        logic.eq nat.nat (nat.times (nat.times (nat.S x_366) y) z) (x (nat.times y z)))
       (nat.sym_eq_times
          (nat.S x_366)
          (x:(cts.Term
                cts.box
                (cts.prod'
                   cts.box
                   cts.box
                   cts.box
                   nat.nat
                   (x0:(cts.Term cts.box nat.nat) => nat.nat))) =>
           logic.eq
             nat.nat
             (nat.times (x y) z)
             (nat.filter_nat_type
                (cts.prod
                   cts.box
                   cts.box
                   cts.box
                   cts.I
                   nat.nat
                   (x0:(cts.Term cts.box nat.nat) => nat.nat))
                nat.times_body
                (nat.S x_366)
                (nat.times y z)))
          (nat.sym_eq_filter_nat_type_S
             (cts.prod
                cts.box
                cts.box
                cts.box
                cts.I
                nat.nat
                (x:(cts.Term cts.box nat.nat) => nat.nat))
             nat.times_body
             x_366
             (x:(cts.Term
                   cts.box
                   (cts.prod'
                      cts.box
                      cts.box
                      cts.box
                      nat.nat
                      (x:(cts.Term cts.box nat.nat) => nat.nat))) =>
              logic.eq
                nat.nat
                (nat.times (x y) z)
                (nat.filter_nat_type
                   (cts.prod
                      cts.box
                      cts.box
                      cts.box
                      cts.I
                      nat.nat
                      (x0:(cts.Term cts.box nat.nat) => nat.nat))
                   nat.times_body
                   (nat.S x_366)
                   (nat.times y z)))
             (nat.sym_eq_filter_nat_type_S
                (cts.prod
                   cts.box
                   cts.box
                   cts.box
                   cts.I
                   nat.nat
                   (x:(cts.Term cts.box nat.nat) => nat.nat))
                nat.times_body
                x_366
                (x:(cts.Term
                      cts.box
                      (cts.prod'
                         cts.box
                         cts.box
                         cts.box
                         nat.nat
                         (x:(cts.Term cts.box nat.nat) => nat.nat))) =>
                 logic.eq
                   nat.nat
                   (nat.times (nat.times_body (nat.S x_366) y) z)
                   (x (nat.times y z)))
                (nat.sym_eq_times_body_S
                   x_366
                   (x:(cts.Term
                         cts.box
                         (cts.prod'
                            cts.box
                            cts.box
                            cts.box
                            nat.nat
                            (x0:(cts.Term cts.box nat.nat) => nat.nat))) =>
                    logic.eq
                      nat.nat
                      (nat.times (nat.times_body (nat.S x_366) y) z)
                      (x (nat.times y z)))
                   (nat.sym_eq_times_body_S
                      x_366
                      (x:(cts.Term
                            cts.box
                            (cts.prod'
                               cts.box
                               cts.box
                               cts.box
                               nat.nat
                               (x0:(cts.Term cts.box nat.nat) => nat.nat))) =>
                       logic.eq
                         nat.nat
                         (nat.times (x y) z)
                         (nat.plus (nat.times y z) (nat.times x_366 (nat.times y z))))
                      (logic.rewrite_r
                         nat.nat
                         (nat.plus (nat.times y z) (nat.times x_366 (nat.times y z)))
                         (__:(cts.Term cts.box nat.nat) =>
                          logic.eq
                            nat.nat
                            __
                            (nat.plus (nat.times y z) (nat.times x_366 (nat.times y z))))
                         (logic.refl
                            nat.nat
                            (nat.plus (nat.times y z) (nat.times x_366 (nat.times y z))))
                         (nat.times (nat.plus y (nat.times x_366 y)) z)
                         (logic.rewrite_l
                            nat.nat
                            (nat.times (nat.times x_366 y) z)
                            (__:(cts.Term cts.box nat.nat) =>
                             logic.eq
                               nat.nat
                               (nat.times (nat.plus y (nat.times x_366 y)) z)
                               (nat.plus (nat.times y z) __))
                            (nat.distributive_times_plus_r z y (nat.times x_366 y))
                            (nat.times x_366 (nat.times y z))
                            (_x_368 y z)))))))))
    n.

def times_times :
  cts.Term
    cts.star
    (cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       nat.nat
       (x:(cts.Term cts.box nat.nat) =>
        cts.prod
          cts.box
          cts.star
          cts.star
          cts.I
          nat.nat
          (x0:(cts.Term cts.box nat.nat) =>
           cts.prod
             cts.box
             cts.star
             cts.star
             cts.I
             nat.nat
             (x1:(cts.Term cts.box nat.nat) =>
              logic.eq nat.nat (nat.times x (nat.times x0 x1)) (nat.times x0 (nat.times x x1))))))
  :=
  x:(cts.Term cts.box nat.nat) =>
  y:(cts.Term cts.box nat.nat) =>
  z:(cts.Term cts.box nat.nat) =>
  logic.rewrite_r
    nat.nat
    (nat.times y (nat.times x z))
    (__:(cts.Term cts.box nat.nat) => logic.eq nat.nat __ (nat.times y (nat.times x z)))
    (logic.refl nat.nat (nat.times y (nat.times x z)))
    (nat.times x (nat.times y z))
    (logic.rewrite_l
       nat.nat
       (nat.times (nat.times x y) z)
       (__:(cts.Term cts.box nat.nat) => logic.eq nat.nat __ (nat.times y (nat.times x z)))
       (logic.rewrite_l
          nat.nat
          (nat.times y x)
          (__:(cts.Term cts.box nat.nat) =>
           logic.eq nat.nat (nat.times __ z) (nat.times y (nat.times x z)))
          (nat.associative_times y x z)
          (nat.times x y)
          (nat.commutative_times y x))
       (nat.times x (nat.times y z))
       (nat.associative_times x y z)).

def times_n_1 :
  cts.Term
    cts.star
    (cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       nat.nat
       (x:(cts.Term cts.box nat.nat) => logic.eq nat.nat x (nat.times x (nat.S nat.O))))
  :=
  n:(cts.Term cts.box nat.nat) =>
  logic.rewrite_l
    nat.nat
    (nat.plus n (nat.times n nat.O))
    (__:(cts.Term cts.box nat.nat) => logic.eq nat.nat n __)
    (logic.rewrite_l
       nat.nat
       nat.O
       (__:(cts.Term cts.box nat.nat) => logic.eq nat.nat n (nat.plus n __))
       (logic.rewrite_l
          nat.nat
          n
          (__:(cts.Term cts.box nat.nat) => logic.eq nat.nat n __)
          (logic.refl nat.nat n)
          (nat.plus n nat.O)
          (nat.plus_n_O n))
       (nat.times n nat.O)
       (nat.times_n_O n))
    (nat.times n (nat.S nat.O))
    (nat.times_n_Sm n nat.O).

def minus_S_S :
  cts.Term
    cts.star
    (cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       nat.nat
       (x:(cts.Term cts.box nat.nat) =>
        cts.prod
          cts.box
          cts.star
          cts.star
          cts.I
          nat.nat
          (x0:(cts.Term cts.box nat.nat) =>
           logic.eq nat.nat (nat.minus (nat.S x) (nat.S x0)) (nat.minus x x0))))
  :=
  n:(cts.Term cts.box nat.nat) =>
  m:(cts.Term cts.box nat.nat) =>
  nat.eq_match_nat_type_S
    nat.nat
    (nat.S n)
    (q:(cts.Term cts.box nat.nat) => nat.minus n q)
    m
    (y:(cts.Term cts.box nat.nat) => logic.eq nat.nat (nat.minus (nat.S n) (nat.S m)) y)
    (nat.eq_minus_body_S
       n
       (y:(cts.Term
             cts.box
             (cts.prod'
                cts.box
                cts.box
                cts.box
                nat.nat
                (x0:(cts.Term cts.box nat.nat) => nat.nat))) =>
        logic.eq nat.nat (nat.minus (nat.S n) (nat.S m)) (y (nat.S m)))
       (nat.eq_filter_nat_type_S
          (cts.prod cts.box cts.box cts.box cts.I nat.nat (x:(cts.Term cts.box nat.nat) => nat.nat))
          nat.minus_body
          n
          (y:(cts.Term
                cts.box
                (cts.prod'
                   cts.box
                   cts.box
                   cts.box
                   nat.nat
                   (x:(cts.Term cts.box nat.nat) => nat.nat))) =>
           logic.eq nat.nat (nat.minus (nat.S n) (nat.S m)) (y (nat.S m)))
          (nat.eq_minus
             (nat.S n)
             (y:(cts.Term
                   cts.box
                   (cts.prod'
                      cts.box
                      cts.box
                      cts.box
                      nat.nat
                      (x0:(cts.Term cts.box nat.nat) => nat.nat))) =>
              logic.eq nat.nat (nat.minus (nat.S n) (nat.S m)) (y (nat.S m)))
             (logic.refl nat.nat (nat.minus (nat.S n) (nat.S m)))))).

def minus_O_n :
  cts.Term
    cts.star
    (cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       nat.nat
       (x:(cts.Term cts.box nat.nat) => logic.eq nat.nat nat.O (nat.minus nat.O x)))
  :=
  n:(cts.Term cts.box nat.nat) =>
  nat.match_nat_prop
    (__:(cts.Term cts.box nat.nat) => logic.eq nat.nat nat.O (nat.minus nat.O __))
    (nat.sym_eq_minus
       nat.O
       (y:(cts.Term
             cts.box
             (cts.prod'
                cts.box
                cts.box
                cts.box
                nat.nat
                (x0:(cts.Term cts.box nat.nat) => nat.nat))) =>
        logic.eq nat.nat nat.O (y nat.O))
       (nat.sym_eq_filter_nat_type_O
          (cts.prod cts.box cts.box cts.box cts.I nat.nat (x:(cts.Term cts.box nat.nat) => nat.nat))
          nat.minus_body
          (y:(cts.Term
                cts.box
                (cts.prod'
                   cts.box
                   cts.box
                   cts.box
                   nat.nat
                   (x:(cts.Term cts.box nat.nat) => nat.nat))) =>
           logic.eq nat.nat nat.O (y nat.O))
          (nat.sym_eq_minus_body_O
             (y:(cts.Term
                   cts.box
                   (cts.prod'
                      cts.box
                      cts.box
                      cts.box
                      nat.nat
                      (x:(cts.Term cts.box nat.nat) => nat.nat))) =>
              logic.eq nat.nat nat.O (y nat.O))
             (logic.refl nat.nat nat.O))))
    (nat.sym_eq_minus
       nat.O
       (y:(cts.Term
             cts.box
             (cts.prod'
                cts.box
                cts.box
                cts.box
                nat.nat
                (x0:(cts.Term cts.box nat.nat) => nat.nat))) =>
        cts.prod
          cts.box
          cts.star
          cts.star
          cts.I
          nat.nat
          (x:(cts.Term cts.box nat.nat) => logic.eq nat.nat nat.O (y (nat.S x))))
       (nat.sym_eq_filter_nat_type_O
          (cts.prod cts.box cts.box cts.box cts.I nat.nat (x:(cts.Term cts.box nat.nat) => nat.nat))
          nat.minus_body
          (y:(cts.Term
                cts.box
                (cts.prod'
                   cts.box
                   cts.box
                   cts.box
                   nat.nat
                   (x:(cts.Term cts.box nat.nat) => nat.nat))) =>
           cts.prod
             cts.box
             cts.star
             cts.star
             cts.I
             nat.nat
             (x:(cts.Term cts.box nat.nat) => logic.eq nat.nat nat.O (y (nat.S x))))
          (nat.sym_eq_minus_body_O
             (y:(cts.Term
                   cts.box
                   (cts.prod'
                      cts.box
                      cts.box
                      cts.box
                      nat.nat
                      (x:(cts.Term cts.box nat.nat) => nat.nat))) =>
              cts.prod
                cts.box
                cts.star
                cts.star
                cts.I
                nat.nat
                (x:(cts.Term cts.box nat.nat) => logic.eq nat.nat nat.O (y (nat.S x))))
             (auto:(cts.Term cts.box nat.nat) => logic.refl nat.nat nat.O))))
    n.

def minus_n_O :
  cts.Term
    cts.star
    (cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       nat.nat
       (x:(cts.Term cts.box nat.nat) => logic.eq nat.nat x (nat.minus x nat.O)))
  :=
  n:(cts.Term cts.box nat.nat) =>
  nat.match_nat_prop
    (__:(cts.Term cts.box nat.nat) => logic.eq nat.nat __ (nat.minus __ nat.O))
    (logic.rewrite_l
       nat.nat
       nat.O
       (__:(cts.Term cts.box nat.nat) => logic.eq nat.nat nat.O __)
       (logic.refl nat.nat nat.O)
       (nat.minus nat.O nat.O)
       (nat.minus_O_n nat.O))
    (auto:(cts.Term cts.box nat.nat) =>
     nat.sym_eq_minus
       (nat.S auto)
       (y:(cts.Term
             cts.box
             (cts.prod'
                cts.box
                cts.box
                cts.box
                nat.nat
                (x0:(cts.Term cts.box nat.nat) => nat.nat))) =>
        logic.eq nat.nat (nat.S auto) (y nat.O))
       (nat.sym_eq_filter_nat_type_S
          (cts.prod cts.box cts.box cts.box cts.I nat.nat (x:(cts.Term cts.box nat.nat) => nat.nat))
          nat.minus_body
          auto
          (y:(cts.Term
                cts.box
                (cts.prod'
                   cts.box
                   cts.box
                   cts.box
                   nat.nat
                   (x:(cts.Term cts.box nat.nat) => nat.nat))) =>
           logic.eq nat.nat (nat.S auto) (y nat.O))
          (nat.sym_eq_minus_body_S
             auto
             (y:(cts.Term
                   cts.box
                   (cts.prod'
                      cts.box
                      cts.box
                      cts.box
                      nat.nat
                      (x0:(cts.Term cts.box nat.nat) => nat.nat))) =>
              logic.eq nat.nat (nat.S auto) (y nat.O))
             (nat.sym_eq_match_nat_type_O
                nat.nat
                (nat.S auto)
                (q:(cts.Term cts.box nat.nat) => nat.minus auto q)
                (y:(cts.Term cts.box nat.nat) => logic.eq nat.nat (nat.S auto) y)
                (logic.refl nat.nat (nat.S auto))))))
    n.

def minus_n_n :
  cts.Term
    cts.star
    (cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       nat.nat
       (x:(cts.Term cts.box nat.nat) => logic.eq nat.nat nat.O (nat.minus x x)))
  :=
  n:(cts.Term cts.box nat.nat) =>
  nat.nat_ind
    (_x_365:(cts.Term cts.box nat.nat) => logic.eq nat.nat nat.O (nat.minus _x_365 _x_365))
    (logic.rewrite_l
       nat.nat
       nat.O
       (__:(cts.Term cts.box nat.nat) => logic.eq nat.nat nat.O __)
       (logic.refl nat.nat nat.O)
       (nat.minus nat.O nat.O)
       (nat.minus_O_n nat.O))
    (x_366:(cts.Term cts.box nat.nat) =>
     _x_368:(cts.Term cts.star (logic.eq nat.nat nat.O (nat.minus x_366 x_366))) =>
     logic.rewrite_r
       nat.nat
       (nat.minus x_366 x_366)
       (__:(cts.Term cts.box nat.nat) => logic.eq nat.nat nat.O __)
       (logic.rewrite_l
          nat.nat
          nat.O
          (__:(cts.Term cts.box nat.nat) => logic.eq nat.nat nat.O __)
          (logic.refl nat.nat nat.O)
          (nat.minus x_366 x_366)
          _x_368)
       (nat.minus (nat.S x_366) (nat.S x_366))
       (nat.minus_S_S x_366 x_366))
    n.

def eq_minus_S_pred :
  cts.Term
    cts.star
    (cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       nat.nat
       (x:(cts.Term cts.box nat.nat) =>
        cts.prod
          cts.box
          cts.star
          cts.star
          cts.I
          nat.nat
          (x0:(cts.Term cts.box nat.nat) =>
           logic.eq nat.nat (nat.minus x (nat.S x0)) (nat.pred (nat.minus x x0)))))
  :=
  nat.nat_elim2
    (__:(cts.Term cts.box nat.nat) =>
     _0:(cts.Term cts.box nat.nat) =>
     logic.eq nat.nat (nat.minus __ (nat.S _0)) (nat.pred (nat.minus __ _0)))
    (_n:(cts.Term cts.box nat.nat) =>
     nat.sym_eq_minus
       nat.O
       (y:(cts.Term
             cts.box
             (cts.prod'
                cts.box
                cts.box
                cts.box
                nat.nat
                (x0:(cts.Term cts.box nat.nat) => nat.nat))) =>
        logic.eq nat.nat (nat.minus nat.O (nat.S _n)) (nat.pred (y _n)))
       (nat.sym_eq_minus
          nat.O
          (y:(cts.Term
                cts.box
                (cts.prod'
                   cts.box
                   cts.box
                   cts.box
                   nat.nat
                   (x0:(cts.Term cts.box nat.nat) => nat.nat))) =>
           logic.eq
             nat.nat
             (y (nat.S _n))
             (nat.pred
                (nat.filter_nat_type
                   (cts.prod
                      cts.box
                      cts.box
                      cts.box
                      cts.I
                      nat.nat
                      (x:(cts.Term cts.box nat.nat) => nat.nat))
                   nat.minus_body
                   nat.O
                   _n)))
          (nat.sym_eq_filter_nat_type_O
             (cts.prod
                cts.box
                cts.box
                cts.box
                cts.I
                nat.nat
                (x:(cts.Term cts.box nat.nat) => nat.nat))
             nat.minus_body
             (y:(cts.Term
                   cts.box
                   (cts.prod'
                      cts.box
                      cts.box
                      cts.box
                      nat.nat
                      (x:(cts.Term cts.box nat.nat) => nat.nat))) =>
              logic.eq
                nat.nat
                (y (nat.S _n))
                (nat.pred
                   (nat.filter_nat_type
                      (cts.prod
                         cts.box
                         cts.box
                         cts.box
                         cts.I
                         nat.nat
                         (x:(cts.Term cts.box nat.nat) => nat.nat))
                      nat.minus_body
                      nat.O
                      _n)))
             (nat.sym_eq_filter_nat_type_O
                (cts.prod
                   cts.box
                   cts.box
                   cts.box
                   cts.I
                   nat.nat
                   (x:(cts.Term cts.box nat.nat) => nat.nat))
                nat.minus_body
                (y:(cts.Term
                      cts.box
                      (cts.prod'
                         cts.box
                         cts.box
                         cts.box
                         nat.nat
                         (x:(cts.Term cts.box nat.nat) => nat.nat))) =>
                 logic.eq nat.nat (nat.minus_body nat.O (nat.S _n)) (nat.pred (y _n)))
                (nat.sym_eq_minus_body_O
                   (y:(cts.Term
                         cts.box
                         (cts.prod'
                            cts.box
                            cts.box
                            cts.box
                            nat.nat
                            (x:(cts.Term cts.box nat.nat) => nat.nat))) =>
                    logic.eq nat.nat (nat.minus_body nat.O (nat.S _n)) (nat.pred (y _n)))
                   (nat.sym_eq_minus_body_O
                      (y:(cts.Term
                            cts.box
                            (cts.prod'
                               cts.box
                               cts.box
                               cts.box
                               nat.nat
                               (x:(cts.Term cts.box nat.nat) => nat.nat))) =>
                       logic.eq
                         nat.nat
                         (y (nat.S _n))
                         (nat.match_nat_type
                            nat.nat
                            nat.O
                            (p:(cts.Term cts.box nat.nat) => p)
                            nat.O))
                      (nat.sym_eq_match_nat_type_O
                         nat.nat
                         nat.O
                         (p:(cts.Term cts.box nat.nat) => p)
                         (y:(cts.Term cts.box nat.nat) => logic.eq nat.nat nat.O y)
                         (logic.refl nat.nat nat.O))))))))
    (n:(cts.Term cts.box nat.nat) =>
     nat.sym_eq_minus
       (nat.S n)
       (y:(cts.Term
             cts.box
             (cts.prod'
                cts.box
                cts.box
                cts.box
                nat.nat
                (x0:(cts.Term cts.box nat.nat) => nat.nat))) =>
        logic.eq nat.nat (nat.minus (nat.S n) (nat.S nat.O)) (nat.pred (y nat.O)))
       (nat.sym_eq_minus
          (nat.S n)
          (y:(cts.Term
                cts.box
                (cts.prod'
                   cts.box
                   cts.box
                   cts.box
                   nat.nat
                   (x0:(cts.Term cts.box nat.nat) => nat.nat))) =>
           logic.eq
             nat.nat
             (y (nat.S nat.O))
             (nat.pred
                (nat.filter_nat_type
                   (cts.prod
                      cts.box
                      cts.box
                      cts.box
                      cts.I
                      nat.nat
                      (x:(cts.Term cts.box nat.nat) => nat.nat))
                   nat.minus_body
                   (nat.S n)
                   nat.O)))
          (nat.sym_eq_filter_nat_type_S
             (cts.prod
                cts.box
                cts.box
                cts.box
                cts.I
                nat.nat
                (x:(cts.Term cts.box nat.nat) => nat.nat))
             nat.minus_body
             n
             (y:(cts.Term
                   cts.box
                   (cts.prod'
                      cts.box
                      cts.box
                      cts.box
                      nat.nat
                      (x:(cts.Term cts.box nat.nat) => nat.nat))) =>
              logic.eq
                nat.nat
                (y (nat.S nat.O))
                (nat.pred
                   (nat.filter_nat_type
                      (cts.prod
                         cts.box
                         cts.box
                         cts.box
                         cts.I
                         nat.nat
                         (x:(cts.Term cts.box nat.nat) => nat.nat))
                      nat.minus_body
                      (nat.S n)
                      nat.O)))
             (nat.sym_eq_filter_nat_type_S
                (cts.prod
                   cts.box
                   cts.box
                   cts.box
                   cts.I
                   nat.nat
                   (x:(cts.Term cts.box nat.nat) => nat.nat))
                nat.minus_body
                n
                (y:(cts.Term
                      cts.box
                      (cts.prod'
                         cts.box
                         cts.box
                         cts.box
                         nat.nat
                         (x:(cts.Term cts.box nat.nat) => nat.nat))) =>
                 logic.eq nat.nat (nat.minus_body (nat.S n) (nat.S nat.O)) (nat.pred (y nat.O)))
                (nat.sym_eq_minus_body_S
                   n
                   (y:(cts.Term
                         cts.box
                         (cts.prod'
                            cts.box
                            cts.box
                            cts.box
                            nat.nat
                            (x0:(cts.Term cts.box nat.nat) => nat.nat))) =>
                    logic.eq
                      nat.nat
                      (nat.minus_body (nat.S n) (nat.S nat.O))
                      (nat.pred (y nat.O)))
                   (nat.sym_eq_minus_body_S
                      n
                      (y:(cts.Term
                            cts.box
                            (cts.prod'
                               cts.box
                               cts.box
                               cts.box
                               nat.nat
                               (x0:(cts.Term cts.box nat.nat) => nat.nat))) =>
                       logic.eq
                         nat.nat
                         (y (nat.S nat.O))
                         (nat.pred
                            (nat.match_nat_type
                               nat.nat
                               (nat.S n)
                               (q:(cts.Term cts.box nat.nat) => nat.minus n q)
                               nat.O)))
                      (nat.sym_eq_match_nat_type_S
                         nat.nat
                         (nat.S n)
                         (q:(cts.Term cts.box nat.nat) => nat.minus n q)
                         nat.O
                         (y:(cts.Term cts.box nat.nat) =>
                          logic.eq
                            nat.nat
                            y
                            (nat.match_nat_type
                               nat.nat
                               nat.O
                               (p:(cts.Term cts.box nat.nat) => p)
                               (nat.match_nat_type
                                  nat.nat
                                  (nat.S n)
                                  (q:(cts.Term cts.box nat.nat) => nat.minus n q)
                                  nat.O)))
                         (nat.sym_eq_match_nat_type_O
                            nat.nat
                            (nat.S n)
                            (q:(cts.Term cts.box nat.nat) => nat.minus n q)
                            (y:(cts.Term cts.box nat.nat) =>
                             logic.eq
                               nat.nat
                               (nat.minus n nat.O)
                               (nat.match_nat_type
                                  nat.nat
                                  nat.O
                                  (p:(cts.Term cts.box nat.nat) => p)
                                  y))
                            (nat.sym_eq_match_nat_type_S
                               nat.nat
                               nat.O
                               (q:(cts.Term cts.box nat.nat) => q)
                               n
                               (y:(cts.Term cts.box nat.nat) =>
                                logic.eq nat.nat (nat.minus n nat.O) y)
                               (logic.rewrite_l
                                  nat.nat
                                  n
                                  (__:(cts.Term cts.box nat.nat) => logic.eq nat.nat __ n)
                                  (logic.refl nat.nat n)
                                  (nat.minus n nat.O)
                                  (nat.minus_n_O n)))))))))))
    (n:(cts.Term cts.box nat.nat) =>
     m:(cts.Term cts.box nat.nat) =>
     nat.sym_eq_minus
       (nat.S n)
       (y:(cts.Term
             cts.box
             (cts.prod'
                cts.box
                cts.box
                cts.box
                nat.nat
                (x0:(cts.Term cts.box nat.nat) => nat.nat))) =>
        cts.prod
          cts.star
          cts.star
          cts.star
          cts.I
          (logic.eq nat.nat (nat.minus n (nat.S m)) (nat.pred (nat.minus n m)))
          (x:(cts.Term
                cts.star
                (logic.eq nat.nat (nat.minus n (nat.S m)) (nat.pred (nat.minus n m)))) =>
           logic.eq nat.nat (nat.minus (nat.S n) (nat.S (nat.S m))) (nat.pred (y (nat.S m)))))
       (nat.sym_eq_minus
          (nat.S n)
          (y:(cts.Term
                cts.box
                (cts.prod'
                   cts.box
                   cts.box
                   cts.box
                   nat.nat
                   (x0:(cts.Term cts.box nat.nat) => nat.nat))) =>
           cts.prod
             cts.star
             cts.star
             cts.star
             cts.I
             (logic.eq nat.nat (nat.minus n (nat.S m)) (nat.pred (nat.minus n m)))
             (x:(cts.Term
                   cts.star
                   (logic.eq nat.nat (nat.minus n (nat.S m)) (nat.pred (nat.minus n m)))) =>
              logic.eq
                nat.nat
                (y (nat.S (nat.S m)))
                (nat.pred
                   (nat.filter_nat_type
                      (cts.prod
                         cts.box
                         cts.box
                         cts.box
                         cts.I
                         nat.nat
                         (x0:(cts.Term cts.box nat.nat) => nat.nat))
                      nat.minus_body
                      (nat.S n)
                      (nat.S m)))))
          (nat.sym_eq_filter_nat_type_S
             (cts.prod
                cts.box
                cts.box
                cts.box
                cts.I
                nat.nat
                (x:(cts.Term cts.box nat.nat) => nat.nat))
             nat.minus_body
             n
             (y:(cts.Term
                   cts.box
                   (cts.prod'
                      cts.box
                      cts.box
                      cts.box
                      nat.nat
                      (x:(cts.Term cts.box nat.nat) => nat.nat))) =>
              cts.prod
                cts.star
                cts.star
                cts.star
                cts.I
                (logic.eq nat.nat (nat.minus n (nat.S m)) (nat.pred (nat.minus n m)))
                (x:(cts.Term
                      cts.star
                      (logic.eq nat.nat (nat.minus n (nat.S m)) (nat.pred (nat.minus n m)))) =>
                 logic.eq
                   nat.nat
                   (y (nat.S (nat.S m)))
                   (nat.pred
                      (nat.filter_nat_type
                         (cts.prod
                            cts.box
                            cts.box
                            cts.box
                            cts.I
                            nat.nat
                            (x0:(cts.Term cts.box nat.nat) => nat.nat))
                         nat.minus_body
                         (nat.S n)
                         (nat.S m)))))
             (nat.sym_eq_filter_nat_type_S
                (cts.prod
                   cts.box
                   cts.box
                   cts.box
                   cts.I
                   nat.nat
                   (x:(cts.Term cts.box nat.nat) => nat.nat))
                nat.minus_body
                n
                (y:(cts.Term
                      cts.box
                      (cts.prod'
                         cts.box
                         cts.box
                         cts.box
                         nat.nat
                         (x:(cts.Term cts.box nat.nat) => nat.nat))) =>
                 cts.prod
                   cts.star
                   cts.star
                   cts.star
                   cts.I
                   (logic.eq nat.nat (nat.minus n (nat.S m)) (nat.pred (nat.minus n m)))
                   (x:(cts.Term
                         cts.star
                         (logic.eq
                            nat.nat
                            (nat.minus n (nat.S m))
                            (nat.pred (nat.minus n m)))) =>
                    logic.eq
                      nat.nat
                      (nat.minus_body (nat.S n) (nat.S (nat.S m)))
                      (nat.pred (y (nat.S m)))))
                (nat.sym_eq_minus_body_S
                   n
                   (y:(cts.Term
                         cts.box
                         (cts.prod'
                            cts.box
                            cts.box
                            cts.box
                            nat.nat
                            (x0:(cts.Term cts.box nat.nat) => nat.nat))) =>
                    cts.prod
                      cts.star
                      cts.star
                      cts.star
                      cts.I
                      (logic.eq nat.nat (nat.minus n (nat.S m)) (nat.pred (nat.minus n m)))
                      (x:(cts.Term
                            cts.star
                            (logic.eq
                               nat.nat
                               (nat.minus n (nat.S m))
                               (nat.pred (nat.minus n m)))) =>
                       logic.eq
                         nat.nat
                         (nat.minus_body (nat.S n) (nat.S (nat.S m)))
                         (nat.pred (y (nat.S m)))))
                   (nat.sym_eq_minus_body_S
                      n
                      (y:(cts.Term
                            cts.box
                            (cts.prod'
                               cts.box
                               cts.box
                               cts.box
                               nat.nat
                               (x0:(cts.Term cts.box nat.nat) => nat.nat))) =>
                       cts.prod
                         cts.star
                         cts.star
                         cts.star
                         cts.I
                         (logic.eq nat.nat (nat.minus n (nat.S m)) (nat.pred (nat.minus n m)))
                         (x:(cts.Term
                               cts.star
                               (logic.eq
                                  nat.nat
                                  (nat.minus n (nat.S m))
                                  (nat.pred (nat.minus n m)))) =>
                          logic.eq
                            nat.nat
                            (y (nat.S (nat.S m)))
                            (nat.pred
                               (nat.match_nat_type
                                  nat.nat
                                  (nat.S n)
                                  (q:(cts.Term cts.box nat.nat) => nat.minus n q)
                                  (nat.S m)))))
                      (nat.sym_eq_match_nat_type_S
                         nat.nat
                         (nat.S n)
                         (q:(cts.Term cts.box nat.nat) => nat.minus n q)
                         (nat.S m)
                         (y:(cts.Term cts.box nat.nat) =>
                          cts.prod
                            cts.star
                            cts.star
                            cts.star
                            cts.I
                            (logic.eq
                               nat.nat
                               (nat.minus n (nat.S m))
                               (nat.pred (nat.minus n m)))
                            (x:(cts.Term
                                  cts.star
                                  (logic.eq
                                     nat.nat
                                     (nat.minus n (nat.S m))
                                     (nat.pred (nat.minus n m)))) =>
                             logic.eq
                               nat.nat
                               y
                               (nat.match_nat_type
                                  nat.nat
                                  nat.O
                                  (p:(cts.Term cts.box nat.nat) => p)
                                  (nat.match_nat_type
                                     nat.nat
                                     (nat.S n)
                                     (q:(cts.Term cts.box nat.nat) => nat.minus n q)
                                     (nat.S m)))))
                         (nat.sym_eq_match_nat_type_S
                            nat.nat
                            (nat.S n)
                            (q:(cts.Term cts.box nat.nat) => nat.minus n q)
                            m
                            (y:(cts.Term cts.box nat.nat) =>
                             cts.prod
                               cts.star
                               cts.star
                               cts.star
                               cts.I
                               (logic.eq
                                  nat.nat
                                  (nat.minus n (nat.S m))
                                  (nat.pred (nat.minus n m)))
                               (x:(cts.Term
                                     cts.star
                                     (logic.eq
                                        nat.nat
                                        (nat.minus n (nat.S m))
                                        (nat.pred (nat.minus n m)))) =>
                                logic.eq
                                  nat.nat
                                  (nat.minus n (nat.S m))
                                  (nat.match_nat_type
                                     nat.nat
                                     nat.O
                                     (p:(cts.Term cts.box nat.nat) => p)
                                     y)))
                            (auto:(cts.Term
                                     cts.star
                                     (logic.eq
                                        nat.nat
                                        (nat.minus n (nat.S m))
                                        (nat.pred (nat.minus n m)))) =>
                             logic.rewrite_r
                               nat.nat
                               (nat.match_nat_type
                                  nat.nat
                                  nat.O
                                  (p:(cts.Term cts.box nat.nat) => p)
                                  (nat.minus n m))
                               (__:(cts.Term cts.box nat.nat) =>
                                logic.eq
                                  nat.nat
                                  __
                                  (nat.match_nat_type
                                     nat.nat
                                     nat.O
                                     (p:(cts.Term cts.box nat.nat) => p)
                                     (nat.minus n m)))
                               (logic.refl
                                  nat.nat
                                  (nat.match_nat_type
                                     nat.nat
                                     nat.O
                                     (p:(cts.Term cts.box nat.nat) => p)
                                     (nat.minus n m)))
                               (nat.minus n (nat.S m))
                               auto))))))))).

def not_eq_S :
  cts.Term
    cts.star
    (cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       nat.nat
       (x:(cts.Term cts.box nat.nat) =>
        cts.prod
          cts.box
          cts.star
          cts.star
          cts.I
          nat.nat
          (x0:(cts.Term cts.box nat.nat) =>
           cts.prod
             cts.star
             cts.star
             cts.star
             cts.I
             (connectives.Not (logic.eq nat.nat x x0))
             (x1:(cts.Term cts.star (connectives.Not (logic.eq nat.nat x x0))) =>
              connectives.Not (logic.eq nat.nat (nat.S x) (nat.S x0))))))
  :=
  n:(cts.Term cts.box nat.nat) =>
  m:(cts.Term cts.box nat.nat) =>
  auto:(cts.Term cts.star (connectives.Not (logic.eq nat.nat n m))) =>
  logic.not_to_not
    (logic.eq nat.nat (nat.S n) (nat.S m))
    (logic.eq nat.nat n m)
    (auto':(cts.Term cts.star (logic.eq nat.nat (nat.S n) (nat.S m))) =>
     logic.rewrite_l
       nat.nat
       m
       (__:(cts.Term cts.box nat.nat) => logic.eq nat.nat __ m)
       (logic.refl nat.nat m)
       n
       (logic.rewrite_r
          nat.nat
          (nat.pred (nat.S n))
          (__:(cts.Term cts.box nat.nat) => logic.eq nat.nat m __)
          (logic.rewrite_r
             nat.nat
             (nat.S m)
             (__:(cts.Term cts.box nat.nat) => logic.eq nat.nat m (nat.pred __))
             (nat.pred_Sn m)
             (nat.S n)
             auto')
          n
          (nat.pred_Sn n)))
    auto.

def not_eq_O_S :
  cts.Term
    cts.star
    (cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       nat.nat
       (x:(cts.Term cts.box nat.nat) => connectives.Not (logic.eq nat.nat nat.O (nat.S x))))
  :=
  n:(cts.Term cts.box nat.nat) =>
  connectives.nmk
    (logic.eq nat.nat nat.O (nat.S n))
    (eqOS:(cts.Term cts.star (logic.eq nat.nat nat.O (nat.S n))) =>
     nat.eq_match_nat_type_O
       (cts.univ cts.star cts.box cts.I)
       connectives.False
       (p:(cts.Term cts.box nat.nat) => connectives.True)
       (y:(cts.Term cts.box (cts.univ' cts.star cts.box)) => y)
       (logic.eq_ind_r
          nat.nat
          (nat.S n)
          (x:(cts.Term cts.box nat.nat) => nat.not_zero x)
          (nat.sym_eq_match_nat_type_S
             (cts.univ cts.star cts.box cts.I)
             connectives.False
             (p:(cts.Term cts.box nat.nat) => connectives.True)
             n
             (y:(cts.Term cts.box (cts.univ' cts.star cts.box)) => y)
             connectives.I)
          nat.O
          eqOS)).

def lt_to_not_zero :
  cts.Term
    cts.star
    (cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       nat.nat
       (x:(cts.Term cts.box nat.nat) =>
        cts.prod
          cts.box
          cts.star
          cts.star
          cts.I
          nat.nat
          (x0:(cts.Term cts.box nat.nat) =>
           cts.prod
             cts.star
             cts.star
             cts.star
             cts.I
             (nat.lt x x0)
             (x1:(cts.Term cts.star (nat.lt x x0)) => nat.not_zero x0))))
  :=
  n:(cts.Term cts.box nat.nat) =>
  m:(cts.Term cts.box nat.nat) =>
  Hlt:(cts.Term cts.star (nat.le (nat.S n) m)) =>
  nat.le_ind
    (nat.S n)
    (x_417:(cts.Term cts.box nat.nat) => nat.not_zero x_417)
    (nat.sym_eq_match_nat_type_S
       (cts.univ cts.star cts.box cts.I)
       connectives.False
       (p:(cts.Term cts.box nat.nat) => connectives.True)
       n
       (y:(cts.Term cts.box (cts.univ' cts.star cts.box)) => y)
       connectives.I)
    (m0:(cts.Term cts.box nat.nat) =>
     _x_419:(cts.Term cts.star (nat.le (nat.S n) m0)) =>
     _x_421:(cts.Term
               cts.star
               (nat.match_nat_type
                  (cts.univ cts.star cts.box cts.I)
                  connectives.False
                  (p:(cts.Term cts.box nat.nat) => connectives.True)
                  m0)) =>
     nat.sym_eq_match_nat_type_S
       (cts.univ cts.star cts.box cts.I)
       connectives.False
       (p:(cts.Term cts.box nat.nat) => connectives.True)
       m0
       (y:(cts.Term cts.box (cts.univ' cts.star cts.box)) => y)
       connectives.I)
    m
    Hlt.

def le_S_S :
  cts.Term
    cts.star
    (cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       nat.nat
       (x:(cts.Term cts.box nat.nat) =>
        cts.prod
          cts.box
          cts.star
          cts.star
          cts.I
          nat.nat
          (x0:(cts.Term cts.box nat.nat) =>
           cts.prod
             cts.star
             cts.star
             cts.star
             cts.I
             (nat.le x x0)
             (x1:(cts.Term cts.star (nat.le x x0)) => nat.le (nat.S x) (nat.S x0)))))
  :=
  n:(cts.Term cts.box nat.nat) =>
  m:(cts.Term cts.box nat.nat) =>
  lenm:(cts.Term cts.star (nat.le n m)) =>
  nat.le_ind
    n
    (x_417:(cts.Term cts.box nat.nat) => nat.le (nat.S n) (nat.S x_417))
    (nat.le_n (nat.S n))
    (m0:(cts.Term cts.box nat.nat) =>
     _x_419:(cts.Term cts.star (nat.le n m0)) =>
     _x_421:(cts.Term cts.star (nat.le (nat.S n) (nat.S m0))) => nat.le_S (nat.S n) (nat.S m0) _x_421)
    m
    lenm.

def le_O_n :
  cts.Term
    cts.star
    (cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       nat.nat
       (x:(cts.Term cts.box nat.nat) => nat.le nat.O x))
  :=
  n:(cts.Term cts.box nat.nat) =>
  nat.nat_ind
    (nat.le nat.O)
    (nat.le_n nat.O)
    (x_366:(cts.Term cts.box nat.nat) =>
     _x_368:(cts.Term cts.star (nat.le nat.O x_366)) => nat.le_S nat.O x_366 _x_368)
    n.

def le_n_Sn :
  cts.Term
    cts.star
    (cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       nat.nat
       (x:(cts.Term cts.box nat.nat) => nat.le x (nat.S x)))
  :=
  n:(cts.Term cts.box nat.nat) => nat.le_S n n (nat.le_n n).

def transitive_le :
  cts.Term cts.star (relations.transitive nat.nat nat.le)
  :=
  a:(cts.Term cts.box nat.nat) =>
  b:(cts.Term cts.box nat.nat) =>
  c:(cts.Term cts.box nat.nat) =>
  leab:(cts.Term cts.star (nat.le a b)) =>
  lebc:(cts.Term cts.star (nat.le b c)) =>
  nat.le_ind
    b
    (x_417:(cts.Term cts.box nat.nat) => nat.le a x_417)
    leab
    (m:(cts.Term cts.box nat.nat) =>
     _x_419:(cts.Term cts.star (nat.le b m)) =>
     _x_421:(cts.Term cts.star (nat.le a m)) => nat.le_S a m _x_421)
    c
    lebc.

def le_pred_n :
  cts.Term
    cts.star
    (cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       nat.nat
       (x:(cts.Term cts.box nat.nat) => nat.le (nat.pred x) x))
  :=
  n:(cts.Term cts.box nat.nat) =>
  nat.nat_ind
    (_x_365:(cts.Term cts.box nat.nat) => nat.le (nat.pred _x_365) _x_365)
    (nat.eq_match_nat_type_O
       nat.nat
       nat.O
       (p:(cts.Term cts.box nat.nat) => p)
       (y:(cts.Term cts.box nat.nat) =>
        nat.le (nat.match_nat_type nat.nat nat.O (p:(cts.Term cts.box nat.nat) => p) nat.O) y)
       (nat.le_n (nat.pred nat.O)))
    (x_366:(cts.Term cts.box nat.nat) =>
     _x_368:(cts.Term cts.star (nat.le (nat.pred x_366) x_366)) =>
     nat.eq_match_nat_type_S
       nat.nat
       nat.O
       (p:(cts.Term cts.box nat.nat) => p)
       x_366
       (y:(cts.Term cts.box nat.nat) => nat.le (nat.pred (nat.S x_366)) (nat.S y))
       (nat.le_n_Sn (nat.pred (nat.S x_366))))
    n.

def monotonic_pred :
  cts.Term cts.star (relations.monotonic nat.nat nat.le nat.pred)
  :=
  n:(cts.Term cts.box nat.nat) =>
  m:(cts.Term cts.box nat.nat) =>
  lenm:(cts.Term cts.star (nat.le n m)) =>
  nat.le_ind
    n
    (x_417:(cts.Term cts.box nat.nat) => nat.le (nat.pred n) (nat.pred x_417))
    (nat.le_n (nat.pred n))
    (m0:(cts.Term cts.box nat.nat) =>
     _x_419:(cts.Term cts.star (nat.le n m0)) =>
     _x_421:(cts.Term cts.star (nat.le (nat.pred n) (nat.pred m0))) =>
     nat.transitive_le
       (nat.pred n)
       n
       (nat.pred (nat.S m0))
       (nat.le_pred_n n)
       (nat.sym_eq_match_nat_type_S
          nat.nat
          nat.O
          (p:(cts.Term cts.box nat.nat) => p)
          m0
          (y:(cts.Term cts.box nat.nat) => nat.le n y)
          _x_419))
    m
    lenm.

def le_S_S_to_le :
  cts.Term
    cts.star
    (cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       nat.nat
       (x:(cts.Term cts.box nat.nat) =>
        cts.prod
          cts.box
          cts.star
          cts.star
          cts.I
          nat.nat
          (x0:(cts.Term cts.box nat.nat) =>
           cts.prod
             cts.star
             cts.star
             cts.star
             cts.I
             (nat.le (nat.S x) (nat.S x0))
             (x1:(cts.Term cts.star (nat.le (nat.S x) (nat.S x0))) => nat.le x x0))))
  :=
  n:(cts.Term cts.box nat.nat) =>
  m:(cts.Term cts.box nat.nat) =>
  auto:(cts.Term cts.star (nat.le (nat.S n) (nat.S m))) =>
  nat.eq_match_nat_type_S
    nat.nat
    nat.O
    (p:(cts.Term cts.box nat.nat) => p)
    m
    (y:(cts.Term cts.box nat.nat) => nat.le n y)
    (nat.eq_match_nat_type_S
       nat.nat
       nat.O
       (p:(cts.Term cts.box nat.nat) => p)
       n
       (y:(cts.Term cts.box nat.nat) =>
        nat.le y (nat.match_nat_type nat.nat nat.O (p:(cts.Term cts.box nat.nat) => p) (nat.S m)))
       (nat.monotonic_pred (nat.S n) (nat.S m) auto)).

def monotonic_le_plus_r :
  cts.Term
    cts.star
    (cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       nat.nat
       (x:(cts.Term cts.box nat.nat) =>
        relations.monotonic nat.nat nat.le (m:(cts.Term cts.box nat.nat) => nat.plus x m)))
  :=
  n:(cts.Term cts.box nat.nat) =>
  a:(cts.Term cts.box nat.nat) =>
  b:(cts.Term cts.box nat.nat) =>
  nat.nat_ind
    (_x_365:(cts.Term cts.box nat.nat) =>
     cts.prod
       cts.star
       cts.star
       cts.star
       cts.I
       (nat.le a b)
       (x:(cts.Term cts.star (nat.le a b)) => nat.le (nat.plus _x_365 a) (nat.plus _x_365 b)))
    (nat.sym_eq_plus
       nat.O
       (y:(cts.Term
             cts.box
             (cts.prod'
                cts.box
                cts.box
                cts.box
                nat.nat
                (x0:(cts.Term cts.box nat.nat) => nat.nat))) =>
        cts.prod
          cts.star
          cts.star
          cts.star
          cts.I
          (nat.le a b)
          (x:(cts.Term cts.star (nat.le a b)) => nat.le (nat.plus nat.O a) (y b)))
       (nat.sym_eq_plus
          nat.O
          (y:(cts.Term
                cts.box
                (cts.prod'
                   cts.box
                   cts.box
                   cts.box
                   nat.nat
                   (x0:(cts.Term cts.box nat.nat) => nat.nat))) =>
           cts.prod
             cts.star
             cts.star
             cts.star
             cts.I
             (nat.le a b)
             (x:(cts.Term cts.star (nat.le a b)) =>
              nat.le
                (y a)
                (nat.filter_nat_type
                   (cts.prod
                      cts.box
                      cts.box
                      cts.box
                      cts.I
                      nat.nat
                      (x0:(cts.Term cts.box nat.nat) => nat.nat))
                   nat.plus_body
                   nat.O
                   b)))
          (nat.sym_eq_filter_nat_type_O
             (cts.prod
                cts.box
                cts.box
                cts.box
                cts.I
                nat.nat
                (x:(cts.Term cts.box nat.nat) => nat.nat))
             nat.plus_body
             (y:(cts.Term
                   cts.box
                   (cts.prod'
                      cts.box
                      cts.box
                      cts.box
                      nat.nat
                      (x:(cts.Term cts.box nat.nat) => nat.nat))) =>
              cts.prod
                cts.star
                cts.star
                cts.star
                cts.I
                (nat.le a b)
                (x:(cts.Term cts.star (nat.le a b)) =>
                 nat.le
                   (y a)
                   (nat.filter_nat_type
                      (cts.prod
                         cts.box
                         cts.box
                         cts.box
                         cts.I
                         nat.nat
                         (x0:(cts.Term cts.box nat.nat) => nat.nat))
                      nat.plus_body
                      nat.O
                      b)))
             (nat.sym_eq_filter_nat_type_O
                (cts.prod
                   cts.box
                   cts.box
                   cts.box
                   cts.I
                   nat.nat
                   (x:(cts.Term cts.box nat.nat) => nat.nat))
                nat.plus_body
                (y:(cts.Term
                      cts.box
                      (cts.prod'
                         cts.box
                         cts.box
                         cts.box
                         nat.nat
                         (x:(cts.Term cts.box nat.nat) => nat.nat))) =>
                 cts.prod
                   cts.star
                   cts.star
                   cts.star
                   cts.I
                   (nat.le a b)
                   (x:(cts.Term cts.star (nat.le a b)) => nat.le (nat.plus_body nat.O a) (y b)))
                (nat.sym_eq_plus_body_O
                   (y:(cts.Term
                         cts.box
                         (cts.prod'
                            cts.box
                            cts.box
                            cts.box
                            nat.nat
                            (x:(cts.Term cts.box nat.nat) => nat.nat))) =>
                    cts.prod
                      cts.star
                      cts.star
                      cts.star
                      cts.I
                      (nat.le a b)
                      (x:(cts.Term cts.star (nat.le a b)) =>
                       nat.le (nat.plus_body nat.O a) (y b)))
                   (nat.sym_eq_plus_body_O
                      (y:(cts.Term
                            cts.box
                            (cts.prod'
                               cts.box
                               cts.box
                               cts.box
                               nat.nat
                               (x:(cts.Term cts.box nat.nat) => nat.nat))) =>
                       cts.prod
                         cts.star
                         cts.star
                         cts.star
                         cts.I
                         (nat.le a b)
                         (x:(cts.Term cts.star (nat.le a b)) => nat.le (y a) b))
                      (auto:(cts.Term cts.star (nat.le a b)) => auto)))))))
    (m:(cts.Term cts.box nat.nat) =>
     H:(cts.Term
          cts.star
          (cts.prod'
             cts.star
             cts.star
             cts.star
             (nat.le a b)
             (x:(cts.Term cts.star (nat.le a b)) => nat.le (nat.plus m a) (nat.plus m b)))) =>
     leab:(cts.Term cts.star (nat.le a b)) =>
     nat.sym_eq_plus
       (nat.S m)
       (y:(cts.Term
             cts.box
             (cts.prod'
                cts.box
                cts.box
                cts.box
                nat.nat
                (x0:(cts.Term cts.box nat.nat) => nat.nat))) =>
        nat.le (nat.plus (nat.S m) a) (y b))
       (nat.sym_eq_plus
          (nat.S m)
          (y:(cts.Term
                cts.box
                (cts.prod'
                   cts.box
                   cts.box
                   cts.box
                   nat.nat
                   (x0:(cts.Term cts.box nat.nat) => nat.nat))) =>
           nat.le
             (y a)
             (nat.filter_nat_type
                (cts.prod
                   cts.box
                   cts.box
                   cts.box
                   cts.I
                   nat.nat
                   (x:(cts.Term cts.box nat.nat) => nat.nat))
                nat.plus_body
                (nat.S m)
                b))
          (nat.sym_eq_filter_nat_type_S
             (cts.prod
                cts.box
                cts.box
                cts.box
                cts.I
                nat.nat
                (x:(cts.Term cts.box nat.nat) => nat.nat))
             nat.plus_body
             m
             (y:(cts.Term
                   cts.box
                   (cts.prod'
                      cts.box
                      cts.box
                      cts.box
                      nat.nat
                      (x:(cts.Term cts.box nat.nat) => nat.nat))) =>
              nat.le
                (y a)
                (nat.filter_nat_type
                   (cts.prod
                      cts.box
                      cts.box
                      cts.box
                      cts.I
                      nat.nat
                      (x:(cts.Term cts.box nat.nat) => nat.nat))
                   nat.plus_body
                   (nat.S m)
                   b))
             (nat.sym_eq_filter_nat_type_S
                (cts.prod
                   cts.box
                   cts.box
                   cts.box
                   cts.I
                   nat.nat
                   (x:(cts.Term cts.box nat.nat) => nat.nat))
                nat.plus_body
                m
                (y:(cts.Term
                      cts.box
                      (cts.prod'
                         cts.box
                         cts.box
                         cts.box
                         nat.nat
                         (x:(cts.Term cts.box nat.nat) => nat.nat))) =>
                 nat.le (nat.plus_body (nat.S m) a) (y b))
                (nat.sym_eq_plus_body_S
                   m
                   (y:(cts.Term
                         cts.box
                         (cts.prod'
                            cts.box
                            cts.box
                            cts.box
                            nat.nat
                            (x0:(cts.Term cts.box nat.nat) => nat.nat))) =>
                    nat.le (nat.plus_body (nat.S m) a) (y b))
                   (nat.sym_eq_plus_body_S
                      m
                      (y:(cts.Term
                            cts.box
                            (cts.prod'
                               cts.box
                               cts.box
                               cts.box
                               nat.nat
                               (x0:(cts.Term cts.box nat.nat) => nat.nat))) =>
                       nat.le (y a) (nat.S (nat.plus m b)))
                      (nat.le_S_S (nat.plus m a) (nat.plus m b) (H leab))))))))
    n.

def monotonic_le_plus_l :
  cts.Term
    cts.star
    (cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       nat.nat
       (x:(cts.Term cts.box nat.nat) =>
        relations.monotonic nat.nat nat.le (n:(cts.Term cts.box nat.nat) => nat.plus n x)))
  :=
  m:(cts.Term cts.box nat.nat) =>
  x:(cts.Term cts.box nat.nat) =>
  y:(cts.Term cts.box nat.nat) =>
  auto:(cts.Term cts.star (nat.le x y)) =>
  logic.eq_coerc
    (nat.le (nat.plus m x) (nat.plus m y))
    (nat.le (nat.plus x m) (nat.plus y m))
    (nat.monotonic_le_plus_r m x y auto)
    (logic.rewrite_r
       nat.nat
       (nat.plus m x)
       (__:(cts.Term cts.box nat.nat) =>
        logic.eq
          (cts.univ cts.star cts.box cts.I)
          (nat.le (nat.plus m x) (nat.plus m y))
          (nat.le __ (nat.plus y m)))
       (logic.rewrite_r
          nat.nat
          (nat.plus m y)
          (__:(cts.Term cts.box nat.nat) =>
           logic.eq
             (cts.univ cts.star cts.box cts.I)
             (nat.le (nat.plus m x) (nat.plus m y))
             (nat.le (nat.plus m x) __))
          (logic.refl (cts.univ cts.star cts.box cts.I) (nat.le (nat.plus m x) (nat.plus m y)))
          (nat.plus y m)
          (nat.commutative_plus y m))
       (nat.plus x m)
       (nat.commutative_plus x m)).

def le_plus :
  cts.Term
    cts.star
    (cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       nat.nat
       (x:(cts.Term cts.box nat.nat) =>
        cts.prod
          cts.box
          cts.star
          cts.star
          cts.I
          nat.nat
          (x0:(cts.Term cts.box nat.nat) =>
           cts.prod
             cts.box
             cts.star
             cts.star
             cts.I
             nat.nat
             (x1:(cts.Term cts.box nat.nat) =>
              cts.prod
                cts.box
                cts.star
                cts.star
                cts.I
                nat.nat
                (x2:(cts.Term cts.box nat.nat) =>
                 cts.prod
                   cts.star
                   cts.star
                   cts.star
                   cts.I
                   (nat.le x x0)
                   (x3:(cts.Term cts.star (nat.le x x0)) =>
                    cts.prod
                      cts.star
                      cts.star
                      cts.star
                      cts.I
                      (nat.le x1 x2)
                      (x4:(cts.Term cts.star (nat.le x1 x2)) =>
                       nat.le (nat.plus x x1) (nat.plus x0 x2))))))))
  :=
  n1:(cts.Term cts.box nat.nat) =>
  n2:(cts.Term cts.box nat.nat) =>
  m1:(cts.Term cts.box nat.nat) =>
  m2:(cts.Term cts.box nat.nat) =>
  len:(cts.Term cts.star (nat.le n1 n2)) =>
  lem:(cts.Term cts.star (nat.le m1 m2)) =>
  nat.transitive_le
    (nat.plus n1 m1)
    (nat.plus n1 m2)
    (nat.plus n2 m2)
    (nat.monotonic_le_plus_r n1 m1 m2 lem)
    (nat.monotonic_le_plus_l m2 n1 n2 len).

def le_plus_n :
  cts.Term
    cts.star
    (cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       nat.nat
       (x:(cts.Term cts.box nat.nat) =>
        cts.prod
          cts.box
          cts.star
          cts.star
          cts.I
          nat.nat
          (x0:(cts.Term cts.box nat.nat) => nat.le x0 (nat.plus x x0))))
  :=
  n:(cts.Term cts.box nat.nat) =>
  m:(cts.Term cts.box nat.nat) =>
  logic.eq_coerc
    (nat.le (nat.plus nat.O m) (nat.plus n m))
    (nat.le m (nat.plus n m))
    (nat.monotonic_le_plus_l m nat.O n (nat.le_O_n n))
    (logic.rewrite_l
       nat.nat
       m
       (__:(cts.Term cts.box nat.nat) =>
        logic.eq
          (cts.univ cts.star cts.box cts.I)
          (nat.le __ (nat.plus n m))
          (nat.le m (nat.plus n m)))
       (logic.refl (cts.univ cts.star cts.box cts.I) (nat.le m (nat.plus n m)))
       (nat.plus nat.O m)
       (nat.plus_O_n m)).

def le_plus_b :
  cts.Term
    cts.star
    (cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       nat.nat
       (x:(cts.Term cts.box nat.nat) =>
        cts.prod
          cts.box
          cts.star
          cts.star
          cts.I
          nat.nat
          (x0:(cts.Term cts.box nat.nat) =>
           cts.prod
             cts.box
             cts.star
             cts.star
             cts.I
             nat.nat
             (x1:(cts.Term cts.box nat.nat) =>
              cts.prod
                cts.star
                cts.star
                cts.star
                cts.I
                (nat.le (nat.plus x0 x) x1)
                (x2:(cts.Term cts.star (nat.le (nat.plus x0 x) x1)) => nat.le x0 x1)))))
  :=
  b:(cts.Term cts.box nat.nat) =>
  n:(cts.Term cts.box nat.nat) =>
  m:(cts.Term cts.box nat.nat) =>
  auto:(cts.Term cts.star (nat.le (nat.plus n b) m)) =>
  nat.transitive_le
    n
    (nat.plus n b)
    m
    (logic.eq_coerc
       (nat.le n (nat.plus b n))
       (nat.le n (nat.plus n b))
       (nat.le_plus_n b n)
       (logic.rewrite_r
          nat.nat
          (nat.plus b n)
          (__:(cts.Term cts.box nat.nat) =>
           logic.eq (cts.univ cts.star cts.box cts.I) (nat.le n (nat.plus b n)) (nat.le n __))
          (logic.refl (cts.univ cts.star cts.box cts.I) (nat.le n (nat.plus b n)))
          (nat.plus n b)
          (nat.commutative_plus n b)))
    auto.

def le_plus_n_r :
  cts.Term
    cts.star
    (cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       nat.nat
       (x:(cts.Term cts.box nat.nat) =>
        cts.prod
          cts.box
          cts.star
          cts.star
          cts.I
          nat.nat
          (x0:(cts.Term cts.box nat.nat) => nat.le x0 (nat.plus x0 x))))
  :=
  n:(cts.Term cts.box nat.nat) =>
  m:(cts.Term cts.box nat.nat) =>
  logic.eq_coerc
    (nat.le m (nat.plus n m))
    (nat.le m (nat.plus m n))
    (nat.le_plus_n n m)
    (logic.rewrite_r
       nat.nat
       (nat.plus n m)
       (__:(cts.Term cts.box nat.nat) =>
        logic.eq (cts.univ cts.star cts.box cts.I) (nat.le m (nat.plus n m)) (nat.le m __))
       (logic.refl (cts.univ cts.star cts.box cts.I) (nat.le m (nat.plus n m)))
       (nat.plus m n)
       (nat.commutative_plus m n)).

def le_plus_to_le :
  cts.Term
    cts.star
    (cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       nat.nat
       (x:(cts.Term cts.box nat.nat) =>
        cts.prod
          cts.box
          cts.star
          cts.star
          cts.I
          nat.nat
          (x0:(cts.Term cts.box nat.nat) =>
           cts.prod
             cts.box
             cts.star
             cts.star
             cts.I
             nat.nat
             (x1:(cts.Term cts.box nat.nat) =>
              cts.prod
                cts.star
                cts.star
                cts.star
                cts.I
                (nat.le (nat.plus x x0) (nat.plus x x1))
                (x2:(cts.Term cts.star (nat.le (nat.plus x x0) (nat.plus x x1))) => nat.le x0 x1)))))
  :=
  a:(cts.Term cts.box nat.nat) =>
  nat.nat_ind
    (_x_365:(cts.Term cts.box nat.nat) =>
     cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       nat.nat
       (x:(cts.Term cts.box nat.nat) =>
        cts.prod
          cts.box
          cts.star
          cts.star
          cts.I
          nat.nat
          (x0:(cts.Term cts.box nat.nat) =>
           cts.prod
             cts.star
             cts.star
             cts.star
             cts.I
             (nat.le (nat.plus _x_365 x) (nat.plus _x_365 x0))
             (x1:(cts.Term cts.star (nat.le (nat.plus _x_365 x) (nat.plus _x_365 x0))) =>
              nat.le x x0))))
    (n:(cts.Term cts.box nat.nat) =>
     m:(cts.Term cts.box nat.nat) =>
     nat.sym_eq_plus
       nat.O
       (y:(cts.Term
             cts.box
             (cts.prod'
                cts.box
                cts.box
                cts.box
                nat.nat
                (x0:(cts.Term cts.box nat.nat) => nat.nat))) =>
        cts.prod
          cts.star
          cts.star
          cts.star
          cts.I
          (nat.le (nat.plus nat.O n) (y m))
          (x:(cts.Term cts.star (nat.le (nat.plus nat.O n) (y m))) => nat.le n m))
       (nat.sym_eq_plus
          nat.O
          (y:(cts.Term
                cts.box
                (cts.prod'
                   cts.box
                   cts.box
                   cts.box
                   nat.nat
                   (x0:(cts.Term cts.box nat.nat) => nat.nat))) =>
           cts.prod
             cts.star
             cts.star
             cts.star
             cts.I
             (nat.le
                (y n)
                (nat.filter_nat_type
                   (cts.prod
                      cts.box
                      cts.box
                      cts.box
                      cts.I
                      nat.nat
                      (x:(cts.Term cts.box nat.nat) => nat.nat))
                   nat.plus_body
                   nat.O
                   m))
             (x:(cts.Term
                   cts.star
                   (nat.le
                      (y n)
                      (nat.filter_nat_type
                         (cts.prod
                            cts.box
                            cts.box
                            cts.box
                            cts.I
                            nat.nat
                            (x:(cts.Term cts.box nat.nat) => nat.nat))
                         nat.plus_body
                         nat.O
                         m))) =>
              nat.le n m))
          (nat.sym_eq_filter_nat_type_O
             (cts.prod
                cts.box
                cts.box
                cts.box
                cts.I
                nat.nat
                (x:(cts.Term cts.box nat.nat) => nat.nat))
             nat.plus_body
             (y:(cts.Term
                   cts.box
                   (cts.prod'
                      cts.box
                      cts.box
                      cts.box
                      nat.nat
                      (x:(cts.Term cts.box nat.nat) => nat.nat))) =>
              cts.prod
                cts.star
                cts.star
                cts.star
                cts.I
                (nat.le
                   (y n)
                   (nat.filter_nat_type
                      (cts.prod
                         cts.box
                         cts.box
                         cts.box
                         cts.I
                         nat.nat
                         (x:(cts.Term cts.box nat.nat) => nat.nat))
                      nat.plus_body
                      nat.O
                      m))
                (x:(cts.Term
                      cts.star
                      (nat.le
                         (y n)
                         (nat.filter_nat_type
                            (cts.prod
                               cts.box
                               cts.box
                               cts.box
                               cts.I
                               nat.nat
                               (x:(cts.Term cts.box nat.nat) => nat.nat))
                            nat.plus_body
                            nat.O
                            m))) =>
                 nat.le n m))
             (nat.sym_eq_filter_nat_type_O
                (cts.prod
                   cts.box
                   cts.box
                   cts.box
                   cts.I
                   nat.nat
                   (x:(cts.Term cts.box nat.nat) => nat.nat))
                nat.plus_body
                (y:(cts.Term
                      cts.box
                      (cts.prod'
                         cts.box
                         cts.box
                         cts.box
                         nat.nat
                         (x:(cts.Term cts.box nat.nat) => nat.nat))) =>
                 cts.prod
                   cts.star
                   cts.star
                   cts.star
                   cts.I
                   (nat.le (nat.plus_body nat.O n) (y m))
                   (x:(cts.Term cts.star (nat.le (nat.plus_body nat.O n) (y m))) => nat.le n m))
                (nat.sym_eq_plus_body_O
                   (y:(cts.Term
                         cts.box
                         (cts.prod'
                            cts.box
                            cts.box
                            cts.box
                            nat.nat
                            (x:(cts.Term cts.box nat.nat) => nat.nat))) =>
                    cts.prod
                      cts.star
                      cts.star
                      cts.star
                      cts.I
                      (nat.le (nat.plus_body nat.O n) (y m))
                      (x:(cts.Term cts.star (nat.le (nat.plus_body nat.O n) (y m))) =>
                       nat.le n m))
                   (nat.sym_eq_plus_body_O
                      (y:(cts.Term
                            cts.box
                            (cts.prod'
                               cts.box
                               cts.box
                               cts.box
                               nat.nat
                               (x:(cts.Term cts.box nat.nat) => nat.nat))) =>
                       cts.prod
                         cts.star
                         cts.star
                         cts.star
                         cts.I
                         (nat.le (y n) m)
                         (x:(cts.Term cts.star (nat.le (y n) m)) => nat.le n m))
                      (auto:(cts.Term
                               cts.star
                               (nat.le ((m0:(cts.Term cts.box nat.nat) => m0) n) m)) =>
                       auto)))))))
    (x_366:(cts.Term cts.box nat.nat) =>
     _x_368:(cts.Term
               cts.star
               (cts.prod'
                  cts.box
                  cts.star
                  cts.star
                  nat.nat
                  (x:(cts.Term cts.box nat.nat) =>
                   cts.prod
                     cts.box
                     cts.star
                     cts.star
                     cts.I
                     nat.nat
                     (x0:(cts.Term cts.box nat.nat) =>
                      cts.prod
                        cts.star
                        cts.star
                        cts.star
                        cts.I
                        (nat.le (nat.plus x_366 x) (nat.plus x_366 x0))
                        (x1:(cts.Term
                               cts.star
                               (nat.le (nat.plus x_366 x) (nat.plus x_366 x0))) =>
                         nat.le x x0))))) =>
     n:(cts.Term cts.box nat.nat) =>
     m:(cts.Term cts.box nat.nat) =>
     nat.sym_eq_plus
       (nat.S x_366)
       (y:(cts.Term
             cts.box
             (cts.prod'
                cts.box
                cts.box
                cts.box
                nat.nat
                (x0:(cts.Term cts.box nat.nat) => nat.nat))) =>
        cts.prod
          cts.star
          cts.star
          cts.star
          cts.I
          (nat.le (nat.plus (nat.S x_366) n) (y m))
          (x:(cts.Term cts.star (nat.le (nat.plus (nat.S x_366) n) (y m))) => nat.le n m))
       (nat.sym_eq_plus
          (nat.S x_366)
          (y:(cts.Term
                cts.box
                (cts.prod'
                   cts.box
                   cts.box
                   cts.box
                   nat.nat
                   (x0:(cts.Term cts.box nat.nat) => nat.nat))) =>
           cts.prod
             cts.star
             cts.star
             cts.star
             cts.I
             (nat.le
                (y n)
                (nat.filter_nat_type
                   (cts.prod
                      cts.box
                      cts.box
                      cts.box
                      cts.I
                      nat.nat
                      (x:(cts.Term cts.box nat.nat) => nat.nat))
                   nat.plus_body
                   (nat.S x_366)
                   m))
             (x:(cts.Term
                   cts.star
                   (nat.le
                      (y n)
                      (nat.filter_nat_type
                         (cts.prod
                            cts.box
                            cts.box
                            cts.box
                            cts.I
                            nat.nat
                            (x:(cts.Term cts.box nat.nat) => nat.nat))
                         nat.plus_body
                         (nat.S x_366)
                         m))) =>
              nat.le n m))
          (nat.sym_eq_filter_nat_type_S
             (cts.prod
                cts.box
                cts.box
                cts.box
                cts.I
                nat.nat
                (x:(cts.Term cts.box nat.nat) => nat.nat))
             nat.plus_body
             x_366
             (y:(cts.Term
                   cts.box
                   (cts.prod'
                      cts.box
                      cts.box
                      cts.box
                      nat.nat
                      (x:(cts.Term cts.box nat.nat) => nat.nat))) =>
              cts.prod
                cts.star
                cts.star
                cts.star
                cts.I
                (nat.le
                   (y n)
                   (nat.filter_nat_type
                      (cts.prod
                         cts.box
                         cts.box
                         cts.box
                         cts.I
                         nat.nat
                         (x:(cts.Term cts.box nat.nat) => nat.nat))
                      nat.plus_body
                      (nat.S x_366)
                      m))
                (x:(cts.Term
                      cts.star
                      (nat.le
                         (y n)
                         (nat.filter_nat_type
                            (cts.prod
                               cts.box
                               cts.box
                               cts.box
                               cts.I
                               nat.nat
                               (x:(cts.Term cts.box nat.nat) => nat.nat))
                            nat.plus_body
                            (nat.S x_366)
                            m))) =>
                 nat.le n m))
             (nat.sym_eq_filter_nat_type_S
                (cts.prod
                   cts.box
                   cts.box
                   cts.box
                   cts.I
                   nat.nat
                   (x:(cts.Term cts.box nat.nat) => nat.nat))
                nat.plus_body
                x_366
                (y:(cts.Term
                      cts.box
                      (cts.prod'
                         cts.box
                         cts.box
                         cts.box
                         nat.nat
                         (x:(cts.Term cts.box nat.nat) => nat.nat))) =>
                 cts.prod
                   cts.star
                   cts.star
                   cts.star
                   cts.I
                   (nat.le (nat.plus_body (nat.S x_366) n) (y m))
                   (x:(cts.Term cts.star (nat.le (nat.plus_body (nat.S x_366) n) (y m))) =>
                    nat.le n m))
                (nat.sym_eq_plus_body_S
                   x_366
                   (y:(cts.Term
                         cts.box
                         (cts.prod'
                            cts.box
                            cts.box
                            cts.box
                            nat.nat
                            (x0:(cts.Term cts.box nat.nat) => nat.nat))) =>
                    cts.prod
                      cts.star
                      cts.star
                      cts.star
                      cts.I
                      (nat.le (nat.plus_body (nat.S x_366) n) (y m))
                      (x:(cts.Term cts.star (nat.le (nat.plus_body (nat.S x_366) n) (y m))) =>
                       nat.le n m))
                   (nat.sym_eq_plus_body_S
                      x_366
                      (y:(cts.Term
                            cts.box
                            (cts.prod'
                               cts.box
                               cts.box
                               cts.box
                               nat.nat
                               (x0:(cts.Term cts.box nat.nat) => nat.nat))) =>
                       cts.prod
                         cts.star
                         cts.star
                         cts.star
                         cts.I
                         (nat.le (y n) (nat.S (nat.plus x_366 m)))
                         (x:(cts.Term cts.star (nat.le (y n) (nat.S (nat.plus x_366 m)))) =>
                          nat.le n m))
                      (auto:(cts.Term
                               cts.star
                               (nat.le
                                  ((m0:(cts.Term cts.box nat.nat) =>
                                    nat.S (nat.plus x_366 m0))
                                     n)
                                  (nat.S (nat.plus x_366 m)))) =>
                       logic.eq_coerc
                         (nat.le (nat.pred (nat.S n)) (nat.pred (nat.S m)))
                         (nat.le n m)
                         (nat.monotonic_pred
                            (nat.S n)
                            (nat.S m)
                            (_x_368
                               (nat.S n)
                               (nat.S m)
                               (logic.eq_coerc
                                  (nat.le
                                     (nat.S (nat.plus x_366 n))
                                     (nat.S (nat.plus x_366 m)))
                                  (nat.le
                                     (nat.plus x_366 (nat.S n))
                                     (nat.plus x_366 (nat.S m)))
                                  auto
                                  (logic.rewrite_r
                                     nat.nat
                                     (nat.plus x_366 (nat.S n))
                                     (__:(cts.Term cts.box nat.nat) =>
                                      logic.eq
                                        (cts.univ cts.star cts.box cts.I)
                                        (nat.le __ (nat.S (nat.plus x_366 m)))
                                        (nat.le
                                           (nat.plus x_366 (nat.S n))
                                           (nat.plus x_366 (nat.S m))))
                                     (logic.rewrite_r
                                        nat.nat
                                        (nat.plus x_366 (nat.S m))
                                        (__:(cts.Term cts.box nat.nat) =>
                                         logic.eq
                                           (cts.univ cts.star cts.box cts.I)
                                           (nat.le (nat.plus x_366 (nat.S n)) __)
                                           (nat.le
                                              (nat.plus x_366 (nat.S n))
                                              (nat.plus x_366 (nat.S m))))
                                        (logic.refl
                                           (cts.univ cts.star cts.box cts.I)
                                           (nat.le
                                              (nat.plus x_366 (nat.S n))
                                              (nat.plus x_366 (nat.S m))))
                                        (nat.S (nat.plus x_366 m))
                                        (nat.plus_n_Sm x_366 m))
                                     (nat.S (nat.plus x_366 n))
                                     (nat.plus_n_Sm x_366 n)))))
                         (logic.rewrite_l
                            nat.nat
                            n
                            (__:(cts.Term cts.box nat.nat) =>
                             logic.eq
                               (cts.univ cts.star cts.box cts.I)
                               (nat.le __ (nat.pred (nat.S m)))
                               (nat.le n m))
                            (logic.rewrite_l
                               nat.nat
                               m
                               (__:(cts.Term cts.box nat.nat) =>
                                logic.eq
                                  (cts.univ cts.star cts.box cts.I)
                                  (nat.le n __)
                                  (nat.le n m))
                               (logic.refl (cts.univ cts.star cts.box cts.I) (nat.le n m))
                               (nat.pred (nat.S m))
                               (nat.pred_Sn m))
                            (nat.pred (nat.S n))
                            (nat.pred_Sn n)))))))))
    a.

def le_plus_to_le_r :
  cts.Term
    cts.star
    (cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       nat.nat
       (x:(cts.Term cts.box nat.nat) =>
        cts.prod
          cts.box
          cts.star
          cts.star
          cts.I
          nat.nat
          (x0:(cts.Term cts.box nat.nat) =>
           cts.prod
             cts.box
             cts.star
             cts.star
             cts.I
             nat.nat
             (x1:(cts.Term cts.box nat.nat) =>
              cts.prod
                cts.star
                cts.star
                cts.star
                cts.I
                (nat.le (nat.plus x0 x) (nat.plus x1 x))
                (x2:(cts.Term cts.star (nat.le (nat.plus x0 x) (nat.plus x1 x))) => nat.le x0 x1)))))
  :=
  a:(cts.Term cts.box nat.nat) =>
  n:(cts.Term cts.box nat.nat) =>
  m:(cts.Term cts.box nat.nat) =>
  auto:(cts.Term cts.star (nat.le (nat.plus n a) (nat.plus m a))) =>
  nat.le_plus_to_le
    a
    n
    m
    (logic.eq_coerc
       (nat.le (nat.plus n a) (nat.plus m a))
       (nat.le (nat.plus a n) (nat.plus a m))
       auto
       (logic.rewrite_r
          nat.nat
          (nat.plus a n)
          (__:(cts.Term cts.box nat.nat) =>
           logic.eq
             (cts.univ cts.star cts.box cts.I)
             (nat.le __ (nat.plus m a))
             (nat.le (nat.plus a n) (nat.plus a m)))
          (logic.rewrite_r
             nat.nat
             (nat.plus a m)
             (__:(cts.Term cts.box nat.nat) =>
              logic.eq
                (cts.univ cts.star cts.box cts.I)
                (nat.le (nat.plus a n) __)
                (nat.le (nat.plus a n) (nat.plus a m)))
             (logic.refl (cts.univ cts.star cts.box cts.I) (nat.le (nat.plus a n) (nat.plus a m)))
             (nat.plus m a)
             (nat.commutative_plus m a))
          (nat.plus n a)
          (nat.commutative_plus n a))).

def monotonic_le_times_r :
  cts.Term
    cts.star
    (cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       nat.nat
       (x:(cts.Term cts.box nat.nat) =>
        relations.monotonic nat.nat nat.le (m:(cts.Term cts.box nat.nat) => nat.times x m)))
  :=
  n:(cts.Term cts.box nat.nat) =>
  x:(cts.Term cts.box nat.nat) =>
  y:(cts.Term cts.box nat.nat) =>
  lexy:(cts.Term cts.star (nat.le x y)) =>
  nat.nat_ind
    (_x_365:(cts.Term cts.box nat.nat) => nat.le (nat.times _x_365 x) (nat.times _x_365 y))
    (nat.sym_eq_times
       nat.O
       (z:(cts.Term
             cts.box
             (cts.prod'
                cts.box
                cts.box
                cts.box
                nat.nat
                (x0:(cts.Term cts.box nat.nat) => nat.nat))) =>
        nat.le (nat.times nat.O x) (z y))
       (nat.sym_eq_times
          nat.O
          (z:(cts.Term
                cts.box
                (cts.prod'
                   cts.box
                   cts.box
                   cts.box
                   nat.nat
                   (x0:(cts.Term cts.box nat.nat) => nat.nat))) =>
           nat.le
             (z x)
             (nat.filter_nat_type
                (cts.prod
                   cts.box
                   cts.box
                   cts.box
                   cts.I
                   nat.nat
                   (x0:(cts.Term cts.box nat.nat) => nat.nat))
                nat.times_body
                nat.O
                y))
          (nat.sym_eq_filter_nat_type_O
             (cts.prod
                cts.box
                cts.box
                cts.box
                cts.I
                nat.nat
                (x0:(cts.Term cts.box nat.nat) => nat.nat))
             nat.times_body
             (z:(cts.Term
                   cts.box
                   (cts.prod'
                      cts.box
                      cts.box
                      cts.box
                      nat.nat
                      (x0:(cts.Term cts.box nat.nat) => nat.nat))) =>
              nat.le
                (z x)
                (nat.filter_nat_type
                   (cts.prod
                      cts.box
                      cts.box
                      cts.box
                      cts.I
                      nat.nat
                      (x0:(cts.Term cts.box nat.nat) => nat.nat))
                   nat.times_body
                   nat.O
                   y))
             (nat.sym_eq_filter_nat_type_O
                (cts.prod
                   cts.box
                   cts.box
                   cts.box
                   cts.I
                   nat.nat
                   (x0:(cts.Term cts.box nat.nat) => nat.nat))
                nat.times_body
                (z:(cts.Term
                      cts.box
                      (cts.prod'
                         cts.box
                         cts.box
                         cts.box
                         nat.nat
                         (x0:(cts.Term cts.box nat.nat) => nat.nat))) =>
                 nat.le (nat.times_body nat.O x) (z y))
                (nat.sym_eq_times_body_O
                   (z:(cts.Term
                         cts.box
                         (cts.prod'
                            cts.box
                            cts.box
                            cts.box
                            nat.nat
                            (x0:(cts.Term cts.box nat.nat) => nat.nat))) =>
                    nat.le (nat.times_body nat.O x) (z y))
                   (nat.sym_eq_times_body_O
                      (z:(cts.Term
                            cts.box
                            (cts.prod'
                               cts.box
                               cts.box
                               cts.box
                               nat.nat
                               (x0:(cts.Term cts.box nat.nat) => nat.nat))) =>
                       nat.le (z x) nat.O)
                      (nat.le_O_n nat.O)))))))
    (a:(cts.Term cts.box nat.nat) =>
     lea:(cts.Term cts.star (nat.le (nat.times a x) (nat.times a y))) =>
     nat.sym_eq_times
       (nat.S a)
       (z:(cts.Term
             cts.box
             (cts.prod'
                cts.box
                cts.box
                cts.box
                nat.nat
                (x0:(cts.Term cts.box nat.nat) => nat.nat))) =>
        nat.le (nat.times (nat.S a) x) (z y))
       (nat.sym_eq_times
          (nat.S a)
          (z:(cts.Term
                cts.box
                (cts.prod'
                   cts.box
                   cts.box
                   cts.box
                   nat.nat
                   (x0:(cts.Term cts.box nat.nat) => nat.nat))) =>
           nat.le
             (z x)
             (nat.filter_nat_type
                (cts.prod
                   cts.box
                   cts.box
                   cts.box
                   cts.I
                   nat.nat
                   (x0:(cts.Term cts.box nat.nat) => nat.nat))
                nat.times_body
                (nat.S a)
                y))
          (nat.sym_eq_filter_nat_type_S
             (cts.prod
                cts.box
                cts.box
                cts.box
                cts.I
                nat.nat
                (x0:(cts.Term cts.box nat.nat) => nat.nat))
             nat.times_body
             a
             (z:(cts.Term
                   cts.box
                   (cts.prod'
                      cts.box
                      cts.box
                      cts.box
                      nat.nat
                      (x0:(cts.Term cts.box nat.nat) => nat.nat))) =>
              nat.le
                (z x)
                (nat.filter_nat_type
                   (cts.prod
                      cts.box
                      cts.box
                      cts.box
                      cts.I
                      nat.nat
                      (x0:(cts.Term cts.box nat.nat) => nat.nat))
                   nat.times_body
                   (nat.S a)
                   y))
             (nat.sym_eq_filter_nat_type_S
                (cts.prod
                   cts.box
                   cts.box
                   cts.box
                   cts.I
                   nat.nat
                   (x0:(cts.Term cts.box nat.nat) => nat.nat))
                nat.times_body
                a
                (z:(cts.Term
                      cts.box
                      (cts.prod'
                         cts.box
                         cts.box
                         cts.box
                         nat.nat
                         (x0:(cts.Term cts.box nat.nat) => nat.nat))) =>
                 nat.le (nat.times_body (nat.S a) x) (z y))
                (nat.sym_eq_times_body_S
                   a
                   (z:(cts.Term
                         cts.box
                         (cts.prod'
                            cts.box
                            cts.box
                            cts.box
                            nat.nat
                            (x0:(cts.Term cts.box nat.nat) => nat.nat))) =>
                    nat.le (nat.times_body (nat.S a) x) (z y))
                   (nat.sym_eq_times_body_S
                      a
                      (z:(cts.Term
                            cts.box
                            (cts.prod'
                               cts.box
                               cts.box
                               cts.box
                               nat.nat
                               (x0:(cts.Term cts.box nat.nat) => nat.nat))) =>
                       nat.le (z x) (nat.plus y (nat.times a y)))
                      (nat.le_plus x y (nat.times a x) (nat.times a y) lexy lea)))))))
    n.

def le_times :
  cts.Term
    cts.star
    (cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       nat.nat
       (x:(cts.Term cts.box nat.nat) =>
        cts.prod
          cts.box
          cts.star
          cts.star
          cts.I
          nat.nat
          (x0:(cts.Term cts.box nat.nat) =>
           cts.prod
             cts.box
             cts.star
             cts.star
             cts.I
             nat.nat
             (x1:(cts.Term cts.box nat.nat) =>
              cts.prod
                cts.box
                cts.star
                cts.star
                cts.I
                nat.nat
                (x2:(cts.Term cts.box nat.nat) =>
                 cts.prod
                   cts.star
                   cts.star
                   cts.star
                   cts.I
                   (nat.le x x0)
                   (x3:(cts.Term cts.star (nat.le x x0)) =>
                    cts.prod
                      cts.star
                      cts.star
                      cts.star
                      cts.I
                      (nat.le x1 x2)
                      (x4:(cts.Term cts.star (nat.le x1 x2)) =>
                       nat.le (nat.times x x1) (nat.times x0 x2))))))))
  :=
  n1:(cts.Term cts.box nat.nat) =>
  n2:(cts.Term cts.box nat.nat) =>
  m1:(cts.Term cts.box nat.nat) =>
  m2:(cts.Term cts.box nat.nat) =>
  len:(cts.Term cts.star (nat.le n1 n2)) =>
  lem:(cts.Term cts.star (nat.le m1 m2)) =>
  nat.transitive_le
    (nat.times n1 m1)
    (nat.times n1 m2)
    (nat.times n2 m2)
    (nat.monotonic_le_times_r n1 m1 m2 lem)
    (logic.eq_coerc
       (nat.le (nat.times m2 n1) (nat.times m2 n2))
       (nat.le (nat.times n1 m2) (nat.times n2 m2))
       (nat.monotonic_le_times_r m2 n1 n2 len)
       (logic.rewrite_r
          nat.nat
          (nat.times n1 m2)
          (__:(cts.Term cts.box nat.nat) =>
           logic.eq
             (cts.univ cts.star cts.box cts.I)
             (nat.le __ (nat.times m2 n2))
             (nat.le (nat.times n1 m2) (nat.times n2 m2)))
          (logic.rewrite_r
             nat.nat
             (nat.times n2 m2)
             (__:(cts.Term cts.box nat.nat) =>
              logic.eq
                (cts.univ cts.star cts.box cts.I)
                (nat.le (nat.times n1 m2) __)
                (nat.le (nat.times n1 m2) (nat.times n2 m2)))
             (logic.refl
                (cts.univ cts.star cts.box cts.I)
                (nat.le (nat.times n1 m2) (nat.times n2 m2)))
             (nat.times m2 n2)
             (nat.commutative_times m2 n2))
          (nat.times m2 n1)
          (nat.commutative_times m2 n1))).

def le_plus_minus_m_m :
  cts.Term
    cts.star
    (cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       nat.nat
       (x:(cts.Term cts.box nat.nat) =>
        cts.prod
          cts.box
          cts.star
          cts.star
          cts.I
          nat.nat
          (x0:(cts.Term cts.box nat.nat) => nat.le x (nat.plus (nat.minus x x0) x0))))
  :=
  n:(cts.Term cts.box nat.nat) =>
  nat.nat_ind
    (_x_365:(cts.Term cts.box nat.nat) =>
     cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       nat.nat
       (x:(cts.Term cts.box nat.nat) => nat.le _x_365 (nat.plus (nat.minus _x_365 x) x)))
    (nat.sym_eq_minus
       nat.O
       (y:(cts.Term
             cts.box
             (cts.prod'
                cts.box
                cts.box
                cts.box
                nat.nat
                (x0:(cts.Term cts.box nat.nat) => nat.nat))) =>
        cts.prod
          cts.box
          cts.star
          cts.star
          cts.I
          nat.nat
          (x:(cts.Term cts.box nat.nat) => nat.le nat.O (nat.plus (y x) x)))
       (nat.sym_eq_filter_nat_type_O
          (cts.prod cts.box cts.box cts.box cts.I nat.nat (x:(cts.Term cts.box nat.nat) => nat.nat))
          nat.minus_body
          (y:(cts.Term
                cts.box
                (cts.prod'
                   cts.box
                   cts.box
                   cts.box
                   nat.nat
                   (x:(cts.Term cts.box nat.nat) => nat.nat))) =>
           cts.prod
             cts.box
             cts.star
             cts.star
             cts.I
             nat.nat
             (x:(cts.Term cts.box nat.nat) => nat.le nat.O (nat.plus (y x) x)))
          (nat.sym_eq_minus_body_O
             (y:(cts.Term
                   cts.box
                   (cts.prod'
                      cts.box
                      cts.box
                      cts.box
                      nat.nat
                      (x:(cts.Term cts.box nat.nat) => nat.nat))) =>
              cts.prod
                cts.box
                cts.star
                cts.star
                cts.I
                nat.nat
                (x:(cts.Term cts.box nat.nat) => nat.le nat.O (nat.plus (y x) x)))
             (m:(cts.Term cts.box nat.nat) => nat.le_plus_n_r m nat.O))))
    (a:(cts.Term cts.box nat.nat) =>
     Hind:(cts.Term
             cts.star
             (cts.prod'
                cts.box
                cts.star
                cts.star
                nat.nat
                (x:(cts.Term cts.box nat.nat) => nat.le a (nat.plus (nat.minus a x) x)))) =>
     m:(cts.Term cts.box nat.nat) =>
     nat.match_nat_prop
       (__:(cts.Term cts.box nat.nat) => nat.le (nat.S a) (nat.plus (nat.minus (nat.S a) __) __))
       (nat.sym_eq_minus
          (nat.S a)
          (y:(cts.Term
                cts.box
                (cts.prod'
                   cts.box
                   cts.box
                   cts.box
                   nat.nat
                   (x0:(cts.Term cts.box nat.nat) => nat.nat))) =>
           nat.le (nat.S a) (nat.plus (y nat.O) nat.O))
          (nat.sym_eq_filter_nat_type_S
             (cts.prod
                cts.box
                cts.box
                cts.box
                cts.I
                nat.nat
                (x:(cts.Term cts.box nat.nat) => nat.nat))
             nat.minus_body
             a
             (y:(cts.Term
                   cts.box
                   (cts.prod'
                      cts.box
                      cts.box
                      cts.box
                      nat.nat
                      (x:(cts.Term cts.box nat.nat) => nat.nat))) =>
              nat.le (nat.S a) (nat.plus (y nat.O) nat.O))
             (nat.sym_eq_minus_body_S
                a
                (y:(cts.Term
                      cts.box
                      (cts.prod'
                         cts.box
                         cts.box
                         cts.box
                         nat.nat
                         (x0:(cts.Term cts.box nat.nat) => nat.nat))) =>
                 nat.le (nat.S a) (nat.plus (y nat.O) nat.O))
                (nat.sym_eq_match_nat_type_O
                   nat.nat
                   (nat.S a)
                   (q:(cts.Term cts.box nat.nat) => nat.minus a q)
                   (y:(cts.Term cts.box nat.nat) => nat.le (nat.S a) (nat.plus y nat.O))
                   (nat.le_plus_n_r nat.O (nat.S a))))))
       (n0:(cts.Term cts.box nat.nat) =>
        nat.sym_eq_minus
          (nat.S a)
          (y:(cts.Term
                cts.box
                (cts.prod'
                   cts.box
                   cts.box
                   cts.box
                   nat.nat
                   (x0:(cts.Term cts.box nat.nat) => nat.nat))) =>
           nat.le (nat.S a) (nat.plus (y (nat.S n0)) (nat.S n0)))
          (nat.sym_eq_filter_nat_type_S
             (cts.prod
                cts.box
                cts.box
                cts.box
                cts.I
                nat.nat
                (x:(cts.Term cts.box nat.nat) => nat.nat))
             nat.minus_body
             a
             (y:(cts.Term
                   cts.box
                   (cts.prod'
                      cts.box
                      cts.box
                      cts.box
                      nat.nat
                      (x:(cts.Term cts.box nat.nat) => nat.nat))) =>
              nat.le (nat.S a) (nat.plus (y (nat.S n0)) (nat.S n0)))
             (nat.sym_eq_minus_body_S
                a
                (y:(cts.Term
                      cts.box
                      (cts.prod'
                         cts.box
                         cts.box
                         cts.box
                         nat.nat
                         (x0:(cts.Term cts.box nat.nat) => nat.nat))) =>
                 nat.le (nat.S a) (nat.plus (y (nat.S n0)) (nat.S n0)))
                (nat.sym_eq_match_nat_type_S
                   nat.nat
                   (nat.S a)
                   (q:(cts.Term cts.box nat.nat) => nat.minus a q)
                   n0
                   (y:(cts.Term cts.box nat.nat) => nat.le (nat.S a) (nat.plus y (nat.S n0)))
                   (logic.eq_coerc
                      (nat.le (nat.S a) (nat.S (nat.plus (nat.minus a n0) n0)))
                      (nat.le (nat.S a) (nat.plus (nat.minus a n0) (nat.S n0)))
                      (nat.le_S_S a (nat.plus (nat.minus a n0) n0) (Hind n0))
                      (logic.rewrite_r
                         nat.nat
                         (nat.plus (nat.minus a n0) (nat.S n0))
                         (__:(cts.Term cts.box nat.nat) =>
                          logic.eq
                            (cts.univ cts.star cts.box cts.I)
                            (nat.le (nat.S a) __)
                            (nat.le (nat.S a) (nat.plus (nat.minus a n0) (nat.S n0))))
                         (logic.refl
                            (cts.univ cts.star cts.box cts.I)
                            (nat.le (nat.S a) (nat.plus (nat.minus a n0) (nat.S n0))))
                         (nat.S (nat.plus (nat.minus a n0) n0))
                         (nat.plus_n_Sm (nat.minus a n0) n0)))))))
       m)
    n.

def le_plus_to_minus_r :
  cts.Term
    cts.star
    (cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       nat.nat
       (x:(cts.Term cts.box nat.nat) =>
        cts.prod
          cts.box
          cts.star
          cts.star
          cts.I
          nat.nat
          (x0:(cts.Term cts.box nat.nat) =>
           cts.prod
             cts.box
             cts.star
             cts.star
             cts.I
             nat.nat
             (x1:(cts.Term cts.box nat.nat) =>
              cts.prod
                cts.star
                cts.star
                cts.star
                cts.I
                (nat.le (nat.plus x x0) x1)
                (x2:(cts.Term cts.star (nat.le (nat.plus x x0) x1)) => nat.le x (nat.minus x1 x0))))))
  :=
  a:(cts.Term cts.box nat.nat) =>
  b:(cts.Term cts.box nat.nat) =>
  c:(cts.Term cts.box nat.nat) =>
  H:(cts.Term cts.star (nat.le (nat.plus a b) c)) =>
  nat.le_plus_to_le_r
    b
    a
    (nat.minus c b)
    (nat.transitive_le (nat.plus a b) c (nat.plus (nat.minus c b) b) H (nat.le_plus_minus_m_m c b)).

def lt_to_le :
  cts.Term
    cts.star
    (cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       nat.nat
       (x:(cts.Term cts.box nat.nat) =>
        cts.prod
          cts.box
          cts.star
          cts.star
          cts.I
          nat.nat
          (x0:(cts.Term cts.box nat.nat) =>
           cts.prod
             cts.star
             cts.star
             cts.star
             cts.I
             (nat.lt x x0)
             (x1:(cts.Term cts.star (nat.lt x x0)) => nat.le x x0))))
  :=
  x:(cts.Term cts.box nat.nat) =>
  y:(cts.Term cts.box nat.nat) =>
  auto:(cts.Term cts.star (nat.le (nat.S x) y)) =>
  nat.le_plus_b
    (nat.S nat.O)
    x
    y
    (logic.eq_coerc
       (nat.le (nat.S x) y)
       (nat.le (nat.plus x (nat.S nat.O)) y)
       auto
       (logic.rewrite_r
          nat.nat
          (nat.plus x (nat.S nat.O))
          (__:(cts.Term cts.box nat.nat) =>
           logic.eq
             (cts.univ cts.star cts.box cts.I)
             (nat.le __ y)
             (nat.le (nat.plus x (nat.S nat.O)) y))
          (logic.refl (cts.univ cts.star cts.box cts.I) (nat.le (nat.plus x (nat.S nat.O)) y))
          (nat.S x)
          (logic.rewrite_r
             nat.nat
             (nat.plus x nat.O)
             (__:(cts.Term cts.box nat.nat) =>
              logic.eq nat.nat (nat.S __) (nat.plus x (nat.S nat.O)))
             (nat.plus_n_Sm x nat.O)
             x
             (nat.plus_n_O x)))).

def transitive_lt :
  cts.Term cts.star (relations.transitive nat.nat nat.lt)
  :=
  a:(cts.Term cts.box nat.nat) =>
  b:(cts.Term cts.box nat.nat) =>
  c:(cts.Term cts.box nat.nat) =>
  ltab:(cts.Term cts.star (nat.le (nat.S a) b)) =>
  ltbc:(cts.Term cts.star (nat.le (nat.S b) c)) =>
  nat.le_ind
    (nat.S b)
    (x_417:(cts.Term cts.box nat.nat) => nat.lt a x_417)
    (nat.le_S (nat.S a) b ltab)
    (m:(cts.Term cts.box nat.nat) =>
     _x_419:(cts.Term cts.star (nat.le (nat.S b) m)) =>
     _x_421:(cts.Term cts.star (nat.le (nat.S a) m)) => nat.le_S (nat.S a) m _x_421)
    c
    ltbc.

def lt_to_le_to_lt :
  cts.Term
    cts.star
    (cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       nat.nat
       (x:(cts.Term cts.box nat.nat) =>
        cts.prod
          cts.box
          cts.star
          cts.star
          cts.I
          nat.nat
          (x0:(cts.Term cts.box nat.nat) =>
           cts.prod
             cts.box
             cts.star
             cts.star
             cts.I
             nat.nat
             (x1:(cts.Term cts.box nat.nat) =>
              cts.prod
                cts.star
                cts.star
                cts.star
                cts.I
                (nat.lt x x0)
                (x2:(cts.Term cts.star (nat.lt x x0)) =>
                 cts.prod
                   cts.star
                   cts.star
                   cts.star
                   cts.I
                   (nat.le x0 x1)
                   (x3:(cts.Term cts.star (nat.le x0 x1)) => nat.lt x x1))))))
  :=
  n:(cts.Term cts.box nat.nat) =>
  m:(cts.Term cts.box nat.nat) =>
  p:(cts.Term cts.box nat.nat) =>
  H:(cts.Term cts.star (nat.le (nat.S n) m)) =>
  H1:(cts.Term cts.star (nat.le m p)) =>
  nat.le_ind
    m
    (x_417:(cts.Term cts.box nat.nat) => nat.lt n x_417)
    H
    (m0:(cts.Term cts.box nat.nat) =>
     _x_419:(cts.Term cts.star (nat.le m m0)) =>
     _x_421:(cts.Term cts.star (nat.le (nat.S n) m0)) =>
     nat.transitive_lt
       n
       m0
       (nat.S m0)
       _x_421
       (logic.eq_coerc
          (nat.le (nat.S m0) (nat.plus nat.O (nat.S m0)))
          (nat.le (nat.S m0) (nat.S m0))
          (nat.le_plus_n nat.O (nat.S m0))
          (logic.rewrite_l
             nat.nat
             (nat.S m0)
             (__:(cts.Term cts.box nat.nat) =>
              logic.eq
                (cts.univ cts.star cts.box cts.I)
                (nat.le (nat.S m0) __)
                (nat.le (nat.S m0) (nat.S m0)))
             (logic.refl (cts.univ cts.star cts.box cts.I) (nat.le (nat.S m0) (nat.S m0)))
             (nat.plus nat.O (nat.S m0))
             (nat.plus_O_n (nat.S m0)))))
    p
    H1.

def le_to_lt_to_lt :
  cts.Term
    cts.star
    (cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       nat.nat
       (x:(cts.Term cts.box nat.nat) =>
        cts.prod
          cts.box
          cts.star
          cts.star
          cts.I
          nat.nat
          (x0:(cts.Term cts.box nat.nat) =>
           cts.prod
             cts.box
             cts.star
             cts.star
             cts.I
             nat.nat
             (x1:(cts.Term cts.box nat.nat) =>
              cts.prod
                cts.star
                cts.star
                cts.star
                cts.I
                (nat.le x x0)
                (x2:(cts.Term cts.star (nat.le x x0)) =>
                 cts.prod
                   cts.star
                   cts.star
                   cts.star
                   cts.I
                   (nat.lt x0 x1)
                   (x3:(cts.Term cts.star (nat.lt x0 x1)) => nat.lt x x1))))))
  :=
  n:(cts.Term cts.box nat.nat) =>
  m:(cts.Term cts.box nat.nat) =>
  p:(cts.Term cts.box nat.nat) =>
  H:(cts.Term cts.star (nat.le n m)) =>
  nat.le_ind
    n
    (x_417:(cts.Term cts.box nat.nat) =>
     cts.prod
       cts.star
       cts.star
       cts.star
       cts.I
       (nat.lt x_417 p)
       (x:(cts.Term cts.star (nat.lt x_417 p)) => nat.lt n p))
    (auto:(cts.Term cts.star (nat.le (nat.S n) p)) => auto)
    (m0:(cts.Term cts.box nat.nat) =>
     _x_419:(cts.Term cts.star (nat.le n m0)) =>
     _x_421:(cts.Term
               cts.star
               (cts.prod'
                  cts.star
                  cts.star
                  cts.star
                  (nat.le (nat.S m0) p)
                  (x:(cts.Term cts.star (nat.lt m0 p)) => nat.lt n p))) =>
     auto:(cts.Term cts.star (nat.le (nat.S (nat.S m0)) p)) =>
     _x_421
       (nat.transitive_lt
          m0
          (nat.S m0)
          p
          (logic.eq_coerc
             (nat.le (nat.S m0) (nat.plus nat.O (nat.S m0)))
             (nat.le (nat.S m0) (nat.S m0))
             (nat.le_plus_n nat.O (nat.S m0))
             (logic.rewrite_l
                nat.nat
                (nat.S m0)
                (__:(cts.Term cts.box nat.nat) =>
                 logic.eq
                   (cts.univ cts.star cts.box cts.I)
                   (nat.le (nat.S m0) __)
                   (nat.le (nat.S m0) (nat.S m0)))
                (logic.refl (cts.univ cts.star cts.box cts.I) (nat.le (nat.S m0) (nat.S m0)))
                (nat.plus nat.O (nat.S m0))
                (nat.plus_O_n (nat.S m0))))
          auto))
    m
    H.

def lt_S_to_lt :
  cts.Term
    cts.star
    (cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       nat.nat
       (x:(cts.Term cts.box nat.nat) =>
        cts.prod
          cts.box
          cts.star
          cts.star
          cts.I
          nat.nat
          (x0:(cts.Term cts.box nat.nat) =>
           cts.prod
             cts.star
             cts.star
             cts.star
             cts.I
             (nat.lt (nat.S x) x0)
             (x1:(cts.Term cts.star (nat.lt (nat.S x) x0)) => nat.lt x x0))))
  :=
  n:(cts.Term cts.box nat.nat) =>
  m:(cts.Term cts.box nat.nat) =>
  auto:(cts.Term cts.star (nat.le (nat.S (nat.S n)) m)) =>
  nat.transitive_lt
    n
    (nat.S n)
    m
    (logic.eq_coerc
       (nat.le (nat.S n) (nat.plus nat.O (nat.S n)))
       (nat.le (nat.S n) (nat.S n))
       (nat.le_plus_n nat.O (nat.S n))
       (logic.rewrite_l
          nat.nat
          (nat.S n)
          (__:(cts.Term cts.box nat.nat) =>
           logic.eq
             (cts.univ cts.star cts.box cts.I)
             (nat.le (nat.S n) __)
             (nat.le (nat.S n) (nat.S n)))
          (logic.refl (cts.univ cts.star cts.box cts.I) (nat.le (nat.S n) (nat.S n)))
          (nat.plus nat.O (nat.S n))
          (nat.plus_O_n (nat.S n))))
    auto.

def ltn_to_ltO :
  cts.Term
    cts.star
    (cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       nat.nat
       (x:(cts.Term cts.box nat.nat) =>
        cts.prod
          cts.box
          cts.star
          cts.star
          cts.I
          nat.nat
          (x0:(cts.Term cts.box nat.nat) =>
           cts.prod
             cts.star
             cts.star
             cts.star
             cts.I
             (nat.lt x x0)
             (x1:(cts.Term cts.star (nat.lt x x0)) => nat.lt nat.O x0))))
  :=
  n:(cts.Term cts.box nat.nat) =>
  m:(cts.Term cts.box nat.nat) =>
  auto:(cts.Term cts.star (nat.le (nat.S n) m)) =>
  nat.lt_to_le_to_lt
    nat.O
    (nat.S n)
    m
    (logic.eq_coerc
       (nat.le (nat.S nat.O) (nat.plus n (nat.S nat.O)))
       (nat.le (nat.S nat.O) (nat.S n))
       (nat.le_plus_n n (nat.S nat.O))
       (logic.rewrite_l
          nat.nat
          (nat.S n)
          (__:(cts.Term cts.box nat.nat) =>
           logic.eq
             (cts.univ cts.star cts.box cts.I)
             (nat.le (nat.S nat.O) __)
             (nat.le (nat.S nat.O) (nat.S n)))
          (logic.refl (cts.univ cts.star cts.box cts.I) (nat.le (nat.S nat.O) (nat.S n)))
          (nat.plus n (nat.S nat.O))
          (logic.rewrite_r
             nat.nat
             (nat.plus n nat.O)
             (__:(cts.Term cts.box nat.nat) =>
              logic.eq nat.nat (nat.S __) (nat.plus n (nat.S nat.O)))
             (nat.plus_n_Sm n nat.O)
             n
             (nat.plus_n_O n))))
    auto.

def lt_O_S :
  cts.Term
    cts.star
    (cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       nat.nat
       (x:(cts.Term cts.box nat.nat) => nat.lt nat.O (nat.S x)))
  :=
  n:(cts.Term cts.box nat.nat) =>
  nat.ltn_to_ltO
    n
    (nat.S n)
    (logic.eq_coerc
       (nat.le (nat.S n) (nat.plus nat.O (nat.S n)))
       (nat.le (nat.S n) (nat.S n))
       (nat.le_plus_n nat.O (nat.S n))
       (logic.rewrite_l
          nat.nat
          (nat.S n)
          (__:(cts.Term cts.box nat.nat) =>
           logic.eq
             (cts.univ cts.star cts.box cts.I)
             (nat.le (nat.S n) __)
             (nat.le (nat.S n) (nat.S n)))
          (logic.refl (cts.univ cts.star cts.box cts.I) (nat.le (nat.S n) (nat.S n)))
          (nat.plus nat.O (nat.S n))
          (nat.plus_O_n (nat.S n)))).

def monotonic_lt_plus_r :
  cts.Term
    cts.star
    (cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       nat.nat
       (x:(cts.Term cts.box nat.nat) =>
        relations.monotonic nat.nat nat.lt (m:(cts.Term cts.box nat.nat) => nat.plus x m)))
  :=
  n:(cts.Term cts.box nat.nat) =>
  x:(cts.Term cts.box nat.nat) =>
  y:(cts.Term cts.box nat.nat) =>
  auto:(cts.Term cts.star (nat.le (nat.S x) y)) =>
  logic.eq_coerc
    (nat.le (nat.plus n (nat.S x)) (nat.plus n y))
    (nat.le (nat.S (nat.plus n x)) (nat.plus n y))
    (nat.monotonic_le_plus_r n (nat.S x) y auto)
    (logic.rewrite_r
       nat.nat
       (nat.plus n (nat.S x))
       (__:(cts.Term cts.box nat.nat) =>
        logic.eq
          (cts.univ cts.star cts.box cts.I)
          (nat.le (nat.plus n (nat.S x)) (nat.plus n y))
          (nat.le __ (nat.plus n y)))
       (logic.refl (cts.univ cts.star cts.box cts.I) (nat.le (nat.plus n (nat.S x)) (nat.plus n y)))
       (nat.S (nat.plus n x))
       (nat.plus_n_Sm n x)).

def monotonic_lt_plus_l :
  cts.Term
    cts.star
    (cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       nat.nat
       (x:(cts.Term cts.box nat.nat) =>
        relations.monotonic nat.nat nat.lt (m:(cts.Term cts.box nat.nat) => nat.plus m x)))
  :=
  n:(cts.Term cts.box nat.nat) =>
  x:(cts.Term cts.box nat.nat) =>
  y:(cts.Term cts.box nat.nat) =>
  auto:(cts.Term cts.star (nat.le (nat.S x) y)) =>
  logic.eq_coerc
    (nat.le (nat.plus n (nat.S x)) (nat.plus n y))
    (nat.le (nat.S (nat.plus x n)) (nat.plus y n))
    (nat.monotonic_le_plus_r n (nat.S x) y auto)
    (logic.rewrite_r
       nat.nat
       (nat.plus n x)
       (__:(cts.Term cts.box nat.nat) =>
        logic.eq
          (cts.univ cts.star cts.box cts.I)
          (nat.le (nat.plus n (nat.S x)) (nat.plus n y))
          (nat.le (nat.S __) (nat.plus y n)))
       (logic.rewrite_r
          nat.nat
          (nat.plus n (nat.S x))
          (__:(cts.Term cts.box nat.nat) =>
           logic.eq
             (cts.univ cts.star cts.box cts.I)
             (nat.le (nat.plus n (nat.S x)) (nat.plus n y))
             (nat.le __ (nat.plus y n)))
          (logic.rewrite_r
             nat.nat
             (nat.plus n y)
             (__:(cts.Term cts.box nat.nat) =>
              logic.eq
                (cts.univ cts.star cts.box cts.I)
                (nat.le (nat.plus n (nat.S x)) (nat.plus n y))
                (nat.le (nat.plus n (nat.S x)) __))
             (logic.refl
                (cts.univ cts.star cts.box cts.I)
                (nat.le (nat.plus n (nat.S x)) (nat.plus n y)))
             (nat.plus y n)
             (nat.commutative_plus y n))
          (nat.S (nat.plus n x))
          (nat.plus_n_Sm n x))
       (nat.plus x n)
       (nat.commutative_plus x n)).

def monotonic_lt_times_r :
  cts.Term
    cts.star
    (cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       nat.nat
       (x:(cts.Term cts.box nat.nat) =>
        cts.prod
          cts.star
          cts.star
          cts.star
          cts.I
          (nat.lt nat.O x)
          (x0:(cts.Term cts.star (nat.lt nat.O x)) =>
           relations.monotonic nat.nat nat.lt (t:(cts.Term cts.box nat.nat) => nat.times x t))))
  :=
  c:(cts.Term cts.box nat.nat) =>
  posc:(cts.Term cts.star (nat.le (nat.S nat.O) c)) =>
  n:(cts.Term cts.box nat.nat) =>
  m:(cts.Term cts.box nat.nat) =>
  ltnm:(cts.Term cts.star (nat.le (nat.S n) m)) =>
  nat.le_ind
    (nat.S n)
    (x_417:(cts.Term cts.box nat.nat) => nat.lt (nat.times c n) (nat.times c x_417))
    (logic.eq_coerc
       (nat.le (nat.S (nat.plus nat.O (nat.times c n))) (nat.plus c (nat.times c n)))
       (nat.le (nat.S (nat.times c n)) (nat.times c (nat.S n)))
       (nat.monotonic_lt_plus_l (nat.times c n) nat.O c posc)
       (logic.rewrite_r
          nat.nat
          (nat.plus nat.O (nat.S (nat.times c n)))
          (__:(cts.Term cts.box nat.nat) =>
           logic.eq
             (cts.univ cts.star cts.box cts.I)
             (nat.le __ (nat.plus c (nat.times c n)))
             (nat.le (nat.S (nat.times c n)) (nat.times c (nat.S n))))
          (logic.rewrite_l
             nat.nat
             (nat.plus c (nat.times c n))
             (__:(cts.Term cts.box nat.nat) =>
              logic.eq
                (cts.univ cts.star cts.box cts.I)
                (nat.le (nat.plus nat.O (nat.S (nat.times c n))) (nat.plus c (nat.times c n)))
                (nat.le (nat.S (nat.times c n)) __))
             (logic.rewrite_l
                nat.nat
                (nat.S (nat.times c n))
                (__:(cts.Term cts.box nat.nat) =>
                 logic.eq
                   (cts.univ cts.star cts.box cts.I)
                   (nat.le __ (nat.plus c (nat.times c n)))
                   (nat.le (nat.S (nat.times c n)) (nat.plus c (nat.times c n))))
                (logic.refl
                   (cts.univ cts.star cts.box cts.I)
                   (nat.le (nat.S (nat.times c n)) (nat.plus c (nat.times c n))))
                (nat.plus nat.O (nat.S (nat.times c n)))
                (nat.plus_O_n (nat.S (nat.times c n))))
             (nat.times c (nat.S n))
             (nat.times_n_Sm c n))
          (nat.S (nat.plus nat.O (nat.times c n)))
          (nat.plus_n_Sm nat.O (nat.times c n))))
    (a:(cts.Term cts.box nat.nat) =>
     __:(cts.Term cts.star (nat.le (nat.S n) a)) =>
     lt1:(cts.Term cts.star (nat.le (nat.S (nat.times c n)) (nat.times c a))) =>
     nat.transitive_le
       (nat.S (nat.times c n))
       (nat.times c a)
       (nat.times c (nat.S a))
       lt1
       (logic.eq_coerc
          (nat.le (nat.times c a) (nat.plus (nat.times c a) c))
          (nat.le (nat.times c a) (nat.times c (nat.S a)))
          (nat.le_plus_n_r c (nat.times c a))
          (logic.rewrite_l
             nat.nat
             (nat.plus c (nat.times c a))
             (__1:(cts.Term cts.box nat.nat) =>
              logic.eq
                (cts.univ cts.star cts.box cts.I)
                (nat.le (nat.times c a) (nat.plus (nat.times c a) c))
                (nat.le (nat.times c a) __1))
             (logic.rewrite_r
                nat.nat
                (nat.plus c (nat.times c a))
                (__1:(cts.Term cts.box nat.nat) =>
                 logic.eq
                   (cts.univ cts.star cts.box cts.I)
                   (nat.le (nat.times c a) __1)
                   (nat.le (nat.times c a) (nat.plus c (nat.times c a))))
                (logic.refl
                   (cts.univ cts.star cts.box cts.I)
                   (nat.le (nat.times c a) (nat.plus c (nat.times c a))))
                (nat.plus (nat.times c a) c)
                (nat.commutative_plus (nat.times c a) c))
             (nat.times c (nat.S a))
             (nat.times_n_Sm c a))))
    m
    ltnm.

def monotonic_lt_times_l :
  cts.Term
    cts.star
    (cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       nat.nat
       (x:(cts.Term cts.box nat.nat) =>
        cts.prod
          cts.star
          cts.star
          cts.star
          cts.I
          (nat.lt nat.O x)
          (x0:(cts.Term cts.star (nat.lt nat.O x)) =>
           relations.monotonic nat.nat nat.lt (t:(cts.Term cts.box nat.nat) => nat.times t x))))
  :=
  c:(cts.Term cts.box nat.nat) =>
  auto:(cts.Term cts.star (nat.le (nat.S nat.O) c)) =>
  x:(cts.Term cts.box nat.nat) =>
  y:(cts.Term cts.box nat.nat) =>
  auto':(cts.Term cts.star (nat.le (nat.S x) y)) =>
  logic.eq_coerc
    (nat.le (nat.S (nat.times c x)) (nat.times c y))
    (nat.le (nat.S (nat.times x c)) (nat.times y c))
    (nat.monotonic_lt_times_r c auto x y auto')
    (logic.rewrite_r
       nat.nat
       (nat.times c x)
       (__:(cts.Term cts.box nat.nat) =>
        logic.eq
          (cts.univ cts.star cts.box cts.I)
          (nat.le (nat.S (nat.times c x)) (nat.times c y))
          (nat.le (nat.S __) (nat.times y c)))
       (logic.rewrite_r
          nat.nat
          (nat.times c y)
          (__:(cts.Term cts.box nat.nat) =>
           logic.eq
             (cts.univ cts.star cts.box cts.I)
             (nat.le (nat.S (nat.times c x)) (nat.times c y))
             (nat.le (nat.S (nat.times c x)) __))
          (logic.refl
             (cts.univ cts.star cts.box cts.I)
             (nat.le (nat.S (nat.times c x)) (nat.times c y)))
          (nat.times y c)
          (nat.commutative_times y c))
       (nat.times x c)
       (nat.commutative_times x c)).

def lt_to_le_to_lt_times :
  cts.Term
    cts.star
    (cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       nat.nat
       (x:(cts.Term cts.box nat.nat) =>
        cts.prod
          cts.box
          cts.star
          cts.star
          cts.I
          nat.nat
          (x0:(cts.Term cts.box nat.nat) =>
           cts.prod
             cts.box
             cts.star
             cts.star
             cts.I
             nat.nat
             (x1:(cts.Term cts.box nat.nat) =>
              cts.prod
                cts.box
                cts.star
                cts.star
                cts.I
                nat.nat
                (x2:(cts.Term cts.box nat.nat) =>
                 cts.prod
                   cts.star
                   cts.star
                   cts.star
                   cts.I
                   (nat.lt x x0)
                   (x3:(cts.Term cts.star (nat.lt x x0)) =>
                    cts.prod
                      cts.star
                      cts.star
                      cts.star
                      cts.I
                      (nat.le x1 x2)
                      (x4:(cts.Term cts.star (nat.le x1 x2)) =>
                       cts.prod
                         cts.star
                         cts.star
                         cts.star
                         cts.I
                         (nat.lt nat.O x2)
                         (x5:(cts.Term cts.star (nat.lt nat.O x2)) =>
                          nat.lt (nat.times x x1) (nat.times x0 x2)))))))))
  :=
  n:(cts.Term cts.box nat.nat) =>
  m:(cts.Term cts.box nat.nat) =>
  p:(cts.Term cts.box nat.nat) =>
  q:(cts.Term cts.box nat.nat) =>
  ltnm:(cts.Term cts.star (nat.le (nat.S n) m)) =>
  lepq:(cts.Term cts.star (nat.le p q)) =>
  posq:(cts.Term cts.star (nat.le (nat.S nat.O) q)) =>
  nat.le_to_lt_to_lt
    (nat.times n p)
    (nat.times n q)
    (nat.times m q)
    (nat.monotonic_le_times_r n p q lepq)
    (nat.monotonic_lt_times_l q posq n m ltnm).

def lt_times :
  cts.Term
    cts.star
    (cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       nat.nat
       (x:(cts.Term cts.box nat.nat) =>
        cts.prod
          cts.box
          cts.star
          cts.star
          cts.I
          nat.nat
          (x0:(cts.Term cts.box nat.nat) =>
           cts.prod
             cts.box
             cts.star
             cts.star
             cts.I
             nat.nat
             (x1:(cts.Term cts.box nat.nat) =>
              cts.prod
                cts.box
                cts.star
                cts.star
                cts.I
                nat.nat
                (x2:(cts.Term cts.box nat.nat) =>
                 cts.prod
                   cts.star
                   cts.star
                   cts.star
                   cts.I
                   (nat.lt x x0)
                   (x3:(cts.Term cts.star (nat.lt x x0)) =>
                    cts.prod
                      cts.star
                      cts.star
                      cts.star
                      cts.I
                      (nat.lt x1 x2)
                      (x4:(cts.Term cts.star (nat.lt x1 x2)) =>
                       nat.lt (nat.times x x1) (nat.times x0 x2))))))))
  :=
  n:(cts.Term cts.box nat.nat) =>
  m:(cts.Term cts.box nat.nat) =>
  p:(cts.Term cts.box nat.nat) =>
  q:(cts.Term cts.box nat.nat) =>
  ltnm:(cts.Term cts.star (nat.le (nat.S n) m)) =>
  ltpq:(cts.Term cts.star (nat.le (nat.S p) q)) =>
  nat.lt_to_le_to_lt_times n m p q ltnm (nat.lt_to_le p q ltpq) (nat.ltn_to_ltO p q ltpq).

def lt_plus_to_minus_r :
  cts.Term
    cts.star
    (cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       nat.nat
       (x:(cts.Term cts.box nat.nat) =>
        cts.prod
          cts.box
          cts.star
          cts.star
          cts.I
          nat.nat
          (x0:(cts.Term cts.box nat.nat) =>
           cts.prod
             cts.box
             cts.star
             cts.star
             cts.I
             nat.nat
             (x1:(cts.Term cts.box nat.nat) =>
              cts.prod
                cts.star
                cts.star
                cts.star
                cts.I
                (nat.lt (nat.plus x x0) x1)
                (x2:(cts.Term cts.star (nat.lt (nat.plus x x0) x1)) => nat.lt x (nat.minus x1 x0))))))
  :=
  a:(cts.Term cts.box nat.nat) =>
  b:(cts.Term cts.box nat.nat) =>
  c:(cts.Term cts.box nat.nat) =>
  H:(cts.Term cts.star (nat.le (nat.S (nat.plus a b)) c)) =>
  nat.le_plus_to_minus_r
    (nat.S a)
    b
    c
    (nat.sym_eq_plus
       (nat.S a)
       (y:(cts.Term
             cts.box
             (cts.prod'
                cts.box
                cts.box
                cts.box
                nat.nat
                (x0:(cts.Term cts.box nat.nat) => nat.nat))) =>
        nat.le (y b) c)
       (nat.sym_eq_filter_nat_type_S
          (cts.prod cts.box cts.box cts.box cts.I nat.nat (x:(cts.Term cts.box nat.nat) => nat.nat))
          nat.plus_body
          a
          (y:(cts.Term
                cts.box
                (cts.prod'
                   cts.box
                   cts.box
                   cts.box
                   nat.nat
                   (x:(cts.Term cts.box nat.nat) => nat.nat))) =>
           nat.le (y b) c)
          (nat.sym_eq_plus_body_S
             a
             (y:(cts.Term
                   cts.box
                   (cts.prod'
                      cts.box
                      cts.box
                      cts.box
                      nat.nat
                      (x0:(cts.Term cts.box nat.nat) => nat.nat))) =>
              nat.le (y b) c)
             H))).

def lt_plus_Sn_r :
  cts.Term
    cts.star
    (cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       nat.nat
       (x:(cts.Term cts.box nat.nat) =>
        cts.prod
          cts.box
          cts.star
          cts.star
          cts.I
          nat.nat
          (x0:(cts.Term cts.box nat.nat) =>
           cts.prod
             cts.box
             cts.star
             cts.star
             cts.I
             nat.nat
             (x1:(cts.Term cts.box nat.nat) => nat.lt x (nat.plus (nat.plus x x0) (nat.S x1))))))
  :=
  a:(cts.Term cts.box nat.nat) =>
  x:(cts.Term cts.box nat.nat) =>
  n:(cts.Term cts.box nat.nat) =>
  logic.eq_coerc
    (nat.le (nat.S a) (nat.S (nat.plus (nat.plus a x) n)))
    (nat.le (nat.S a) (nat.plus (nat.plus a x) (nat.S n)))
    (nat.le_S_S
       a
       (nat.plus (nat.plus a x) n)
       (logic.eq_coerc
          (nat.le a (nat.plus a (nat.plus x n)))
          (nat.le a (nat.plus (nat.plus a x) n))
          (nat.le_plus_n_r (nat.plus x n) a)
          (logic.rewrite_r
             nat.nat
             (nat.plus n (nat.plus a x))
             (__:(cts.Term cts.box nat.nat) =>
              logic.eq
                (cts.univ cts.star cts.box cts.I)
                (nat.le a (nat.plus a (nat.plus x n)))
                (nat.le a __))
             (logic.rewrite_r
                nat.nat
                (nat.plus a (nat.plus n x))
                (__:(cts.Term cts.box nat.nat) =>
                 logic.eq
                   (cts.univ cts.star cts.box cts.I)
                   (nat.le a (nat.plus a (nat.plus x n)))
                   (nat.le a __))
                (logic.rewrite_r
                   nat.nat
                   (nat.plus x n)
                   (__:(cts.Term cts.box nat.nat) =>
                    logic.eq
                      (cts.univ cts.star cts.box cts.I)
                      (nat.le a (nat.plus a (nat.plus x n)))
                      (nat.le a (nat.plus a __)))
                   (logic.refl
                      (cts.univ cts.star cts.box cts.I)
                      (nat.le a (nat.plus a (nat.plus x n))))
                   (nat.plus n x)
                   (nat.commutative_plus n x))
                (nat.plus n (nat.plus a x))
                (logic.rewrite_l
                   nat.nat
                   (nat.plus (nat.plus a n) x)
                   (__:(cts.Term cts.box nat.nat) =>
                    logic.eq nat.nat (nat.plus n (nat.plus a x)) __)
                   (nat.assoc_plus1 x a n)
                   (nat.plus a (nat.plus n x))
                   (nat.associative_plus a n x)))
             (nat.plus (nat.plus a x) n)
             (nat.commutative_plus (nat.plus a x) n))))
    (logic.rewrite_r
       nat.nat
       (nat.plus a (nat.plus x (nat.S n)))
       (__:(cts.Term cts.box nat.nat) =>
        logic.eq
          (cts.univ cts.star cts.box cts.I)
          (nat.le (nat.S a) (nat.S (nat.plus (nat.plus a x) n)))
          (nat.le (nat.S a) __))
       (logic.rewrite_r
          nat.nat
          (nat.plus (nat.plus a x) (nat.S n))
          (__:(cts.Term cts.box nat.nat) =>
           logic.eq
             (cts.univ cts.star cts.box cts.I)
             (nat.le (nat.S a) __)
             (nat.le (nat.S a) (nat.plus a (nat.plus x (nat.S n)))))
          (logic.rewrite_r
             nat.nat
             (nat.plus a (nat.plus x (nat.S n)))
             (__:(cts.Term cts.box nat.nat) =>
              logic.eq
                (cts.univ cts.star cts.box cts.I)
                (nat.le (nat.S a) __)
                (nat.le (nat.S a) (nat.plus a (nat.plus x (nat.S n)))))
             (logic.refl
                (cts.univ cts.star cts.box cts.I)
                (nat.le (nat.S a) (nat.plus a (nat.plus x (nat.S n)))))
             (nat.plus (nat.plus a x) (nat.S n))
             (nat.associative_plus a x (nat.S n)))
          (nat.S (nat.plus (nat.plus a x) n))
          (nat.plus_n_Sm (nat.plus a x) n))
       (nat.plus (nat.plus a x) (nat.S n))
       (nat.associative_plus a x (nat.S n))).

def not_le_Sn_O :
  cts.Term
    cts.star
    (cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       nat.nat
       (x:(cts.Term cts.box nat.nat) => connectives.Not (nat.le (nat.S x) nat.O)))
  :=
  n:(cts.Term cts.box nat.nat) =>
  connectives.nmk
    (nat.le (nat.S n) nat.O)
    (Hlen0:(cts.Term cts.star (nat.le (nat.S n) nat.O)) =>
     nat.eq_match_nat_type_O
       (cts.univ cts.star cts.box cts.I)
       connectives.False
       (p:(cts.Term cts.box nat.nat) => connectives.True)
       (y:(cts.Term cts.box (cts.univ' cts.star cts.box)) => y)
       (nat.lt_to_not_zero n nat.O Hlen0)).

def not_le_to_not_le_S_S :
  cts.Term
    cts.star
    (cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       nat.nat
       (x:(cts.Term cts.box nat.nat) =>
        cts.prod
          cts.box
          cts.star
          cts.star
          cts.I
          nat.nat
          (x0:(cts.Term cts.box nat.nat) =>
           cts.prod
             cts.star
             cts.star
             cts.star
             cts.I
             (connectives.Not (nat.le x x0))
             (x1:(cts.Term cts.star (connectives.Not (nat.le x x0))) =>
              connectives.Not (nat.le (nat.S x) (nat.S x0))))))
  :=
  n:(cts.Term cts.box nat.nat) =>
  m:(cts.Term cts.box nat.nat) =>
  auto:(cts.Term cts.star (connectives.Not (nat.le n m))) =>
  logic.not_to_not
    (nat.le (nat.S n) (nat.S m))
    (nat.le n m)
    (auto':(cts.Term cts.star (nat.le (nat.S n) (nat.S m))) =>
     logic.eq_coerc
       (nat.le (nat.pred (nat.S n)) (nat.pred (nat.S m)))
       (nat.le n m)
       (nat.monotonic_pred (nat.S n) (nat.S m) auto')
       (logic.rewrite_l
          nat.nat
          n
          (__:(cts.Term cts.box nat.nat) =>
           logic.eq (cts.univ cts.star cts.box cts.I) (nat.le __ (nat.pred (nat.S m))) (nat.le n m))
          (logic.rewrite_l
             nat.nat
             m
             (__:(cts.Term cts.box nat.nat) =>
              logic.eq (cts.univ cts.star cts.box cts.I) (nat.le n __) (nat.le n m))
             (logic.refl (cts.univ cts.star cts.box cts.I) (nat.le n m))
             (nat.pred (nat.S m))
             (nat.pred_Sn m))
          (nat.pred (nat.S n))
          (nat.pred_Sn n)))
    auto.

def not_le_S_S_to_not_le :
  cts.Term
    cts.star
    (cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       nat.nat
       (x:(cts.Term cts.box nat.nat) =>
        cts.prod
          cts.box
          cts.star
          cts.star
          cts.I
          nat.nat
          (x0:(cts.Term cts.box nat.nat) =>
           cts.prod
             cts.star
             cts.star
             cts.star
             cts.I
             (connectives.Not (nat.le (nat.S x) (nat.S x0)))
             (x1:(cts.Term cts.star (connectives.Not (nat.le (nat.S x) (nat.S x0)))) =>
              connectives.Not (nat.le x x0)))))
  :=
  n:(cts.Term cts.box nat.nat) =>
  m:(cts.Term cts.box nat.nat) =>
  auto:(cts.Term cts.star (connectives.Not (nat.le (nat.S n) (nat.S m)))) =>
  logic.not_to_not
    (nat.le n m)
    (nat.le (nat.S n) (nat.S m))
    (auto':(cts.Term cts.star (nat.le n m)) => nat.le_S_S n m auto')
    auto.

def not_le_Sn_n :
  cts.Term
    cts.star
    (cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       nat.nat
       (x:(cts.Term cts.box nat.nat) => connectives.Not (nat.le (nat.S x) x)))
  :=
  n:(cts.Term cts.box nat.nat) =>
  nat.nat_ind
    (_x_365:(cts.Term cts.box nat.nat) => connectives.Not (nat.le (nat.S _x_365) _x_365))
    (nat.not_le_Sn_O nat.O)
    (x_366:(cts.Term cts.box nat.nat) =>
     _x_368:(cts.Term cts.star (connectives.Not (nat.le (nat.S x_366) x_366))) =>
     nat.not_le_to_not_le_S_S (nat.S x_366) x_366 _x_368)
    n.

def lt_to_not_le :
  cts.Term
    cts.star
    (cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       nat.nat
       (x:(cts.Term cts.box nat.nat) =>
        cts.prod
          cts.box
          cts.star
          cts.star
          cts.I
          nat.nat
          (x0:(cts.Term cts.box nat.nat) =>
           cts.prod
             cts.star
             cts.star
             cts.star
             cts.I
             (nat.lt x x0)
             (x1:(cts.Term cts.star (nat.lt x x0)) => connectives.Not (nat.le x0 x)))))
  :=
  n:(cts.Term cts.box nat.nat) =>
  m:(cts.Term cts.box nat.nat) =>
  Hltnm:(cts.Term cts.star (nat.le (nat.S n) m)) =>
  nat.le_ind
    (nat.S n)
    (x_417:(cts.Term cts.box nat.nat) => connectives.Not (nat.le x_417 n))
    (nat.not_le_Sn_n n)
    (m0:(cts.Term cts.box nat.nat) =>
     _x_419:(cts.Term cts.star (nat.le (nat.S n) m0)) =>
     _x_421:(cts.Term cts.star (connectives.Not (nat.le m0 n))) =>
     logic.not_to_not
       (nat.le (nat.S m0) n)
       (nat.le m0 n)
       (auto:(cts.Term cts.star (nat.le (nat.S m0) n)) => nat.lt_to_le m0 n auto)
       _x_421)
    m
    Hltnm.

def not_le_to_lt :
  cts.Term
    cts.star
    (cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       nat.nat
       (x:(cts.Term cts.box nat.nat) =>
        cts.prod
          cts.box
          cts.star
          cts.star
          cts.I
          nat.nat
          (x0:(cts.Term cts.box nat.nat) =>
           cts.prod
             cts.star
             cts.star
             cts.star
             cts.I
             (connectives.Not (nat.le x x0))
             (x1:(cts.Term cts.star (connectives.Not (nat.le x x0))) => nat.lt x0 x))))
  :=
  nat.nat_elim2
    (__:(cts.Term cts.box nat.nat) =>
     _0:(cts.Term cts.box nat.nat) =>
     cts.prod
       cts.star
       cts.star
       cts.star
       cts.I
       (connectives.Not (nat.le __ _0))
       (x:(cts.Term cts.star (connectives.Not (nat.le __ _0))) => nat.lt _0 __))
    (n:(cts.Term cts.box nat.nat) =>
     abs:(cts.Term cts.star (connectives.Not (nat.le nat.O n))) =>
     connectives.falsity
       (nat.lt n nat.O)
       (logic.absurd
          (nat.le nat.O n)
          (logic.eq_coerc
             (nat.le nat.O (nat.plus n nat.O))
             (nat.le nat.O n)
             (nat.le_plus_n n nat.O)
             (logic.rewrite_l
                nat.nat
                n
                (__:(cts.Term cts.box nat.nat) =>
                 logic.eq (cts.univ cts.star cts.box cts.I) (nat.le nat.O __) (nat.le nat.O n))
                (logic.refl (cts.univ cts.star cts.box cts.I) (nat.le nat.O n))
                (nat.plus n nat.O)
                (nat.plus_n_O n)))
          abs))
    (n:(cts.Term cts.box nat.nat) =>
     auto:(cts.Term cts.star (connectives.Not (nat.le (nat.S n) nat.O))) => nat.lt_O_S n)
    (n:(cts.Term cts.box nat.nat) =>
     m:(cts.Term cts.box nat.nat) =>
     Hind:(cts.Term
             cts.star
             (cts.prod'
                cts.star
                cts.star
                cts.star
                (connectives.Not (nat.le n m))
                (x:(cts.Term cts.star (connectives.Not (nat.le n m))) => nat.lt m n))) =>
     HnotleSS:(cts.Term cts.star (connectives.Not (nat.le (nat.S n) (nat.S m)))) =>
     nat.le_S_S (nat.S m) n (Hind (nat.not_le_S_S_to_not_le n m HnotleSS))).

def not_lt_to_le :
  cts.Term
    cts.star
    (cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       nat.nat
       (x:(cts.Term cts.box nat.nat) =>
        cts.prod
          cts.box
          cts.star
          cts.star
          cts.I
          nat.nat
          (x0:(cts.Term cts.box nat.nat) =>
           cts.prod
             cts.star
             cts.star
             cts.star
             cts.I
             (connectives.Not (nat.lt x x0))
             (x1:(cts.Term cts.star (connectives.Not (nat.lt x x0))) => nat.le x0 x))))
  :=
  n:(cts.Term cts.box nat.nat) =>
  m:(cts.Term cts.box nat.nat) =>
  H:(cts.Term cts.star (connectives.Not (nat.lt n m))) =>
  nat.le_S_S_to_le
    m
    n
    (nat.not_le_to_lt
       (nat.S n)
       m
       (logic.not_to_not
          (nat.le (nat.S n) m)
          (nat.lt n m)
          (auto:(cts.Term cts.star (nat.le (nat.S n) m)) => auto)
          H)).

def le_to_not_lt :
  cts.Term
    cts.star
    (cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       nat.nat
       (x:(cts.Term cts.box nat.nat) =>
        cts.prod
          cts.box
          cts.star
          cts.star
          cts.I
          nat.nat
          (x0:(cts.Term cts.box nat.nat) =>
           cts.prod
             cts.star
             cts.star
             cts.star
             cts.I
             (nat.le x x0)
             (x1:(cts.Term cts.star (nat.le x x0)) => connectives.Not (nat.lt x0 x)))))
  :=
  n:(cts.Term cts.box nat.nat) =>
  m:(cts.Term cts.box nat.nat) =>
  H:(cts.Term cts.star (nat.le n m)) =>
  nat.lt_to_not_le
    n
    (nat.S m)
    (nat.le_to_lt_to_lt
       n
       m
       (nat.S m)
       H
       (logic.eq_coerc
          (nat.le (nat.S m) (nat.plus nat.O (nat.S m)))
          (nat.le (nat.S m) (nat.S m))
          (nat.le_plus_n nat.O (nat.S m))
          (logic.rewrite_l
             nat.nat
             (nat.S m)
             (__:(cts.Term cts.box nat.nat) =>
              logic.eq
                (cts.univ cts.star cts.box cts.I)
                (nat.le (nat.S m) __)
                (nat.le (nat.S m) (nat.S m)))
             (logic.refl (cts.univ cts.star cts.box cts.I) (nat.le (nat.S m) (nat.S m)))
             (nat.plus nat.O (nat.S m))
             (nat.plus_O_n (nat.S m))))).

def decidable_le :
  cts.Term
    cts.star
    (cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       nat.nat
       (x:(cts.Term cts.box nat.nat) =>
        cts.prod
          cts.box
          cts.star
          cts.star
          cts.I
          nat.nat
          (x0:(cts.Term cts.box nat.nat) => logic.decidable (nat.le x x0))))
  :=
  nat.nat_elim2
    (__:(cts.Term cts.box nat.nat) => _0:(cts.Term cts.box nat.nat) => logic.decidable (nat.le __ _0))
    (n:(cts.Term cts.box nat.nat) =>
     connectives.or_introl (nat.le nat.O n) (connectives.Not (nat.le nat.O n)) (nat.le_O_n n))
    (n:(cts.Term cts.box nat.nat) =>
     connectives.or_intror
       (nat.le (nat.S n) nat.O)
       (connectives.Not (nat.le (nat.S n) nat.O))
       (nat.not_le_Sn_O n))
    (n:(cts.Term cts.box nat.nat) =>
     m:(cts.Term cts.box nat.nat) =>
     _clearme:(cts.Term cts.star (connectives.Or (nat.le n m) (connectives.Not (nat.le n m)))) =>
     connectives.match_Or_prop
       (nat.le n m)
       (connectives.Not (nat.le n m))
       (logic.decidable (nat.le (nat.S n) (nat.S m)))
       (auto:(cts.Term cts.star (nat.le n m)) =>
        connectives.or_introl
          (nat.le (nat.S n) (nat.S m))
          (connectives.Not (nat.le (nat.S n) (nat.S m)))
          (nat.le_S_S n m auto))
       (auto:(cts.Term cts.star (connectives.Not (nat.le n m))) =>
        connectives.or_intror
          (nat.le (nat.S n) (nat.S m))
          (connectives.Not (nat.le (nat.S n) (nat.S m)))
          (nat.not_le_to_not_le_S_S n m auto))
       _clearme).

def decidable_lt :
  cts.Term
    cts.star
    (cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       nat.nat
       (x:(cts.Term cts.box nat.nat) =>
        cts.prod
          cts.box
          cts.star
          cts.star
          cts.I
          nat.nat
          (x0:(cts.Term cts.box nat.nat) => logic.decidable (nat.lt x x0))))
  :=
  n:(cts.Term cts.box nat.nat) => m:(cts.Term cts.box nat.nat) => nat.decidable_le (nat.S n) m.

def le_to_or_lt_eq :
  cts.Term
    cts.star
    (cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       nat.nat
       (x:(cts.Term cts.box nat.nat) =>
        cts.prod
          cts.box
          cts.star
          cts.star
          cts.I
          nat.nat
          (x0:(cts.Term cts.box nat.nat) =>
           cts.prod
             cts.star
             cts.star
             cts.star
             cts.I
             (nat.le x x0)
             (x1:(cts.Term cts.star (nat.le x x0)) =>
              connectives.Or (nat.lt x x0) (logic.eq nat.nat x x0)))))
  :=
  n:(cts.Term cts.box nat.nat) =>
  m:(cts.Term cts.box nat.nat) =>
  lenm:(cts.Term cts.star (nat.le n m)) =>
  nat.le_ind
    n
    (x_417:(cts.Term cts.box nat.nat) => connectives.Or (nat.lt n x_417) (logic.eq nat.nat n x_417))
    (relations.RC_reflexive nat.nat nat.lt n)
    (m0:(cts.Term cts.box nat.nat) =>
     _x_419:(cts.Term cts.star (nat.le n m0)) =>
     _x_421:(cts.Term cts.star (connectives.Or (nat.lt n m0) (logic.eq nat.nat n m0))) =>
     connectives.or_introl
       (nat.lt n (nat.S m0))
       (logic.eq nat.nat n (nat.S m0))
       (nat.le_to_lt_to_lt
          n
          m0
          (nat.S m0)
          _x_419
          (logic.eq_coerc
             (nat.le (nat.S m0) (nat.plus nat.O (nat.S m0)))
             (nat.le (nat.S m0) (nat.S m0))
             (nat.le_plus_n nat.O (nat.S m0))
             (logic.rewrite_l
                nat.nat
                (nat.S m0)
                (__:(cts.Term cts.box nat.nat) =>
                 logic.eq
                   (cts.univ cts.star cts.box cts.I)
                   (nat.le (nat.S m0) __)
                   (nat.le (nat.S m0) (nat.S m0)))
                (logic.refl (cts.univ cts.star cts.box cts.I) (nat.le (nat.S m0) (nat.S m0)))
                (nat.plus nat.O (nat.S m0))
                (nat.plus_O_n (nat.S m0))))))
    m
    lenm.

def lt_O_n_elim :
  cts.Term
    cts.star
    (cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       nat.nat
       (x:(cts.Term cts.box nat.nat) =>
        cts.prod
          cts.star
          cts.star
          cts.star
          cts.I
          (nat.lt nat.O x)
          (x0:(cts.Term cts.star (nat.lt nat.O x)) =>
           cts.prod
             cts.box
             cts.star
             cts.star
             cts.I
             (cts.prod
                cts.box
                cts.box
                cts.box
                cts.I
                nat.nat
                (x1:(cts.Term cts.box nat.nat) => cts.univ cts.star cts.box cts.I))
             (x1:(cts.Term
                    cts.box
                    (cts.prod
                       cts.box
                       cts.box
                       cts.box
                       cts.I
                       nat.nat
                       (x1:(cts.Term cts.box nat.nat) => cts.univ cts.star cts.box cts.I))) =>
              cts.prod
                cts.star
                cts.star
                cts.star
                cts.I
                (cts.prod
                   cts.box
                   cts.star
                   cts.star
                   cts.I
                   nat.nat
                   (x2:(cts.Term cts.box nat.nat) => x1 (nat.S x2)))
                (x2:(cts.Term
                       cts.star
                       (cts.prod
                          cts.box
                          cts.star
                          cts.star
                          cts.I
                          nat.nat
                          (x2:(cts.Term cts.box nat.nat) => x1 (nat.S x2)))) =>
                 x1 x)))))
  :=
  n:(cts.Term cts.box nat.nat) =>
  nat.nat_ind
    (_x_365:(cts.Term cts.box nat.nat) =>
     cts.prod
       cts.star
       cts.star
       cts.star
       cts.I
       (nat.lt nat.O _x_365)
       (x:(cts.Term cts.star (nat.lt nat.O _x_365)) =>
        cts.prod
          cts.box
          cts.star
          cts.star
          cts.I
          (cts.prod
             cts.box
             cts.box
             cts.box
             cts.I
             nat.nat
             (x0:(cts.Term cts.box nat.nat) => cts.univ cts.star cts.box cts.I))
          (x0:(cts.Term
                 cts.box
                 (cts.prod
                    cts.box
                    cts.box
                    cts.box
                    cts.I
                    nat.nat
                    (x0:(cts.Term cts.box nat.nat) => cts.univ cts.star cts.box cts.I))) =>
           cts.prod
             cts.star
             cts.star
             cts.star
             cts.I
             (cts.prod
                cts.box
                cts.star
                cts.star
                cts.I
                nat.nat
                (x1:(cts.Term cts.box nat.nat) => x0 (nat.S x1)))
             (x1:(cts.Term
                    cts.star
                    (cts.prod
                       cts.box
                       cts.star
                       cts.star
                       cts.I
                       nat.nat
                       (x1:(cts.Term cts.box nat.nat) => x0 (nat.S x1)))) =>
              x0 _x_365))))
    (abs:(cts.Term cts.star (nat.le (nat.S nat.O) nat.O)) =>
     connectives.falsity
       (cts.prod
          cts.box
          cts.star
          cts.star
          cts.I
          (cts.prod
             cts.box
             cts.box
             cts.box
             cts.I
             nat.nat
             (x:(cts.Term cts.box nat.nat) => cts.univ cts.star cts.box cts.I))
          (x:(cts.Term
                cts.box
                (cts.prod
                   cts.box
                   cts.box
                   cts.box
                   cts.I
                   nat.nat
                   (x:(cts.Term cts.box nat.nat) => cts.univ cts.star cts.box cts.I))) =>
           cts.prod
             cts.star
             cts.star
             cts.star
             cts.I
             (cts.prod
                cts.box
                cts.star
                cts.star
                cts.I
                nat.nat
                (x0:(cts.Term cts.box nat.nat) => x (nat.S x0)))
             (x0:(cts.Term
                    cts.star
                    (cts.prod
                       cts.box
                       cts.star
                       cts.star
                       cts.I
                       nat.nat
                       (x0:(cts.Term cts.box nat.nat) => x (nat.S x0)))) =>
              x nat.O)))
       (logic.absurd (nat.le (nat.S nat.O) nat.O) abs (nat.not_le_Sn_O nat.O)))
    (x_366:(cts.Term cts.box nat.nat) =>
     _x_368:(cts.Term
               cts.star
               (cts.prod'
                  cts.star
                  cts.star
                  cts.star
                  (nat.le (nat.S nat.O) x_366)
                  (x:(cts.Term cts.star (nat.lt nat.O x_366)) =>
                   cts.prod
                     cts.box
                     cts.star
                     cts.star
                     cts.I
                     (cts.prod
                        cts.box
                        cts.box
                        cts.box
                        cts.I
                        nat.nat
                        (x0:(cts.Term cts.box nat.nat) => cts.univ cts.star cts.box cts.I))
                     (x0:(cts.Term
                            cts.box
                            (cts.prod
                               cts.box
                               cts.box
                               cts.box
                               cts.I
                               nat.nat
                               (x0:(cts.Term cts.box nat.nat) =>
                                cts.univ cts.star cts.box cts.I))) =>
                      cts.prod
                        cts.star
                        cts.star
                        cts.star
                        cts.I
                        (cts.prod
                           cts.box
                           cts.star
                           cts.star
                           cts.I
                           nat.nat
                           (x1:(cts.Term cts.box nat.nat) => x0 (nat.S x1)))
                        (x1:(cts.Term
                               cts.star
                               (cts.prod
                                  cts.box
                                  cts.star
                                  cts.star
                                  cts.I
                                  nat.nat
                                  (x1:(cts.Term cts.box nat.nat) => x0 (nat.S x1)))) =>
                         x0 x_366))))) =>
     auto:(cts.Term cts.star (nat.le (nat.S nat.O) (nat.S x_366))) =>
     P:(cts.Term
          cts.box
          (cts.prod'
             cts.box
             cts.box
             cts.box
             nat.nat
             (x0:(cts.Term cts.box nat.nat) => cts.univ cts.star cts.box cts.I))) =>
     auto':(cts.Term
              cts.star
              (cts.prod'
                 cts.box
                 cts.star
                 cts.star
                 nat.nat
                 (x1:(cts.Term cts.box nat.nat) => P (nat.S x1)))) =>
     auto' x_366)
    n.

def le_n_O_elim :
  cts.Term
    cts.star
    (cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       nat.nat
       (x:(cts.Term cts.box nat.nat) =>
        cts.prod
          cts.star
          cts.star
          cts.star
          cts.I
          (nat.le x nat.O)
          (x0:(cts.Term cts.star (nat.le x nat.O)) =>
           cts.prod
             cts.box
             cts.star
             cts.star
             cts.I
             (cts.prod
                cts.box
                cts.box
                cts.box
                cts.I
                nat.nat
                (x1:(cts.Term cts.box nat.nat) => cts.univ cts.star cts.box cts.I))
             (x1:(cts.Term
                    cts.box
                    (cts.prod
                       cts.box
                       cts.box
                       cts.box
                       cts.I
                       nat.nat
                       (x1:(cts.Term cts.box nat.nat) => cts.univ cts.star cts.box cts.I))) =>
              cts.prod
                cts.star
                cts.star
                cts.star
                cts.I
                (x1 nat.O)
                (x2:(cts.Term cts.star (x1 nat.O)) => x1 x)))))
  :=
  n:(cts.Term cts.box nat.nat) =>
  nat.match_nat_prop
    (__:(cts.Term cts.box nat.nat) =>
     cts.prod
       cts.star
       cts.star
       cts.star
       cts.I
       (nat.le __ nat.O)
       (x:(cts.Term cts.star (nat.le __ nat.O)) =>
        cts.prod
          cts.box
          cts.star
          cts.star
          cts.I
          (cts.prod
             cts.box
             cts.box
             cts.box
             cts.I
             nat.nat
             (x0:(cts.Term cts.box nat.nat) => cts.univ cts.star cts.box cts.I))
          (x0:(cts.Term
                 cts.box
                 (cts.prod
                    cts.box
                    cts.box
                    cts.box
                    cts.I
                    nat.nat
                    (x0:(cts.Term cts.box nat.nat) => cts.univ cts.star cts.box cts.I))) =>
           cts.prod
             cts.star
             cts.star
             cts.star
             cts.I
             (x0 nat.O)
             (x1:(cts.Term cts.star (x0 nat.O)) => x0 __))))
    (auto:(cts.Term cts.star (nat.le nat.O nat.O)) =>
     P:(cts.Term
          cts.box
          (cts.prod'
             cts.box
             cts.box
             cts.box
             nat.nat
             (x0:(cts.Term cts.box nat.nat) => cts.univ cts.star cts.box cts.I))) =>
     auto':(cts.Term cts.star (P nat.O)) => auto')
    (a:(cts.Term cts.box nat.nat) =>
     abs:(cts.Term cts.star (nat.le (nat.S a) nat.O)) =>
     connectives.falsity
       (cts.prod
          cts.box
          cts.star
          cts.star
          cts.I
          (cts.prod
             cts.box
             cts.box
             cts.box
             cts.I
             nat.nat
             (x:(cts.Term cts.box nat.nat) => cts.univ cts.star cts.box cts.I))
          (x:(cts.Term
                cts.box
                (cts.prod
                   cts.box
                   cts.box
                   cts.box
                   cts.I
                   nat.nat
                   (x:(cts.Term cts.box nat.nat) => cts.univ cts.star cts.box cts.I))) =>
           cts.prod
             cts.star
             cts.star
             cts.star
             cts.I
             (x nat.O)
             (x0:(cts.Term cts.star (x nat.O)) => x (nat.S a))))
       (logic.absurd (nat.le (nat.S a) nat.O) abs (nat.not_le_Sn_O a)))
    n.

def lt_to_not_eq :
  cts.Term
    cts.star
    (cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       nat.nat
       (x:(cts.Term cts.box nat.nat) =>
        cts.prod
          cts.box
          cts.star
          cts.star
          cts.I
          nat.nat
          (x0:(cts.Term cts.box nat.nat) =>
           cts.prod
             cts.star
             cts.star
             cts.star
             cts.I
             (nat.lt x x0)
             (x1:(cts.Term cts.star (nat.lt x x0)) => connectives.Not (logic.eq nat.nat x x0)))))
  :=
  n:(cts.Term cts.box nat.nat) =>
  m:(cts.Term cts.box nat.nat) =>
  H:(cts.Term cts.star (nat.le (nat.S n) m)) =>
  logic.not_to_not
    (logic.eq nat.nat n m)
    connectives.False
    (auto:(cts.Term cts.star (logic.eq nat.nat n m)) =>
     logic.absurd
       (nat.le (nat.S n) n)
       (logic.eq_coerc
          (nat.le (nat.S n) m)
          (nat.le (nat.S n) n)
          H
          (logic.rewrite_l
             nat.nat
             n
             (__:(cts.Term cts.box nat.nat) =>
              logic.eq
                (cts.univ cts.star cts.box cts.I)
                (nat.le (nat.S n) __)
                (nat.le (nat.S n) n))
             (logic.refl (cts.univ cts.star cts.box cts.I) (nat.le (nat.S n) n))
             m
             auto))
       (nat.not_le_Sn_n n))
    (connectives.nmk connectives.False (auto:(cts.Term cts.star connectives.False) => auto)).

def le_n_O_to_eq :
  cts.Term
    cts.star
    (cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       nat.nat
       (x:(cts.Term cts.box nat.nat) =>
        cts.prod
          cts.star
          cts.star
          cts.star
          cts.I
          (nat.le x nat.O)
          (x0:(cts.Term cts.star (nat.le x nat.O)) => logic.eq nat.nat nat.O x)))
  :=
  n:(cts.Term cts.box nat.nat) =>
  nat.match_nat_prop
    (__:(cts.Term cts.box nat.nat) =>
     cts.prod
       cts.star
       cts.star
       cts.star
       cts.I
       (nat.le __ nat.O)
       (x:(cts.Term cts.star (nat.le __ nat.O)) => logic.eq nat.nat nat.O __))
    (auto:(cts.Term cts.star (nat.le nat.O nat.O)) => logic.refl nat.nat nat.O)
    (a:(cts.Term cts.box nat.nat) =>
     abs:(cts.Term cts.star (nat.le (nat.S a) nat.O)) =>
     connectives.falsity
       (logic.eq nat.nat nat.O (nat.S a))
       (logic.absurd (nat.le (nat.S a) nat.O) abs (nat.not_le_Sn_O a)))
    n.

def le_to_le_to_eq :
  cts.Term
    cts.star
    (cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       nat.nat
       (x:(cts.Term cts.box nat.nat) =>
        cts.prod
          cts.box
          cts.star
          cts.star
          cts.I
          nat.nat
          (x0:(cts.Term cts.box nat.nat) =>
           cts.prod
             cts.star
             cts.star
             cts.star
             cts.I
             (nat.le x x0)
             (x1:(cts.Term cts.star (nat.le x x0)) =>
              cts.prod
                cts.star
                cts.star
                cts.star
                cts.I
                (nat.le x0 x)
                (x2:(cts.Term cts.star (nat.le x0 x)) => logic.eq nat.nat x x0)))))
  :=
  nat.nat_elim2
    (__:(cts.Term cts.box nat.nat) =>
     _0:(cts.Term cts.box nat.nat) =>
     cts.prod
       cts.star
       cts.star
       cts.star
       cts.I
       (nat.le __ _0)
       (x:(cts.Term cts.star (nat.le __ _0)) =>
        cts.prod
          cts.star
          cts.star
          cts.star
          cts.I
          (nat.le _0 __)
          (x0:(cts.Term cts.star (nat.le _0 __)) => logic.eq nat.nat __ _0)))
    (n:(cts.Term cts.box nat.nat) =>
     auto:(cts.Term cts.star (nat.le nat.O n)) =>
     auto':(cts.Term cts.star (nat.le n nat.O)) =>
     logic.sym_eq
       nat.nat
       n
       nat.O
       (logic.sym_eq
          nat.nat
          nat.O
          n
          (logic.eq_coerc
             (logic.eq nat.nat nat.O n)
             (logic.eq nat.nat nat.O n)
             (nat.le_n_O_to_eq n auto')
             (logic.refl (cts.univ cts.star cts.box cts.I) (logic.eq nat.nat nat.O n)))))
    (n:(cts.Term cts.box nat.nat) =>
     auto:(cts.Term cts.star (nat.le (nat.S n) nat.O)) =>
     auto':(cts.Term cts.star (nat.le nat.O (nat.S n))) =>
     logic.sym_eq nat.nat nat.O (nat.S n) (nat.le_n_O_to_eq (nat.S n) auto))
    (n:(cts.Term cts.box nat.nat) =>
     m:(cts.Term cts.box nat.nat) =>
     auto:(cts.Term
             cts.star
             (cts.prod'
                cts.star
                cts.star
                cts.star
                (nat.le n m)
                (x:(cts.Term cts.star (nat.le n m)) =>
                 cts.prod
                   cts.star
                   cts.star
                   cts.star
                   cts.I
                   (nat.le m n)
                   (x0:(cts.Term cts.star (nat.le m n)) => logic.eq nat.nat n m)))) =>
     auto':(cts.Term cts.star (nat.le (nat.S n) (nat.S m))) =>
     auto'':(cts.Term cts.star (nat.le (nat.S m) (nat.S n))) =>
     logic.eq_f
       nat.nat
       nat.nat
       nat.S
       n
       m
       (auto
          (logic.eq_coerc
             (nat.le (nat.pred (nat.S n)) (nat.pred (nat.S m)))
             (nat.le n m)
             (nat.monotonic_pred (nat.S n) (nat.S m) auto')
             (logic.rewrite_l
                nat.nat
                n
                (__:(cts.Term cts.box nat.nat) =>
                 logic.eq
                   (cts.univ cts.star cts.box cts.I)
                   (nat.le __ (nat.pred (nat.S m)))
                   (nat.le n m))
                (logic.rewrite_l
                   nat.nat
                   m
                   (__:(cts.Term cts.box nat.nat) =>
                    logic.eq (cts.univ cts.star cts.box cts.I) (nat.le n __) (nat.le n m))
                   (logic.refl (cts.univ cts.star cts.box cts.I) (nat.le n m))
                   (nat.pred (nat.S m))
                   (nat.pred_Sn m))
                (nat.pred (nat.S n))
                (nat.pred_Sn n)))
          (logic.eq_coerc
             (nat.le (nat.pred (nat.S m)) (nat.pred (nat.S n)))
             (nat.le m n)
             (nat.monotonic_pred (nat.S m) (nat.S n) auto'')
             (logic.rewrite_l
                nat.nat
                m
                (__:(cts.Term cts.box nat.nat) =>
                 logic.eq
                   (cts.univ cts.star cts.box cts.I)
                   (nat.le __ (nat.pred (nat.S n)))
                   (nat.le m n))
                (logic.rewrite_l
                   nat.nat
                   n
                   (__:(cts.Term cts.box nat.nat) =>
                    logic.eq (cts.univ cts.star cts.box cts.I) (nat.le m __) (nat.le m n))
                   (logic.refl (cts.univ cts.star cts.box cts.I) (nat.le m n))
                   (nat.pred (nat.S n))
                   (nat.pred_Sn n))
                (nat.pred (nat.S m))
                (nat.pred_Sn m))))).

def plus_minus :
  cts.Term
    cts.star
    (cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       nat.nat
       (x:(cts.Term cts.box nat.nat) =>
        cts.prod
          cts.box
          cts.star
          cts.star
          cts.I
          nat.nat
          (x0:(cts.Term cts.box nat.nat) =>
           cts.prod
             cts.box
             cts.star
             cts.star
             cts.I
             nat.nat
             (x1:(cts.Term cts.box nat.nat) =>
              cts.prod
                cts.star
                cts.star
                cts.star
                cts.I
                (nat.le x x0)
                (x2:(cts.Term cts.star (nat.le x x0)) =>
                 logic.eq nat.nat (nat.plus (nat.minus x0 x) x1) (nat.minus (nat.plus x0 x1) x))))))
  :=
  nat.nat_elim2
    (__:(cts.Term cts.box nat.nat) =>
     _0:(cts.Term cts.box nat.nat) =>
     cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       nat.nat
       (x:(cts.Term cts.box nat.nat) =>
        cts.prod
          cts.star
          cts.star
          cts.star
          cts.I
          (nat.le __ _0)
          (x0:(cts.Term cts.star (nat.le __ _0)) =>
           logic.eq nat.nat (nat.plus (nat.minus _0 __) x) (nat.minus (nat.plus _0 x) __))))
    (n:(cts.Term cts.box nat.nat) =>
     p:(cts.Term cts.box nat.nat) =>
     auto:(cts.Term cts.star (nat.le nat.O n)) =>
     logic.rewrite_l
       nat.nat
       n
       (__:(cts.Term cts.box nat.nat) =>
        logic.eq nat.nat (nat.plus __ p) (nat.minus (nat.plus n p) nat.O))
       (logic.rewrite_l
          nat.nat
          (nat.plus n p)
          (__:(cts.Term cts.box nat.nat) => logic.eq nat.nat (nat.plus n p) __)
          (logic.refl nat.nat (nat.plus n p))
          (nat.minus (nat.plus n p) nat.O)
          (nat.minus_n_O (nat.plus n p)))
       (nat.minus n nat.O)
       (nat.minus_n_O n))
    (n:(cts.Term cts.box nat.nat) =>
     p:(cts.Term cts.box nat.nat) =>
     abs:(cts.Term cts.star (nat.le (nat.S n) nat.O)) =>
     connectives.falsity
       (logic.eq
          nat.nat
          (nat.plus (nat.minus nat.O (nat.S n)) p)
          (nat.minus (nat.plus nat.O p) (nat.S n)))
       (logic.absurd (nat.le (nat.S n) nat.O) abs (nat.not_le_Sn_O n)))
    (n:(cts.Term cts.box nat.nat) =>
     m:(cts.Term cts.box nat.nat) =>
     nat.sym_eq_minus
       (nat.S m)
       (y:(cts.Term
             cts.box
             (cts.prod'
                cts.box
                cts.box
                cts.box
                nat.nat
                (x0:(cts.Term cts.box nat.nat) => nat.nat))) =>
        cts.prod
          cts.star
          cts.star
          cts.star
          cts.I
          (cts.prod
             cts.box
             cts.star
             cts.star
             cts.I
             nat.nat
             (x:(cts.Term cts.box nat.nat) =>
              cts.prod
                cts.star
                cts.star
                cts.star
                cts.I
                (nat.le n m)
                (x0:(cts.Term cts.star (nat.le n m)) =>
                 logic.eq nat.nat (nat.plus (nat.minus m n) x) (nat.minus (nat.plus m x) n))))
          (x:(cts.Term
                cts.star
                (cts.prod
                   cts.box
                   cts.star
                   cts.star
                   cts.I
                   nat.nat
                   (x:(cts.Term cts.box nat.nat) =>
                    cts.prod
                      cts.star
                      cts.star
                      cts.star
                      cts.I
                      (nat.le n m)
                      (x0:(cts.Term cts.star (nat.le n m)) =>
                       logic.eq
                         nat.nat
                         (nat.plus (nat.minus m n) x)
                         (nat.minus (nat.plus m x) n))))) =>
           cts.prod
             cts.box
             cts.star
             cts.star
             cts.I
             nat.nat
             (x0:(cts.Term cts.box nat.nat) =>
              cts.prod
                cts.star
                cts.star
                cts.star
                cts.I
                (nat.le (nat.S n) (nat.S m))
                (x1:(cts.Term cts.star (nat.le (nat.S n) (nat.S m))) =>
                 logic.eq
                   nat.nat
                   (nat.plus (y (nat.S n)) x0)
                   (nat.minus (nat.plus (nat.S m) x0) (nat.S n))))))
       (nat.sym_eq_filter_nat_type_S
          (cts.prod cts.box cts.box cts.box cts.I nat.nat (x:(cts.Term cts.box nat.nat) => nat.nat))
          nat.minus_body
          m
          (y:(cts.Term
                cts.box
                (cts.prod'
                   cts.box
                   cts.box
                   cts.box
                   nat.nat
                   (x:(cts.Term cts.box nat.nat) => nat.nat))) =>
           cts.prod
             cts.star
             cts.star
             cts.star
             cts.I
             (cts.prod
                cts.box
                cts.star
                cts.star
                cts.I
                nat.nat
                (x:(cts.Term cts.box nat.nat) =>
                 cts.prod
                   cts.star
                   cts.star
                   cts.star
                   cts.I
                   (nat.le n m)
                   (x0:(cts.Term cts.star (nat.le n m)) =>
                    logic.eq nat.nat (nat.plus (nat.minus m n) x) (nat.minus (nat.plus m x) n))))
             (x:(cts.Term
                   cts.star
                   (cts.prod
                      cts.box
                      cts.star
                      cts.star
                      cts.I
                      nat.nat
                      (x:(cts.Term cts.box nat.nat) =>
                       cts.prod
                         cts.star
                         cts.star
                         cts.star
                         cts.I
                         (nat.le n m)
                         (x0:(cts.Term cts.star (nat.le n m)) =>
                          logic.eq
                            nat.nat
                            (nat.plus (nat.minus m n) x)
                            (nat.minus (nat.plus m x) n))))) =>
              cts.prod
                cts.box
                cts.star
                cts.star
                cts.I
                nat.nat
                (x0:(cts.Term cts.box nat.nat) =>
                 cts.prod
                   cts.star
                   cts.star
                   cts.star
                   cts.I
                   (nat.le (nat.S n) (nat.S m))
                   (x1:(cts.Term cts.star (nat.le (nat.S n) (nat.S m))) =>
                    logic.eq
                      nat.nat
                      (nat.plus (y (nat.S n)) x0)
                      (nat.minus (nat.plus (nat.S m) x0) (nat.S n))))))
          (nat.sym_eq_minus_body_S
             m
             (y:(cts.Term
                   cts.box
                   (cts.prod'
                      cts.box
                      cts.box
                      cts.box
                      nat.nat
                      (x0:(cts.Term cts.box nat.nat) => nat.nat))) =>
              cts.prod
                cts.star
                cts.star
                cts.star
                cts.I
                (cts.prod
                   cts.box
                   cts.star
                   cts.star
                   cts.I
                   nat.nat
                   (x:(cts.Term cts.box nat.nat) =>
                    cts.prod
                      cts.star
                      cts.star
                      cts.star
                      cts.I
                      (nat.le n m)
                      (x0:(cts.Term cts.star (nat.le n m)) =>
                       logic.eq
                         nat.nat
                         (nat.plus (nat.minus m n) x)
                         (nat.minus (nat.plus m x) n))))
                (x:(cts.Term
                      cts.star
                      (cts.prod
                         cts.box
                         cts.star
                         cts.star
                         cts.I
                         nat.nat
                         (x:(cts.Term cts.box nat.nat) =>
                          cts.prod
                            cts.star
                            cts.star
                            cts.star
                            cts.I
                            (nat.le n m)
                            (x0:(cts.Term cts.star (nat.le n m)) =>
                             logic.eq
                               nat.nat
                               (nat.plus (nat.minus m n) x)
                               (nat.minus (nat.plus m x) n))))) =>
                 cts.prod
                   cts.box
                   cts.star
                   cts.star
                   cts.I
                   nat.nat
                   (x0:(cts.Term cts.box nat.nat) =>
                    cts.prod
                      cts.star
                      cts.star
                      cts.star
                      cts.I
                      (nat.le (nat.S n) (nat.S m))
                      (x1:(cts.Term cts.star (nat.le (nat.S n) (nat.S m))) =>
                       logic.eq
                         nat.nat
                         (nat.plus (y (nat.S n)) x0)
                         (nat.minus (nat.plus (nat.S m) x0) (nat.S n))))))
             (auto:(cts.Term
                      cts.star
                      (cts.prod'
                         cts.box
                         cts.star
                         cts.star
                         nat.nat
                         (x:(cts.Term cts.box nat.nat) =>
                          cts.prod
                            cts.star
                            cts.star
                            cts.star
                            cts.I
                            (nat.le n m)
                            (x0:(cts.Term cts.star (nat.le n m)) =>
                             logic.eq
                               nat.nat
                               (nat.plus (nat.minus m n) x)
                               (nat.minus (nat.plus m x) n))))) =>
              p:(cts.Term cts.box nat.nat) =>
              nat.sym_eq_match_nat_type_S
                nat.nat
                (nat.S m)
                (q:(cts.Term cts.box nat.nat) => nat.minus m q)
                n
                (y:(cts.Term cts.box nat.nat) =>
                 cts.prod
                   cts.star
                   cts.star
                   cts.star
                   cts.I
                   (nat.le (nat.S n) (nat.S m))
                   (x:(cts.Term cts.star (nat.le (nat.S n) (nat.S m))) =>
                    logic.eq nat.nat (nat.plus y p) (nat.minus (nat.plus (nat.S m) p) (nat.S n))))
                (nat.sym_eq_minus
                   (nat.plus (nat.S m) p)
                   (y:(cts.Term
                         cts.box
                         (cts.prod'
                            cts.box
                            cts.box
                            cts.box
                            nat.nat
                            (x0:(cts.Term cts.box nat.nat) => nat.nat))) =>
                    cts.prod
                      cts.star
                      cts.star
                      cts.star
                      cts.I
                      (nat.le (nat.S n) (nat.S m))
                      (x:(cts.Term cts.star (nat.le (nat.S n) (nat.S m))) =>
                       logic.eq nat.nat (nat.plus (nat.minus m n) p) (y (nat.S n))))
                   (nat.sym_eq_plus
                      (nat.S m)
                      (y:(cts.Term
                            cts.box
                            (cts.prod'
                               cts.box
                               cts.box
                               cts.box
                               nat.nat
                               (x0:(cts.Term cts.box nat.nat) => nat.nat))) =>
                       cts.prod
                         cts.star
                         cts.star
                         cts.star
                         cts.I
                         (nat.le (nat.S n) (nat.S m))
                         (x:(cts.Term cts.star (nat.le (nat.S n) (nat.S m))) =>
                          logic.eq
                            nat.nat
                            (nat.plus (nat.minus m n) p)
                            (nat.filter_nat_type
                               (cts.prod
                                  cts.box
                                  cts.box
                                  cts.box
                                  cts.I
                                  nat.nat
                                  (x0:(cts.Term cts.box nat.nat) => nat.nat))
                               nat.minus_body
                               (y p)
                               (nat.S n))))
                      (nat.sym_eq_filter_nat_type_S
                         (cts.prod
                            cts.box
                            cts.box
                            cts.box
                            cts.I
                            nat.nat
                            (x:(cts.Term cts.box nat.nat) => nat.nat))
                         nat.plus_body
                         m
                         (y:(cts.Term
                               cts.box
                               (cts.prod'
                                  cts.box
                                  cts.box
                                  cts.box
                                  nat.nat
                                  (x:(cts.Term cts.box nat.nat) => nat.nat))) =>
                          cts.prod
                            cts.star
                            cts.star
                            cts.star
                            cts.I
                            (nat.le (nat.S n) (nat.S m))
                            (x:(cts.Term cts.star (nat.le (nat.S n) (nat.S m))) =>
                             logic.eq
                               nat.nat
                               (nat.plus (nat.minus m n) p)
                               (nat.filter_nat_type
                                  (cts.prod
                                     cts.box
                                     cts.box
                                     cts.box
                                     cts.I
                                     nat.nat
                                     (x0:(cts.Term cts.box nat.nat) => nat.nat))
                                  nat.minus_body
                                  (y p)
                                  (nat.S n))))
                         (nat.sym_eq_plus_body_S
                            m
                            (y:(cts.Term
                                  cts.box
                                  (cts.prod'
                                     cts.box
                                     cts.box
                                     cts.box
                                     nat.nat
                                     (x0:(cts.Term cts.box nat.nat) => nat.nat))) =>
                             cts.prod
                               cts.star
                               cts.star
                               cts.star
                               cts.I
                               (nat.le (nat.S n) (nat.S m))
                               (x:(cts.Term cts.star (nat.le (nat.S n) (nat.S m))) =>
                                logic.eq
                                  nat.nat
                                  (nat.plus (nat.minus m n) p)
                                  (nat.filter_nat_type
                                     (cts.prod
                                        cts.box
                                        cts.box
                                        cts.box
                                        cts.I
                                        nat.nat
                                        (x0:(cts.Term cts.box nat.nat) => nat.nat))
                                     nat.minus_body
                                     (y p)
                                     (nat.S n))))
                            (nat.sym_eq_filter_nat_type_S
                               (cts.prod
                                  cts.box
                                  cts.box
                                  cts.box
                                  cts.I
                                  nat.nat
                                  (x:(cts.Term cts.box nat.nat) => nat.nat))
                               nat.minus_body
                               (nat.plus m p)
                               (y:(cts.Term
                                     cts.box
                                     (cts.prod'
                                        cts.box
                                        cts.box
                                        cts.box
                                        nat.nat
                                        (x:(cts.Term cts.box nat.nat) => nat.nat))) =>
                                cts.prod
                                  cts.star
                                  cts.star
                                  cts.star
                                  cts.I
                                  (nat.le (nat.S n) (nat.S m))
                                  (x:(cts.Term cts.star (nat.le (nat.S n) (nat.S m))) =>
                                   logic.eq
                                     nat.nat
                                     (nat.plus (nat.minus m n) p)
                                     (y (nat.S n))))
                               (nat.eq_plus_body_S
                                  m
                                  (y:(cts.Term
                                        cts.box
                                        (cts.prod'
                                           cts.box
                                           cts.box
                                           cts.box
                                           nat.nat
                                           (x0:(cts.Term cts.box nat.nat) => nat.nat))) =>
                                   cts.prod
                                     cts.star
                                     cts.star
                                     cts.star
                                     cts.I
                                     (nat.le (nat.S n) (nat.S m))
                                     (x:(cts.Term cts.star (nat.le (nat.S n) (nat.S m))) =>
                                      logic.eq
                                        nat.nat
                                        (nat.plus (nat.minus m n) p)
                                        (nat.minus_body (y p) (nat.S n))))
                                  (nat.eq_filter_nat_type_S
                                     (cts.prod
                                        cts.box
                                        cts.box
                                        cts.box
                                        cts.I
                                        nat.nat
                                        (x:(cts.Term cts.box nat.nat) => nat.nat))
                                     nat.plus_body
                                     m
                                     (y:(cts.Term
                                           cts.box
                                           (cts.prod'
                                              cts.box
                                              cts.box
                                              cts.box
                                              nat.nat
                                              (x:(cts.Term cts.box nat.nat) =>
                                               nat.nat))) =>
                                      cts.prod
                                        cts.star
                                        cts.star
                                        cts.star
                                        cts.I
                                        (nat.le (nat.S n) (nat.S m))
                                        (x:(cts.Term
                                              cts.star
                                              (nat.le (nat.S n) (nat.S m))) =>
                                         logic.eq
                                           nat.nat
                                           (nat.plus (nat.minus m n) p)
                                           (nat.minus_body (y p) (nat.S n))))
                                     (nat.eq_plus
                                        (nat.S m)
                                        (y:(cts.Term
                                              cts.box
                                              (cts.prod'
                                                 cts.box
                                                 cts.box
                                                 cts.box
                                                 nat.nat
                                                 (x0:(cts.Term cts.box nat.nat) =>
                                                  nat.nat))) =>
                                         cts.prod
                                           cts.star
                                           cts.star
                                           cts.star
                                           cts.I
                                           (nat.le (nat.S n) (nat.S m))
                                           (x:(cts.Term
                                                 cts.star
                                                 (nat.le (nat.S n) (nat.S m))) =>
                                            logic.eq
                                              nat.nat
                                              (nat.plus (nat.minus m n) p)
                                              (nat.minus_body (y p) (nat.S n))))
                                        (nat.sym_eq_plus
                                           (nat.S m)
                                           (y:(cts.Term
                                                 cts.box
                                                 (cts.prod'
                                                    cts.box
                                                    cts.box
                                                    cts.box
                                                    nat.nat
                                                    (x0:(cts.Term
                                                           cts.box
                                                           nat.nat) =>
                                                     nat.nat))) =>
                                            cts.prod
                                              cts.star
                                              cts.star
                                              cts.star
                                              cts.I
                                              (nat.le (nat.S n) (nat.S m))
                                              (x:(cts.Term
                                                    cts.star
                                                    (nat.le (nat.S n) (nat.S m))) =>
                                               logic.eq
                                                 nat.nat
                                                 (nat.plus (nat.minus m n) p)
                                                 (nat.minus_body (y p) (nat.S n))))
                                           (nat.sym_eq_filter_nat_type_S
                                              (cts.prod
                                                 cts.box
                                                 cts.box
                                                 cts.box
                                                 cts.I
                                                 nat.nat
                                                 (x:(cts.Term cts.box nat.nat) =>
                                                  nat.nat))
                                              nat.plus_body
                                              m
                                              (y:(cts.Term
                                                    cts.box
                                                    (cts.prod'
                                                       cts.box
                                                       cts.box
                                                       cts.box
                                                       nat.nat
                                                       (x:(cts.Term
                                                             cts.box
                                                             nat.nat) =>
                                                        nat.nat))) =>
                                               cts.prod
                                                 cts.star
                                                 cts.star
                                                 cts.star
                                                 cts.I
                                                 (nat.le (nat.S n) (nat.S m))
                                                 (x:(cts.Term
                                                       cts.star
                                                       (nat.le (nat.S n) (nat.S m))) =>
                                                  logic.eq
                                                    nat.nat
                                                    (nat.plus (nat.minus m n) p)
                                                    (nat.minus_body (y p) (nat.S n))))
                                              (nat.sym_eq_plus_body_S
                                                 m
                                                 (y:(cts.Term
                                                       cts.box
                                                       (cts.prod'
                                                          cts.box
                                                          cts.box
                                                          cts.box
                                                          nat.nat
                                                          (x0:(cts.Term
                                                                 cts.box
                                                                 nat.nat) =>
                                                           nat.nat))) =>
                                                  cts.prod
                                                    cts.star
                                                    cts.star
                                                    cts.star
                                                    cts.I
                                                    (nat.le (nat.S n) (nat.S m))
                                                    (x:(cts.Term
                                                          cts.star
                                                          (nat.le
                                                             (nat.S n)
                                                             (nat.S m))) =>
                                                     logic.eq
                                                       nat.nat
                                                       (nat.plus (nat.minus m n) p)
                                                       (nat.minus_body
                                                          (y p)
                                                          (nat.S n))))
                                                 (nat.sym_eq_minus_body_S
                                                    (nat.plus m p)
                                                    (y:(cts.Term
                                                          cts.box
                                                          (cts.prod'
                                                             cts.box
                                                             cts.box
                                                             cts.box
                                                             nat.nat
                                                             (x0:(cts.Term
                                                                    cts.box
                                                                    nat.nat) =>
                                                              nat.nat))) =>
                                                     cts.prod
                                                       cts.star
                                                       cts.star
                                                       cts.star
                                                       cts.I
                                                       (nat.le (nat.S n) (nat.S m))
                                                       (x:(cts.Term
                                                             cts.star
                                                             (nat.le
                                                                (nat.S n)
                                                                (nat.S m))) =>
                                                        logic.eq
                                                          nat.nat
                                                          (nat.plus
                                                             (nat.minus m n)
                                                             p)
                                                          (y (nat.S n))))
                                                    (nat.sym_eq_match_nat_type_S
                                                       nat.nat
                                                       (nat.S (nat.plus m p))
                                                       (q:(cts.Term
                                                             cts.box
                                                             nat.nat) =>
                                                        nat.minus (nat.plus m p) q)
                                                       n
                                                       (y:(cts.Term
                                                             cts.box
                                                             nat.nat) =>
                                                        cts.prod
                                                          cts.star
                                                          cts.star
                                                          cts.star
                                                          cts.I
                                                          (nat.le
                                                             (nat.S n)
                                                             (nat.S m))
                                                          (x:(cts.Term
                                                                cts.star
                                                                (nat.le
                                                                   (nat.S n)
                                                                   (nat.S m))) =>
                                                           logic.eq
                                                             nat.nat
                                                             (nat.plus
                                                                (nat.minus m n)
                                                                p)
                                                             y))
                                                       (auto':(cts.Term
                                                                 cts.star
                                                                 (nat.le
                                                                    (nat.S n)
                                                                    (nat.S m))) =>
                                                        auto
                                                          p
                                                          (logic.eq_coerc
                                                             (nat.le
                                                                (nat.pred
                                                                   (nat.S n))
                                                                (nat.pred
                                                                   (nat.S m)))
                                                             (nat.le n m)
                                                             (nat.monotonic_pred
                                                                (nat.S n)
                                                                (nat.S m)
                                                                auto')
                                                             (logic.rewrite_l
                                                                nat.nat
                                                                n
                                                                (__:(
                                                                 cts.Term
                                                                   cts.box
                                                                   nat.nat) =>
                                                                 logic.eq
                                                                   (cts.univ
                                                                    cts.star
                                                                    cts.box
                                                                    cts.I)
                                                                   (nat.le
                                                                    __
                                                                    (nat.pred
                                                                    (nat.S
                                                                    m)))
                                                                   (nat.le n m))
                                                                (logic.rewrite_l
                                                                   nat.nat
                                                                   m
                                                                   (__:(
                                                                    cts.Term
                                                                    cts.box
                                                                    nat.nat) =>
                                                                    logic.eq
                                                                    (cts.univ
                                                                    cts.star
                                                                    cts.box
                                                                    cts.I)
                                                                    (nat.le
                                                                    n
                                                                    __)
                                                                    (nat.le
                                                                    n
                                                                    m))
                                                                   (logic.refl
                                                                    (cts.univ
                                                                    cts.star
                                                                    cts.box
                                                                    cts.I)
                                                                    (nat.le
                                                                    n
                                                                    m))
                                                                   (nat.pred
                                                                    (nat.S m))
                                                                   (nat.pred_Sn
                                                                    m))
                                                                (nat.pred
                                                                   (nat.S n))
                                                                (nat.pred_Sn n))))))))))))))))))))).

def minus_plus_m_m :
  cts.Term
    cts.star
    (cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       nat.nat
       (x:(cts.Term cts.box nat.nat) =>
        cts.prod
          cts.box
          cts.star
          cts.star
          cts.I
          nat.nat
          (x0:(cts.Term cts.box nat.nat) => logic.eq nat.nat x (nat.minus (nat.plus x x0) x0))))
  :=
  n:(cts.Term cts.box nat.nat) =>
  m:(cts.Term cts.box nat.nat) =>
  logic.eq_coerc
    (logic.eq nat.nat (nat.plus (nat.minus m m) n) (nat.minus (nat.plus m n) m))
    (logic.eq nat.nat n (nat.minus (nat.plus n m) m))
    (nat.plus_minus m m n (nat.le_n m))
    (logic.rewrite_l
       nat.nat
       nat.O
       (__:(cts.Term cts.box nat.nat) =>
        logic.eq
          (cts.univ cts.star cts.box cts.I)
          (logic.eq nat.nat (nat.plus __ n) (nat.minus (nat.plus m n) m))
          (logic.eq nat.nat n (nat.minus (nat.plus n m) m)))
       (logic.rewrite_l
          nat.nat
          n
          (__:(cts.Term cts.box nat.nat) =>
           logic.eq
             (cts.univ cts.star cts.box cts.I)
             (logic.eq nat.nat __ (nat.minus (nat.plus m n) m))
             (logic.eq nat.nat n (nat.minus (nat.plus n m) m)))
          (logic.rewrite_r
             nat.nat
             (nat.plus n m)
             (__:(cts.Term cts.box nat.nat) =>
              logic.eq
                (cts.univ cts.star cts.box cts.I)
                (logic.eq nat.nat n (nat.minus __ m))
                (logic.eq nat.nat n (nat.minus (nat.plus n m) m)))
             (logic.refl
                (cts.univ cts.star cts.box cts.I)
                (logic.eq nat.nat n (nat.minus (nat.plus n m) m)))
             (nat.plus m n)
             (nat.commutative_plus m n))
          (nat.plus nat.O n)
          (nat.plus_O_n n))
       (nat.minus m m)
       (nat.minus_n_n m)).

def plus_minus_m_m :
  cts.Term
    cts.star
    (cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       nat.nat
       (x:(cts.Term cts.box nat.nat) =>
        cts.prod
          cts.box
          cts.star
          cts.star
          cts.I
          nat.nat
          (x0:(cts.Term cts.box nat.nat) =>
           cts.prod
             cts.star
             cts.star
             cts.star
             cts.I
             (nat.le x0 x)
             (x1:(cts.Term cts.star (nat.le x0 x)) =>
              logic.eq nat.nat x (nat.plus (nat.minus x x0) x0)))))
  :=
  n:(cts.Term cts.box nat.nat) =>
  m:(cts.Term cts.box nat.nat) =>
  lemn:(cts.Term cts.star (nat.le m n)) =>
  logic.sym_eq
    nat.nat
    (nat.plus (nat.minus n m) m)
    n
    (logic.eq_coerc
       (logic.eq nat.nat (nat.plus (nat.minus n m) m) (nat.minus (nat.plus n m) m))
       (logic.eq nat.nat (nat.plus (nat.minus n m) m) n)
       (nat.plus_minus m n m lemn)
       (logic.rewrite_r
          nat.nat
          (nat.plus m (nat.minus n m))
          (__:(cts.Term cts.box nat.nat) =>
           logic.eq
             (cts.univ cts.star cts.box cts.I)
             (logic.eq nat.nat (nat.plus (nat.minus n m) m) (nat.minus (nat.plus n m) m))
             (logic.eq nat.nat __ n))
          (logic.rewrite_r
             nat.nat
             (nat.plus m (nat.minus n m))
             (__:(cts.Term cts.box nat.nat) =>
              logic.eq
                (cts.univ cts.star cts.box cts.I)
                (logic.eq nat.nat __ (nat.minus (nat.plus n m) m))
                (logic.eq nat.nat (nat.plus m (nat.minus n m)) n))
             (logic.rewrite_l
                nat.nat
                n
                (__:(cts.Term cts.box nat.nat) =>
                 logic.eq
                   (cts.univ cts.star cts.box cts.I)
                   (logic.eq nat.nat (nat.plus m (nat.minus n m)) __)
                   (logic.eq nat.nat (nat.plus m (nat.minus n m)) n))
                (logic.refl
                   (cts.univ cts.star cts.box cts.I)
                   (logic.eq nat.nat (nat.plus m (nat.minus n m)) n))
                (nat.minus (nat.plus n m) m)
                (nat.minus_plus_m_m n m))
             (nat.plus (nat.minus n m) m)
             (nat.commutative_plus (nat.minus n m) m))
          (nat.plus (nat.minus n m) m)
          (nat.commutative_plus (nat.minus n m) m))).

def minus_to_plus :
  cts.Term
    cts.star
    (cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       nat.nat
       (x:(cts.Term cts.box nat.nat) =>
        cts.prod
          cts.box
          cts.star
          cts.star
          cts.I
          nat.nat
          (x0:(cts.Term cts.box nat.nat) =>
           cts.prod
             cts.box
             cts.star
             cts.star
             cts.I
             nat.nat
             (x1:(cts.Term cts.box nat.nat) =>
              cts.prod
                cts.star
                cts.star
                cts.star
                cts.I
                (nat.le x0 x)
                (x2:(cts.Term cts.star (nat.le x0 x)) =>
                 cts.prod
                   cts.star
                   cts.star
                   cts.star
                   cts.I
                   (logic.eq nat.nat (nat.minus x x0) x1)
                   (x3:(cts.Term cts.star (logic.eq nat.nat (nat.minus x x0) x1)) =>
                    logic.eq nat.nat x (nat.plus x0 x1)))))))
  :=
  n:(cts.Term cts.box nat.nat) =>
  m:(cts.Term cts.box nat.nat) =>
  p:(cts.Term cts.box nat.nat) =>
  lemn:(cts.Term cts.star (nat.le m n)) =>
  eqp:(cts.Term cts.star (logic.eq nat.nat (nat.minus n m) p)) =>
  logic.eq_coerc
    (logic.eq nat.nat n (nat.plus (nat.minus n m) m))
    (logic.eq nat.nat n (nat.plus m p))
    (nat.plus_minus_m_m n m lemn)
    (logic.rewrite_r
       nat.nat
       (nat.plus m (nat.minus n m))
       (__:(cts.Term cts.box nat.nat) =>
        logic.eq
          (cts.univ cts.star cts.box cts.I)
          (logic.eq nat.nat n __)
          (logic.eq nat.nat n (nat.plus m p)))
       (logic.rewrite_r
          nat.nat
          p
          (__:(cts.Term cts.box nat.nat) =>
           logic.eq
             (cts.univ cts.star cts.box cts.I)
             (logic.eq nat.nat n (nat.plus m __))
             (logic.eq nat.nat n (nat.plus m p)))
          (logic.refl (cts.univ cts.star cts.box cts.I) (logic.eq nat.nat n (nat.plus m p)))
          (nat.minus n m)
          eqp)
       (nat.plus (nat.minus n m) m)
       (nat.commutative_plus (nat.minus n m) m)).

def plus_to_minus :
  cts.Term
    cts.star
    (cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       nat.nat
       (x:(cts.Term cts.box nat.nat) =>
        cts.prod
          cts.box
          cts.star
          cts.star
          cts.I
          nat.nat
          (x0:(cts.Term cts.box nat.nat) =>
           cts.prod
             cts.box
             cts.star
             cts.star
             cts.I
             nat.nat
             (x1:(cts.Term cts.box nat.nat) =>
              cts.prod
                cts.star
                cts.star
                cts.star
                cts.I
                (logic.eq nat.nat x (nat.plus x0 x1))
                (x2:(cts.Term cts.star (logic.eq nat.nat x (nat.plus x0 x1))) =>
                 logic.eq nat.nat (nat.minus x x0) x1)))))
  :=
  n:(cts.Term cts.box nat.nat) =>
  m:(cts.Term cts.box nat.nat) =>
  p:(cts.Term cts.box nat.nat) =>
  eqp:(cts.Term cts.star (logic.eq nat.nat n (nat.plus m p))) =>
  logic.sym_eq
    nat.nat
    p
    (nat.minus n m)
    (logic.eq_coerc
       (logic.eq nat.nat p (nat.minus (nat.plus p m) m))
       (logic.eq nat.nat p (nat.minus n m))
       (nat.minus_plus_m_m p m)
       (logic.rewrite_r
          nat.nat
          (nat.plus m p)
          (__:(cts.Term cts.box nat.nat) =>
           logic.eq
             (cts.univ cts.star cts.box cts.I)
             (logic.eq nat.nat p (nat.minus __ m))
             (logic.eq nat.nat p (nat.minus n m)))
          (logic.rewrite_l
             nat.nat
             n
             (__:(cts.Term cts.box nat.nat) =>
              logic.eq
                (cts.univ cts.star cts.box cts.I)
                (logic.eq nat.nat p (nat.minus __ m))
                (logic.eq nat.nat p (nat.minus n m)))
             (logic.refl (cts.univ cts.star cts.box cts.I) (logic.eq nat.nat p (nat.minus n m)))
             (nat.plus m p)
             eqp)
          (nat.plus p m)
          (nat.commutative_plus p m))).

def monotonic_le_minus_l :
  cts.Term
    cts.star
    (cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       nat.nat
       (x:(cts.Term cts.box nat.nat) =>
        cts.prod
          cts.box
          cts.star
          cts.star
          cts.I
          nat.nat
          (x0:(cts.Term cts.box nat.nat) =>
           cts.prod
             cts.box
             cts.star
             cts.star
             cts.I
             nat.nat
             (x1:(cts.Term cts.box nat.nat) =>
              cts.prod
                cts.star
                cts.star
                cts.star
                cts.I
                (nat.le x0 x)
                (x2:(cts.Term cts.star (nat.le x0 x)) =>
                 nat.le (nat.minus x0 x1) (nat.minus x x1))))))
  :=
  nat.nat_elim2
    (__:(cts.Term cts.box nat.nat) =>
     _0:(cts.Term cts.box nat.nat) =>
     cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       nat.nat
       (x:(cts.Term cts.box nat.nat) =>
        cts.prod
          cts.star
          cts.star
          cts.star
          cts.I
          (nat.le _0 __)
          (x0:(cts.Term cts.star (nat.le _0 __)) => nat.le (nat.minus _0 x) (nat.minus __ x))))
    (p:(cts.Term cts.box nat.nat) =>
     q:(cts.Term cts.box nat.nat) =>
     lePO:(cts.Term cts.star (nat.le p nat.O)) =>
     nat.le_n_O_elim
       p
       lePO
       (__:(cts.Term cts.box nat.nat) => nat.le (nat.minus __ q) (nat.minus nat.O q))
       (nat.le_n (nat.minus nat.O q)))
    (p:(cts.Term cts.box nat.nat) =>
     q:(cts.Term cts.box nat.nat) =>
     nat.sym_eq_minus
       (nat.S p)
       (y:(cts.Term
             cts.box
             (cts.prod'
                cts.box
                cts.box
                cts.box
                nat.nat
                (x0:(cts.Term cts.box nat.nat) => nat.nat))) =>
        cts.prod
          cts.star
          cts.star
          cts.star
          cts.I
          (nat.le nat.O (nat.S p))
          (x:(cts.Term cts.star (nat.le nat.O (nat.S p))) => nat.le (nat.minus nat.O q) (y q)))
       (nat.sym_eq_filter_nat_type_S
          (cts.prod cts.box cts.box cts.box cts.I nat.nat (x:(cts.Term cts.box nat.nat) => nat.nat))
          nat.minus_body
          p
          (y:(cts.Term
                cts.box
                (cts.prod'
                   cts.box
                   cts.box
                   cts.box
                   nat.nat
                   (x:(cts.Term cts.box nat.nat) => nat.nat))) =>
           cts.prod
             cts.star
             cts.star
             cts.star
             cts.I
             (nat.le nat.O (nat.S p))
             (x:(cts.Term cts.star (nat.le nat.O (nat.S p))) => nat.le (nat.minus nat.O q) (y q)))
          (nat.sym_eq_minus_body_S
             p
             (y:(cts.Term
                   cts.box
                   (cts.prod'
                      cts.box
                      cts.box
                      cts.box
                      nat.nat
                      (x0:(cts.Term cts.box nat.nat) => nat.nat))) =>
              cts.prod
                cts.star
                cts.star
                cts.star
                cts.I
                (nat.le nat.O (nat.S p))
                (x:(cts.Term cts.star (nat.le nat.O (nat.S p))) =>
                 nat.le (nat.minus nat.O q) (y q)))
             (nat.eq_plus_body_O
                (y:(cts.Term
                      cts.box
                      (cts.prod'
                         cts.box
                         cts.box
                         cts.box
                         nat.nat
                         (x:(cts.Term cts.box nat.nat) => nat.nat))) =>
                 cts.prod
                   cts.star
                   cts.star
                   cts.star
                   cts.I
                   (nat.le nat.O (nat.S p))
                   (x:(cts.Term cts.star (nat.le nat.O (nat.S p))) =>
                    nat.le
                      (nat.minus nat.O q)
                      (y
                         (nat.match_nat_type
                            nat.nat
                            (nat.S p)
                            (q0:(cts.Term cts.box nat.nat) => nat.minus p q0)
                            q))))
                (nat.eq_filter_nat_type_O
                   (cts.prod
                      cts.box
                      cts.box
                      cts.box
                      cts.I
                      nat.nat
                      (x:(cts.Term cts.box nat.nat) => nat.nat))
                   nat.plus_body
                   (y:(cts.Term
                         cts.box
                         (cts.prod'
                            cts.box
                            cts.box
                            cts.box
                            nat.nat
                            (x:(cts.Term cts.box nat.nat) => nat.nat))) =>
                    cts.prod
                      cts.star
                      cts.star
                      cts.star
                      cts.I
                      (nat.le nat.O (nat.S p))
                      (x:(cts.Term cts.star (nat.le nat.O (nat.S p))) =>
                       nat.le
                         (nat.minus nat.O q)
                         (y
                            (nat.match_nat_type
                               nat.nat
                               (nat.S p)
                               (q0:(cts.Term cts.box nat.nat) => nat.minus p q0)
                               q))))
                   (nat.eq_plus
                      nat.O
                      (y:(cts.Term
                            cts.box
                            (cts.prod'
                               cts.box
                               cts.box
                               cts.box
                               nat.nat
                               (x0:(cts.Term cts.box nat.nat) => nat.nat))) =>
                       cts.prod
                         cts.star
                         cts.star
                         cts.star
                         cts.I
                         (nat.le nat.O (nat.S p))
                         (x:(cts.Term cts.star (nat.le nat.O (nat.S p))) =>
                          nat.le
                            (nat.minus nat.O q)
                            (y
                               (nat.match_nat_type
                                  nat.nat
                                  (nat.S p)
                                  (q0:(cts.Term cts.box nat.nat) => nat.minus p q0)
                                  q))))
                      (nat.eq_minus_body_O
                         (y:(cts.Term
                               cts.box
                               (cts.prod'
                                  cts.box
                                  cts.box
                                  cts.box
                                  nat.nat
                                  (x:(cts.Term cts.box nat.nat) => nat.nat))) =>
                          cts.prod
                            cts.star
                            cts.star
                            cts.star
                            cts.I
                            (nat.le nat.O (nat.S p))
                            (x:(cts.Term cts.star (nat.le nat.O (nat.S p))) =>
                             nat.le
                               (nat.minus nat.O q)
                               (nat.plus
                                  (y
                                     (nat.match_nat_type
                                        nat.nat
                                        (nat.S p)
                                        (q0:(cts.Term cts.box nat.nat) => nat.minus p q0)
                                        q))
                                  (nat.match_nat_type
                                     nat.nat
                                     (nat.S p)
                                     (q0:(cts.Term cts.box nat.nat) => nat.minus p q0)
                                     q))))
                         (nat.eq_filter_nat_type_O
                            (cts.prod
                               cts.box
                               cts.box
                               cts.box
                               cts.I
                               nat.nat
                               (x:(cts.Term cts.box nat.nat) => nat.nat))
                            nat.minus_body
                            (y:(cts.Term
                                  cts.box
                                  (cts.prod'
                                     cts.box
                                     cts.box
                                     cts.box
                                     nat.nat
                                     (x:(cts.Term cts.box nat.nat) => nat.nat))) =>
                             cts.prod
                               cts.star
                               cts.star
                               cts.star
                               cts.I
                               (nat.le nat.O (nat.S p))
                               (x:(cts.Term cts.star (nat.le nat.O (nat.S p))) =>
                                nat.le
                                  (nat.minus nat.O q)
                                  (nat.plus
                                     (y
                                        (nat.match_nat_type
                                           nat.nat
                                           (nat.S p)
                                           (q0:(cts.Term cts.box nat.nat) =>
                                            nat.minus p q0)
                                           q))
                                     (nat.match_nat_type
                                        nat.nat
                                        (nat.S p)
                                        (q0:(cts.Term cts.box nat.nat) => nat.minus p q0)
                                        q))))
                            (nat.eq_minus
                               nat.O
                               (y:(cts.Term
                                     cts.box
                                     (cts.prod'
                                        cts.box
                                        cts.box
                                        cts.box
                                        nat.nat
                                        (x0:(cts.Term cts.box nat.nat) => nat.nat))) =>
                                cts.prod
                                  cts.star
                                  cts.star
                                  cts.star
                                  cts.I
                                  (nat.le nat.O (nat.S p))
                                  (x:(cts.Term cts.star (nat.le nat.O (nat.S p))) =>
                                   nat.le
                                     (nat.minus nat.O q)
                                     (nat.plus
                                        (y
                                           (nat.match_nat_type
                                              nat.nat
                                              (nat.S p)
                                              (q0:(cts.Term cts.box nat.nat) =>
                                               nat.minus p q0)
                                              q))
                                        (nat.match_nat_type
                                           nat.nat
                                           (nat.S p)
                                           (q0:(cts.Term cts.box nat.nat) =>
                                            nat.minus p q0)
                                           q))))
                               (nat.eq_minus_body_O
                                  (y:(cts.Term
                                        cts.box
                                        (cts.prod'
                                           cts.box
                                           cts.box
                                           cts.box
                                           nat.nat
                                           (x:(cts.Term cts.box nat.nat) => nat.nat))) =>
                                   cts.prod
                                     cts.star
                                     cts.star
                                     cts.star
                                     cts.I
                                     (nat.le nat.O (nat.S p))
                                     (x:(cts.Term cts.star (nat.le nat.O (nat.S p))) =>
                                      nat.le
                                        (nat.minus nat.O q)
                                        (nat.plus
                                           (nat.minus
                                              (y q)
                                              (nat.match_nat_type
                                                 nat.nat
                                                 (nat.S p)
                                                 (q0:(cts.Term cts.box nat.nat) =>
                                                  nat.minus p q0)
                                                 q))
                                           (nat.match_nat_type
                                              nat.nat
                                              (nat.S p)
                                              (q0:(cts.Term cts.box nat.nat) =>
                                               nat.minus p q0)
                                              q))))
                                  (nat.eq_filter_nat_type_O
                                     (cts.prod
                                        cts.box
                                        cts.box
                                        cts.box
                                        cts.I
                                        nat.nat
                                        (x:(cts.Term cts.box nat.nat) => nat.nat))
                                     nat.minus_body
                                     (y:(cts.Term
                                           cts.box
                                           (cts.prod'
                                              cts.box
                                              cts.box
                                              cts.box
                                              nat.nat
                                              (x:(cts.Term cts.box nat.nat) =>
                                               nat.nat))) =>
                                      cts.prod
                                        cts.star
                                        cts.star
                                        cts.star
                                        cts.I
                                        (nat.le nat.O (nat.S p))
                                        (x:(cts.Term cts.star (nat.le nat.O (nat.S p))) =>
                                         nat.le
                                           (nat.minus nat.O q)
                                           (nat.plus
                                              (nat.minus
                                                 (y q)
                                                 (nat.match_nat_type
                                                    nat.nat
                                                    (nat.S p)
                                                    (q0:(cts.Term cts.box nat.nat) =>
                                                     nat.minus p q0)
                                                    q))
                                              (nat.match_nat_type
                                                 nat.nat
                                                 (nat.S p)
                                                 (q0:(cts.Term cts.box nat.nat) =>
                                                  nat.minus p q0)
                                                 q))))
                                     (nat.eq_minus
                                        nat.O
                                        (y:(cts.Term
                                              cts.box
                                              (cts.prod'
                                                 cts.box
                                                 cts.box
                                                 cts.box
                                                 nat.nat
                                                 (x0:(cts.Term cts.box nat.nat) =>
                                                  nat.nat))) =>
                                         cts.prod
                                           cts.star
                                           cts.star
                                           cts.star
                                           cts.I
                                           (nat.le nat.O (nat.S p))
                                           (x:(cts.Term
                                                 cts.star
                                                 (nat.le nat.O (nat.S p))) =>
                                            nat.le
                                              (nat.minus nat.O q)
                                              (nat.plus
                                                 (nat.minus
                                                    (y q)
                                                    (nat.match_nat_type
                                                       nat.nat
                                                       (nat.S p)
                                                       (q0:(cts.Term
                                                              cts.box
                                                              nat.nat) =>
                                                        nat.minus p q0)
                                                       q))
                                                 (nat.match_nat_type
                                                    nat.nat
                                                    (nat.S p)
                                                    (q0:(cts.Term cts.box nat.nat) =>
                                                     nat.minus p q0)
                                                    q))))
                                        (auto:(cts.Term
                                                 cts.star
                                                 (nat.le nat.O (nat.S p))) =>
                                         nat.le_plus_minus_m_m
                                           (nat.minus nat.O q)
                                           (nat.match_nat_type
                                              nat.nat
                                              (nat.S p)
                                              (q0:(cts.Term cts.box nat.nat) =>
                                               nat.minus p q0)
                                              q))))))))))))))
    (p:(cts.Term cts.box nat.nat) =>
     q:(cts.Term cts.box nat.nat) =>
     Hind:(cts.Term
             cts.star
             (cts.prod'
                cts.box
                cts.star
                cts.star
                nat.nat
                (x:(cts.Term cts.box nat.nat) =>
                 cts.prod
                   cts.star
                   cts.star
                   cts.star
                   cts.I
                   (nat.le q p)
                   (x0:(cts.Term cts.star (nat.le q p)) =>
                    nat.le (nat.minus q x) (nat.minus p x))))) =>
     n:(cts.Term cts.box nat.nat) =>
     nat.match_nat_prop
       (__:(cts.Term cts.box nat.nat) =>
        cts.prod
          cts.star
          cts.star
          cts.star
          cts.I
          (nat.le (nat.S q) (nat.S p))
          (x:(cts.Term cts.star (nat.le (nat.S q) (nat.S p))) =>
           nat.le (nat.minus (nat.S q) __) (nat.minus (nat.S p) __)))
       (nat.sym_eq_minus
          (nat.S q)
          (y:(cts.Term
                cts.box
                (cts.prod'
                   cts.box
                   cts.box
                   cts.box
                   nat.nat
                   (x0:(cts.Term cts.box nat.nat) => nat.nat))) =>
           cts.prod
             cts.star
             cts.star
             cts.star
             cts.I
             (nat.le (nat.S q) (nat.S p))
             (x:(cts.Term cts.star (nat.le (nat.S q) (nat.S p))) =>
              nat.le (y nat.O) (nat.minus (nat.S p) nat.O)))
          (nat.sym_eq_filter_nat_type_S
             (cts.prod
                cts.box
                cts.box
                cts.box
                cts.I
                nat.nat
                (x:(cts.Term cts.box nat.nat) => nat.nat))
             nat.minus_body
             q
             (y:(cts.Term
                   cts.box
                   (cts.prod'
                      cts.box
                      cts.box
                      cts.box
                      nat.nat
                      (x:(cts.Term cts.box nat.nat) => nat.nat))) =>
              cts.prod
                cts.star
                cts.star
                cts.star
                cts.I
                (nat.le (nat.S q) (nat.S p))
                (x:(cts.Term cts.star (nat.le (nat.S q) (nat.S p))) =>
                 nat.le (y nat.O) (nat.minus (nat.S p) nat.O)))
             (nat.sym_eq_minus_body_S
                q
                (y:(cts.Term
                      cts.box
                      (cts.prod'
                         cts.box
                         cts.box
                         cts.box
                         nat.nat
                         (x0:(cts.Term cts.box nat.nat) => nat.nat))) =>
                 cts.prod
                   cts.star
                   cts.star
                   cts.star
                   cts.I
                   (nat.le (nat.S q) (nat.S p))
                   (x:(cts.Term cts.star (nat.le (nat.S q) (nat.S p))) =>
                    nat.le (y nat.O) (nat.minus (nat.S p) nat.O)))
                (nat.sym_eq_match_nat_type_O
                   nat.nat
                   (nat.S q)
                   (z:(cts.Term cts.box nat.nat) => nat.minus q z)
                   (y:(cts.Term cts.box nat.nat) =>
                    cts.prod
                      cts.star
                      cts.star
                      cts.star
                      cts.I
                      (nat.le (nat.S q) (nat.S p))
                      (x:(cts.Term cts.star (nat.le (nat.S q) (nat.S p))) =>
                       nat.le y (nat.minus (nat.S p) nat.O)))
                   (nat.sym_eq_minus
                      (nat.S p)
                      (y:(cts.Term
                            cts.box
                            (cts.prod'
                               cts.box
                               cts.box
                               cts.box
                               nat.nat
                               (x0:(cts.Term cts.box nat.nat) => nat.nat))) =>
                       cts.prod
                         cts.star
                         cts.star
                         cts.star
                         cts.I
                         (nat.le (nat.S q) (nat.S p))
                         (x:(cts.Term cts.star (nat.le (nat.S q) (nat.S p))) =>
                          nat.le (nat.S q) (y nat.O)))
                      (nat.sym_eq_filter_nat_type_S
                         (cts.prod
                            cts.box
                            cts.box
                            cts.box
                            cts.I
                            nat.nat
                            (x:(cts.Term cts.box nat.nat) => nat.nat))
                         nat.minus_body
                         p
                         (y:(cts.Term
                               cts.box
                               (cts.prod'
                                  cts.box
                                  cts.box
                                  cts.box
                                  nat.nat
                                  (x:(cts.Term cts.box nat.nat) => nat.nat))) =>
                          cts.prod
                            cts.star
                            cts.star
                            cts.star
                            cts.I
                            (nat.le (nat.S q) (nat.S p))
                            (x:(cts.Term cts.star (nat.le (nat.S q) (nat.S p))) =>
                             nat.le (nat.S q) (y nat.O)))
                         (nat.sym_eq_minus_body_S
                            p
                            (y:(cts.Term
                                  cts.box
                                  (cts.prod'
                                     cts.box
                                     cts.box
                                     cts.box
                                     nat.nat
                                     (x0:(cts.Term cts.box nat.nat) => nat.nat))) =>
                             cts.prod
                               cts.star
                               cts.star
                               cts.star
                               cts.I
                               (nat.le (nat.S q) (nat.S p))
                               (x:(cts.Term cts.star (nat.le (nat.S q) (nat.S p))) =>
                                nat.le (nat.S q) (y nat.O)))
                            (nat.sym_eq_match_nat_type_O
                               nat.nat
                               (nat.S p)
                               (q0:(cts.Term cts.box nat.nat) => nat.minus p q0)
                               (y:(cts.Term cts.box nat.nat) =>
                                cts.prod
                                  cts.star
                                  cts.star
                                  cts.star
                                  cts.I
                                  (nat.le (nat.S q) (nat.S p))
                                  (x:(cts.Term cts.star (nat.le (nat.S q) (nat.S p))) =>
                                   nat.le (nat.S q) y))
                               (auto:(cts.Term cts.star (nat.le (nat.S q) (nat.S p))) =>
                                auto)))))))))
       (nat.sym_eq_minus
          (nat.S q)
          (y:(cts.Term
                cts.box
                (cts.prod'
                   cts.box
                   cts.box
                   cts.box
                   nat.nat
                   (x0:(cts.Term cts.box nat.nat) => nat.nat))) =>
           cts.prod
             cts.box
             cts.star
             cts.star
             cts.I
             nat.nat
             (x:(cts.Term cts.box nat.nat) =>
              cts.prod
                cts.star
                cts.star
                cts.star
                cts.I
                (nat.le (nat.S q) (nat.S p))
                (x0:(cts.Term cts.star (nat.le (nat.S q) (nat.S p))) =>
                 nat.le (y (nat.S x)) (nat.minus (nat.S p) (nat.S x)))))
          (nat.sym_eq_filter_nat_type_S
             (cts.prod
                cts.box
                cts.box
                cts.box
                cts.I
                nat.nat
                (x:(cts.Term cts.box nat.nat) => nat.nat))
             nat.minus_body
             q
             (y:(cts.Term
                   cts.box
                   (cts.prod'
                      cts.box
                      cts.box
                      cts.box
                      nat.nat
                      (x:(cts.Term cts.box nat.nat) => nat.nat))) =>
              cts.prod
                cts.box
                cts.star
                cts.star
                cts.I
                nat.nat
                (x:(cts.Term cts.box nat.nat) =>
                 cts.prod
                   cts.star
                   cts.star
                   cts.star
                   cts.I
                   (nat.le (nat.S q) (nat.S p))
                   (x0:(cts.Term cts.star (nat.le (nat.S q) (nat.S p))) =>
                    nat.le (y (nat.S x)) (nat.minus (nat.S p) (nat.S x)))))
             (nat.sym_eq_minus_body_S
                q
                (y:(cts.Term
                      cts.box
                      (cts.prod'
                         cts.box
                         cts.box
                         cts.box
                         nat.nat
                         (x0:(cts.Term cts.box nat.nat) => nat.nat))) =>
                 cts.prod
                   cts.box
                   cts.star
                   cts.star
                   cts.I
                   nat.nat
                   (x:(cts.Term cts.box nat.nat) =>
                    cts.prod
                      cts.star
                      cts.star
                      cts.star
                      cts.I
                      (nat.le (nat.S q) (nat.S p))
                      (x0:(cts.Term cts.star (nat.le (nat.S q) (nat.S p))) =>
                       nat.le (y (nat.S x)) (nat.minus (nat.S p) (nat.S x)))))
                (a:(cts.Term cts.box nat.nat) =>
                 nat.sym_eq_match_nat_type_S
                   nat.nat
                   (nat.S q)
                   (z:(cts.Term cts.box nat.nat) => nat.minus q z)
                   a
                   (y:(cts.Term cts.box nat.nat) =>
                    cts.prod
                      cts.star
                      cts.star
                      cts.star
                      cts.I
                      (nat.le (nat.S q) (nat.S p))
                      (x:(cts.Term cts.star (nat.le (nat.S q) (nat.S p))) =>
                       nat.le y (nat.minus (nat.S p) (nat.S a))))
                   (nat.sym_eq_minus
                      (nat.S p)
                      (y:(cts.Term
                            cts.box
                            (cts.prod'
                               cts.box
                               cts.box
                               cts.box
                               nat.nat
                               (x0:(cts.Term cts.box nat.nat) => nat.nat))) =>
                       cts.prod
                         cts.star
                         cts.star
                         cts.star
                         cts.I
                         (nat.le (nat.S q) (nat.S p))
                         (x:(cts.Term cts.star (nat.le (nat.S q) (nat.S p))) =>
                          nat.le (nat.minus q a) (y (nat.S a))))
                      (nat.sym_eq_filter_nat_type_S
                         (cts.prod
                            cts.box
                            cts.box
                            cts.box
                            cts.I
                            nat.nat
                            (x:(cts.Term cts.box nat.nat) => nat.nat))
                         nat.minus_body
                         p
                         (y:(cts.Term
                               cts.box
                               (cts.prod'
                                  cts.box
                                  cts.box
                                  cts.box
                                  nat.nat
                                  (x:(cts.Term cts.box nat.nat) => nat.nat))) =>
                          cts.prod
                            cts.star
                            cts.star
                            cts.star
                            cts.I
                            (nat.le (nat.S q) (nat.S p))
                            (x:(cts.Term cts.star (nat.le (nat.S q) (nat.S p))) =>
                             nat.le (nat.minus q a) (y (nat.S a))))
                         (nat.sym_eq_minus_body_S
                            p
                            (y:(cts.Term
                                  cts.box
                                  (cts.prod'
                                     cts.box
                                     cts.box
                                     cts.box
                                     nat.nat
                                     (x0:(cts.Term cts.box nat.nat) => nat.nat))) =>
                             cts.prod
                               cts.star
                               cts.star
                               cts.star
                               cts.I
                               (nat.le (nat.S q) (nat.S p))
                               (x:(cts.Term cts.star (nat.le (nat.S q) (nat.S p))) =>
                                nat.le (nat.minus q a) (y (nat.S a))))
                            (nat.sym_eq_match_nat_type_S
                               nat.nat
                               (nat.S p)
                               (q0:(cts.Term cts.box nat.nat) => nat.minus p q0)
                               a
                               (y:(cts.Term cts.box nat.nat) =>
                                cts.prod
                                  cts.star
                                  cts.star
                                  cts.star
                                  cts.I
                                  (nat.le (nat.S q) (nat.S p))
                                  (x:(cts.Term cts.star (nat.le (nat.S q) (nat.S p))) =>
                                   nat.le (nat.minus q a) y))
                               (leSS:(cts.Term cts.star (nat.le (nat.S q) (nat.S p))) =>
                                Hind
                                  a
                                  (logic.eq_coerc
                                     (nat.le (nat.pred (nat.S q)) (nat.pred (nat.S p)))
                                     (nat.le q p)
                                     (nat.monotonic_pred (nat.S q) (nat.S p) leSS)
                                     (logic.rewrite_l
                                        nat.nat
                                        q
                                        (__:(cts.Term cts.box nat.nat) =>
                                         logic.eq
                                           (cts.univ cts.star cts.box cts.I)
                                           (nat.le __ (nat.pred (nat.S p)))
                                           (nat.le q p))
                                        (logic.rewrite_l
                                           nat.nat
                                           p
                                           (__:(cts.Term cts.box nat.nat) =>
                                            logic.eq
                                              (cts.univ cts.star cts.box cts.I)
                                              (nat.le q __)
                                              (nat.le q p))
                                           (logic.refl
                                              (cts.univ cts.star cts.box cts.I)
                                              (nat.le q p))
                                           (nat.pred (nat.S p))
                                           (nat.pred_Sn p))
                                        (nat.pred (nat.S q))
                                        (nat.pred_Sn q))))))))))))
       n).

def le_plus_to_minus :
  cts.Term
    cts.star
    (cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       nat.nat
       (x:(cts.Term cts.box nat.nat) =>
        cts.prod
          cts.box
          cts.star
          cts.star
          cts.I
          nat.nat
          (x0:(cts.Term cts.box nat.nat) =>
           cts.prod
             cts.box
             cts.star
             cts.star
             cts.I
             nat.nat
             (x1:(cts.Term cts.box nat.nat) =>
              cts.prod
                cts.star
                cts.star
                cts.star
                cts.I
                (nat.le x (nat.plus x1 x0))
                (x2:(cts.Term cts.star (nat.le x (nat.plus x1 x0))) => nat.le (nat.minus x x0) x1)))))
  :=
  n:(cts.Term cts.box nat.nat) =>
  m:(cts.Term cts.box nat.nat) =>
  p:(cts.Term cts.box nat.nat) =>
  lep:(cts.Term cts.star (nat.le n (nat.plus p m))) =>
  logic.eq_coerc
    (nat.le (nat.minus n m) (nat.minus (nat.plus p m) m))
    (nat.le (nat.minus n m) p)
    (nat.monotonic_le_minus_l (nat.plus p m) n m lep)
    (logic.rewrite_l
       nat.nat
       p
       (__:(cts.Term cts.box nat.nat) =>
        logic.eq
          (cts.univ cts.star cts.box cts.I)
          (nat.le (nat.minus n m) __)
          (nat.le (nat.minus n m) p))
       (logic.refl (cts.univ cts.star cts.box cts.I) (nat.le (nat.minus n m) p))
       (nat.minus (nat.plus p m) m)
       (nat.minus_plus_m_m p m)).

def monotonic_le_minus_r :
  cts.Term
    cts.star
    (cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       nat.nat
       (x:(cts.Term cts.box nat.nat) =>
        cts.prod
          cts.box
          cts.star
          cts.star
          cts.I
          nat.nat
          (x0:(cts.Term cts.box nat.nat) =>
           cts.prod
             cts.box
             cts.star
             cts.star
             cts.I
             nat.nat
             (x1:(cts.Term cts.box nat.nat) =>
              cts.prod
                cts.star
                cts.star
                cts.star
                cts.I
                (nat.le x0 x)
                (x2:(cts.Term cts.star (nat.le x0 x)) =>
                 nat.le (nat.minus x1 x) (nat.minus x1 x0))))))
  :=
  p:(cts.Term cts.box nat.nat) =>
  q:(cts.Term cts.box nat.nat) =>
  n:(cts.Term cts.box nat.nat) =>
  lepq:(cts.Term cts.star (nat.le q p)) =>
  nat.le_plus_to_minus
    n
    p
    (nat.minus n q)
    (nat.transitive_le
       n
       (nat.plus (nat.minus n q) q)
       (nat.plus (nat.minus n q) p)
       (nat.le_plus_minus_m_m n q)
       (nat.monotonic_le_plus_r (nat.minus n q) q p lepq)).

def minus_le :
  cts.Term
    cts.star
    (cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       nat.nat
       (x:(cts.Term cts.box nat.nat) =>
        cts.prod
          cts.box
          cts.star
          cts.star
          cts.I
          nat.nat
          (x0:(cts.Term cts.box nat.nat) => nat.le (nat.minus x x0) x)))
  :=
  x:(cts.Term cts.box nat.nat) =>
  y:(cts.Term cts.box nat.nat) =>
  logic.eq_coerc
    (nat.le (nat.minus x y) (nat.minus (nat.plus x y) y))
    (nat.le (nat.minus x y) x)
    (nat.monotonic_le_minus_l (nat.plus x y) x y (nat.le_plus_n_r y x))
    (logic.rewrite_l
       nat.nat
       x
       (__:(cts.Term cts.box nat.nat) =>
        logic.eq
          (cts.univ cts.star cts.box cts.I)
          (nat.le (nat.minus x y) __)
          (nat.le (nat.minus x y) x))
       (logic.refl (cts.univ cts.star cts.box cts.I) (nat.le (nat.minus x y) x))
       (nat.minus (nat.plus x y) y)
       (nat.minus_plus_m_m x y)).

def not_eq_to_le_to_lt :
  cts.Term
    cts.star
    (cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       nat.nat
       (x:(cts.Term cts.box nat.nat) =>
        cts.prod
          cts.box
          cts.star
          cts.star
          cts.I
          nat.nat
          (x0:(cts.Term cts.box nat.nat) =>
           cts.prod
             cts.star
             cts.star
             cts.star
             cts.I
             (connectives.Not (logic.eq nat.nat x x0))
             (x1:(cts.Term cts.star (connectives.Not (logic.eq nat.nat x x0))) =>
              cts.prod
                cts.star
                cts.star
                cts.star
                cts.I
                (nat.le x x0)
                (x2:(cts.Term cts.star (nat.le x x0)) => nat.lt x x0)))))
  :=
  n:(cts.Term cts.box nat.nat) =>
  m:(cts.Term cts.box nat.nat) =>
  Hneq:(cts.Term cts.star (connectives.Not (logic.eq nat.nat n m))) =>
  Hle:(cts.Term cts.star (nat.le n m)) =>
  connectives.match_Or_prop
    (nat.lt n m)
    (logic.eq nat.nat n m)
    (nat.lt n m)
    (auto:(cts.Term cts.star (nat.le (nat.S n) m)) => auto)
    (Heq:(cts.Term cts.star (logic.eq nat.nat n m)) =>
     nat.not_le_to_lt
       m
       n
       (logic.not_to_not
          (nat.le m n)
          (logic.eq nat.nat n m)
          (auto:(cts.Term cts.star (nat.le m n)) =>
           logic.rewrite_l
             nat.nat
             n
             (__:(cts.Term cts.box nat.nat) => logic.eq nat.nat n __)
             (logic.refl nat.nat n)
             m
             Heq)
          Hneq))
    (nat.le_to_or_lt_eq n m Hle).

def eq_minus_O :
  cts.Term
    cts.star
    (cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       nat.nat
       (x:(cts.Term cts.box nat.nat) =>
        cts.prod
          cts.box
          cts.star
          cts.star
          cts.I
          nat.nat
          (x0:(cts.Term cts.box nat.nat) =>
           cts.prod
             cts.star
             cts.star
             cts.star
             cts.I
             (nat.le x x0)
             (x1:(cts.Term cts.star (nat.le x x0)) => logic.eq nat.nat (nat.minus x x0) nat.O))))
  :=
  n:(cts.Term cts.box nat.nat) =>
  m:(cts.Term cts.box nat.nat) =>
  lenm:(cts.Term cts.star (nat.le n m)) =>
  nat.le_n_O_elim
    (nat.minus n m)
    (logic.eq_coerc
       (nat.le (nat.minus n m) (nat.minus n n))
       (nat.le (nat.minus n m) nat.O)
       (nat.monotonic_le_minus_r m n n lenm)
       (logic.rewrite_l
          nat.nat
          nat.O
          (__:(cts.Term cts.box nat.nat) =>
           logic.eq
             (cts.univ cts.star cts.box cts.I)
             (nat.le (nat.minus n m) __)
             (nat.le (nat.minus n m) nat.O))
          (logic.refl (cts.univ cts.star cts.box cts.I) (nat.le (nat.minus n m) nat.O))
          (nat.minus n n)
          (nat.minus_n_n n)))
    (__:(cts.Term cts.box nat.nat) => logic.eq nat.nat __ nat.O)
    (logic.refl nat.nat nat.O).

def distributive_times_minus :
  cts.Term cts.star (relations.distributive nat.nat nat.times nat.minus)
  :=
  a:(cts.Term cts.box nat.nat) =>
  b:(cts.Term cts.box nat.nat) =>
  c:(cts.Term cts.box nat.nat) =>
  connectives.match_Or_prop
    (nat.lt b c)
    (connectives.Not (nat.lt b c))
    (logic.eq nat.nat (nat.times a (nat.minus b c)) (nat.minus (nat.times a b) (nat.times a c)))
    (Hbc:(cts.Term cts.star (nat.le (nat.S b) c)) =>
     logic.eq_ind_r
       nat.nat
       nat.O
       (x:(cts.Term cts.box nat.nat) =>
        logic.eq nat.nat (nat.times a x) (nat.minus (nat.times a b) (nat.times a c)))
       (logic.eq_ind_r
          nat.nat
          nat.O
          (x:(cts.Term cts.box nat.nat) => logic.eq nat.nat (nat.times a nat.O) x)
          (logic.rewrite_l
             nat.nat
             nat.O
             (__:(cts.Term cts.box nat.nat) => logic.eq nat.nat __ nat.O)
             (logic.refl nat.nat nat.O)
             (nat.times a nat.O)
             (nat.times_n_O a))
          (nat.minus (nat.times a b) (nat.times a c))
          (nat.eq_minus_O
             (nat.times a b)
             (nat.times a c)
             (nat.monotonic_le_times_r a b c (nat.lt_to_le b c Hbc))))
       (nat.minus b c)
       (nat.eq_minus_O b c (nat.lt_to_le b c Hbc)))
    (Hbc:(cts.Term cts.star (connectives.Not (nat.lt b c))) =>
     logic.sym_eq
       nat.nat
       (nat.minus (nat.times a b) (nat.times a c))
       (nat.times a (nat.minus b c))
       (logic.eq_coerc
          (logic.eq
             nat.nat
             (nat.minus (nat.times a b) (nat.times a c))
             (nat.times a (nat.minus b c)))
          (logic.eq
             nat.nat
             (nat.minus (nat.times a b) (nat.times a c))
             (nat.times a (nat.minus b c)))
          (nat.plus_to_minus
             (nat.times a b)
             (nat.times a c)
             (nat.times a (nat.minus b c))
             (logic.eq_ind
                nat.nat
                (nat.times a (nat.plus c (nat.minus b c)))
                (x_1:(cts.Term cts.box nat.nat) => logic.eq nat.nat (nat.times a b) x_1)
                (logic.eq_f
                   nat.nat
                   nat.nat
                   (nat.times a)
                   b
                   (nat.plus c (nat.minus b c))
                   (logic.eq_coerc
                      (logic.eq nat.nat b (nat.plus (nat.minus b c) c))
                      (logic.eq nat.nat b (nat.plus c (nat.minus b c)))
                      (nat.plus_minus_m_m b c (nat.not_lt_to_le b c Hbc))
                      (logic.rewrite_r
                         nat.nat
                         (nat.plus c (nat.minus b c))
                         (__:(cts.Term cts.box nat.nat) =>
                          logic.eq
                            (cts.univ cts.star cts.box cts.I)
                            (logic.eq nat.nat b __)
                            (logic.eq nat.nat b (nat.plus c (nat.minus b c))))
                         (logic.refl
                            (cts.univ cts.star cts.box cts.I)
                            (logic.eq nat.nat b (nat.plus c (nat.minus b c))))
                         (nat.plus (nat.minus b c) c)
                         (nat.commutative_plus (nat.minus b c) c))))
                (nat.plus (nat.times a c) (nat.times a (nat.minus b c)))
                (nat.distributive_times_plus a c (nat.minus b c))))
          (logic.refl
             (cts.univ cts.star cts.box cts.I)
             (logic.eq
                nat.nat
                (nat.minus (nat.times a b) (nat.times a c))
                (nat.times a (nat.minus b c))))))
    (nat.decidable_lt b c).

def minus_plus :
  cts.Term
    cts.star
    (cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       nat.nat
       (x:(cts.Term cts.box nat.nat) =>
        cts.prod
          cts.box
          cts.star
          cts.star
          cts.I
          nat.nat
          (x0:(cts.Term cts.box nat.nat) =>
           cts.prod
             cts.box
             cts.star
             cts.star
             cts.I
             nat.nat
             (x1:(cts.Term cts.box nat.nat) =>
              logic.eq nat.nat (nat.minus (nat.minus x x0) x1) (nat.minus x (nat.plus x0 x1))))))
  :=
  n:(cts.Term cts.box nat.nat) =>
  m:(cts.Term cts.box nat.nat) =>
  p:(cts.Term cts.box nat.nat) =>
  connectives.match_Or_prop
    (nat.le (nat.plus m p) n)
    (connectives.Not (nat.le (nat.plus m p) n))
    (logic.eq nat.nat (nat.minus (nat.minus n m) p) (nat.minus n (nat.plus m p)))
    (Hlt:(cts.Term cts.star (nat.le (nat.plus m p) n)) =>
     nat.plus_to_minus
       (nat.minus n m)
       p
       (nat.minus n (nat.plus m p))
       (nat.plus_to_minus
          n
          m
          (nat.plus p (nat.minus n (nat.plus m p)))
          (logic.eq_ind
             nat.nat
             (nat.plus (nat.plus m p) (nat.minus n (nat.plus m p)))
             (x_1:(cts.Term cts.box nat.nat) => logic.eq nat.nat n x_1)
             (nat.minus_to_plus
                n
                (nat.plus m p)
                (nat.minus n (nat.plus m p))
                Hlt
                (logic.refl nat.nat (nat.minus n (nat.plus m p))))
             (nat.plus m (nat.plus p (nat.minus n (nat.plus m p))))
             (nat.associative_plus m p (nat.minus n (nat.plus m p))))))
    (Hlt:(cts.Term cts.star (connectives.Not (nat.le (nat.plus m p) n))) =>
     logic.eq_ind_r
       nat.nat
       nat.O
       (x:(cts.Term cts.box nat.nat) => logic.eq nat.nat x (nat.minus n (nat.plus m p)))
       (logic.sym_eq
          nat.nat
          (nat.minus n (nat.plus m p))
          nat.O
          (logic.eq_coerc
             (logic.eq nat.nat (nat.minus n (nat.plus m p)) nat.O)
             (logic.eq nat.nat (nat.minus n (nat.plus m p)) nat.O)
             (nat.eq_minus_O
                n
                (nat.plus m p)
                (nat.transitive_le
                   n
                   (nat.S n)
                   (nat.plus m p)
                   (nat.le_n_Sn n)
                   (nat.not_le_to_lt (nat.plus m p) n Hlt)))
             (logic.refl
                (cts.univ cts.star cts.box cts.I)
                (logic.eq nat.nat (nat.minus n (nat.plus m p)) nat.O))))
       (nat.minus (nat.minus n m) p)
       (nat.eq_minus_O
          (nat.minus n m)
          p
          (logic.eq_coerc
             (nat.le (nat.minus n m) (nat.minus (nat.plus p m) m))
             (nat.le (nat.minus n m) p)
             (nat.monotonic_le_minus_l
                (nat.plus p m)
                n
                m
                (logic.eq_coerc
                   (nat.le n (nat.plus m p))
                   (nat.le n (nat.plus p m))
                   (nat.transitive_le
                      n
                      (nat.S n)
                      (nat.plus m p)
                      (nat.le_n_Sn n)
                      (nat.not_le_to_lt (nat.plus m p) n Hlt))
                   (logic.rewrite_r
                      nat.nat
                      (nat.plus m p)
                      (__:(cts.Term cts.box nat.nat) =>
                       logic.eq
                         (cts.univ cts.star cts.box cts.I)
                         (nat.le n (nat.plus m p))
                         (nat.le n __))
                      (logic.refl (cts.univ cts.star cts.box cts.I) (nat.le n (nat.plus m p)))
                      (nat.plus p m)
                      (nat.commutative_plus p m))))
             (logic.rewrite_l
                nat.nat
                p
                (__:(cts.Term cts.box nat.nat) =>
                 logic.eq
                   (cts.univ cts.star cts.box cts.I)
                   (nat.le (nat.minus n m) __)
                   (nat.le (nat.minus n m) p))
                (logic.refl (cts.univ cts.star cts.box cts.I) (nat.le (nat.minus n m) p))
                (nat.minus (nat.plus p m) m)
                (nat.minus_plus_m_m p m)))))
    (nat.decidable_le (nat.plus m p) n).

def minus_minus :
  cts.Term
    cts.star
    (cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       nat.nat
       (x:(cts.Term cts.box nat.nat) =>
        cts.prod
          cts.box
          cts.star
          cts.star
          cts.I
          nat.nat
          (x0:(cts.Term cts.box nat.nat) =>
           cts.prod
             cts.box
             cts.star
             cts.star
             cts.I
             nat.nat
             (x1:(cts.Term cts.box nat.nat) =>
              cts.prod
                cts.star
                cts.star
                cts.star
                cts.I
                (nat.le x1 x0)
                (x2:(cts.Term cts.star (nat.le x1 x0)) =>
                 cts.prod
                   cts.star
                   cts.star
                   cts.star
                   cts.I
                   (nat.le x0 x)
                   (x3:(cts.Term cts.star (nat.le x0 x)) =>
                    logic.eq
                      nat.nat
                      (nat.plus x1 (nat.minus x x0))
                      (nat.minus x (nat.minus x0 x1))))))))
  :=
  n:(cts.Term cts.box nat.nat) =>
  m:(cts.Term cts.box nat.nat) =>
  p:(cts.Term cts.box nat.nat) =>
  lepm:(cts.Term cts.star (nat.le p m)) =>
  lemn:(cts.Term cts.star (nat.le m n)) =>
  logic.sym_eq
    nat.nat
    (nat.minus n (nat.minus m p))
    (nat.plus p (nat.minus n m))
    (nat.plus_to_minus
       n
       (nat.minus m p)
       (nat.plus p (nat.minus n m))
       (logic.eq_ind
          nat.nat
          (nat.plus (nat.plus (nat.minus m p) p) (nat.minus n m))
          (x_1:(cts.Term cts.box nat.nat) => logic.eq nat.nat n x_1)
          (logic.eq_ind
             nat.nat
             m
             (x_1:(cts.Term cts.box nat.nat) => logic.eq nat.nat n (nat.plus x_1 (nat.minus n m)))
             (logic.eq_ind
                nat.nat
                (nat.plus (nat.minus n m) m)
                (x_1:(cts.Term cts.box nat.nat) => logic.eq nat.nat n x_1)
                (logic.eq_ind
                   nat.nat
                   n
                   (x_1:(cts.Term cts.box nat.nat) => logic.eq nat.nat n x_1)
                   (logic.refl nat.nat n)
                   (nat.plus (nat.minus n m) m)
                   (nat.plus_minus_m_m n m lemn))
                (nat.plus m (nat.minus n m))
                (nat.commutative_plus (nat.minus n m) m))
             (nat.plus (nat.minus m p) p)
             (nat.plus_minus_m_m m p lepm))
          (nat.plus (nat.minus m p) (nat.plus p (nat.minus n m)))
          (nat.associative_plus (nat.minus m p) p (nat.minus n m)))).

def minus_minus_comm :
  cts.Term
    cts.star
    (cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       nat.nat
       (x:(cts.Term cts.box nat.nat) =>
        cts.prod
          cts.box
          cts.star
          cts.star
          cts.I
          nat.nat
          (x0:(cts.Term cts.box nat.nat) =>
           cts.prod
             cts.box
             cts.star
             cts.star
             cts.I
             nat.nat
             (x1:(cts.Term cts.box nat.nat) =>
              logic.eq nat.nat (nat.minus (nat.minus x x0) x1) (nat.minus (nat.minus x x1) x0)))))
  :=
  a:(cts.Term cts.box nat.nat) =>
  b:(cts.Term cts.box nat.nat) =>
  c:(cts.Term cts.box nat.nat) =>
  nat.le_to_le_to_eq
    (nat.minus (nat.minus a b) c)
    (nat.minus (nat.minus a c) b)
    (logic.eq_coerc
       (nat.le
          (nat.minus (nat.minus a b) c)
          (nat.minus (nat.plus (nat.minus (nat.minus a c) b) c) c))
       (nat.le (nat.minus (nat.minus a b) c) (nat.minus (nat.minus a c) b))
       (nat.monotonic_le_minus_l
          (nat.plus (nat.minus (nat.minus a c) b) c)
          (nat.minus a b)
          c
          (logic.eq_coerc
             (nat.le (nat.minus a b) (nat.plus (nat.minus (nat.minus a b) c) c))
             (nat.le (nat.minus a b) (nat.plus (nat.minus (nat.minus a c) b) c))
             (nat.le_plus_minus_m_m (nat.minus a b) c)
             (logic.rewrite_r
                nat.nat
                (nat.minus a (nat.plus b c))
                (__:(cts.Term cts.box nat.nat) =>
                 logic.eq
                   (cts.univ cts.star cts.box cts.I)
                   (nat.le (nat.minus a b) (nat.plus __ c))
                   (nat.le (nat.minus a b) (nat.plus (nat.minus (nat.minus a c) b) c)))
                (logic.rewrite_r
                   nat.nat
                   (nat.plus c (nat.minus a (nat.plus b c)))
                   (__:(cts.Term cts.box nat.nat) =>
                    logic.eq
                      (cts.univ cts.star cts.box cts.I)
                      (nat.le (nat.minus a b) __)
                      (nat.le (nat.minus a b) (nat.plus (nat.minus (nat.minus a c) b) c)))
                   (logic.rewrite_r
                      nat.nat
                      (nat.plus c (nat.minus (nat.minus a c) b))
                      (__:(cts.Term cts.box nat.nat) =>
                       logic.eq
                         (cts.univ cts.star cts.box cts.I)
                         (nat.le (nat.minus a b) (nat.plus c (nat.minus a (nat.plus b c))))
                         (nat.le (nat.minus a b) __))
                      (logic.rewrite_l
                         nat.nat
                         (nat.minus (nat.minus a c) b)
                         (__:(cts.Term cts.box nat.nat) =>
                          logic.eq
                            (cts.univ cts.star cts.box cts.I)
                            (nat.le (nat.minus a b) (nat.plus c __))
                            (nat.le
                               (nat.minus a b)
                               (nat.plus c (nat.minus (nat.minus a c) b))))
                         (logic.refl
                            (cts.univ cts.star cts.box cts.I)
                            (nat.le
                               (nat.minus a b)
                               (nat.plus c (nat.minus (nat.minus a c) b))))
                         (nat.minus a (nat.plus b c))
                         (logic.rewrite_l
                            nat.nat
                            (nat.plus c b)
                            (__:(cts.Term cts.box nat.nat) =>
                             logic.eq nat.nat (nat.minus (nat.minus a c) b) (nat.minus a __))
                            (nat.minus_plus a c b)
                            (nat.plus b c)
                            (nat.commutative_plus c b)))
                      (nat.plus (nat.minus (nat.minus a c) b) c)
                      (nat.commutative_plus (nat.minus (nat.minus a c) b) c))
                   (nat.plus (nat.minus a (nat.plus b c)) c)
                   (nat.commutative_plus (nat.minus a (nat.plus b c)) c))
                (nat.minus (nat.minus a b) c)
                (nat.minus_plus a b c))))
       (logic.rewrite_l
          nat.nat
          (nat.minus (nat.minus a c) b)
          (__:(cts.Term cts.box nat.nat) =>
           logic.eq
             (cts.univ cts.star cts.box cts.I)
             (nat.le (nat.minus (nat.minus a b) c) __)
             (nat.le (nat.minus (nat.minus a b) c) (nat.minus (nat.minus a c) b)))
          (logic.refl
             (cts.univ cts.star cts.box cts.I)
             (nat.le (nat.minus (nat.minus a b) c) (nat.minus (nat.minus a c) b)))
          (nat.minus (nat.plus (nat.minus (nat.minus a c) b) c) c)
          (nat.minus_plus_m_m (nat.minus (nat.minus a c) b) c)))
    (logic.eq_coerc
       (nat.le
          (nat.minus (nat.minus a c) b)
          (nat.minus (nat.plus (nat.minus (nat.minus a b) c) b) b))
       (nat.le (nat.minus (nat.minus a c) b) (nat.minus (nat.minus a b) c))
       (nat.monotonic_le_minus_l
          (nat.plus (nat.minus (nat.minus a b) c) b)
          (nat.minus a c)
          b
          (logic.eq_coerc
             (nat.le (nat.minus a c) (nat.plus (nat.minus (nat.minus a c) b) b))
             (nat.le (nat.minus a c) (nat.plus (nat.minus (nat.minus a b) c) b))
             (nat.le_plus_minus_m_m (nat.minus a c) b)
             (logic.rewrite_r
                nat.nat
                (nat.minus a (nat.plus c b))
                (__:(cts.Term cts.box nat.nat) =>
                 logic.eq
                   (cts.univ cts.star cts.box cts.I)
                   (nat.le (nat.minus a c) (nat.plus __ b))
                   (nat.le (nat.minus a c) (nat.plus (nat.minus (nat.minus a b) c) b)))
                (logic.rewrite_r
                   nat.nat
                   (nat.plus b (nat.minus a (nat.plus c b)))
                   (__:(cts.Term cts.box nat.nat) =>
                    logic.eq
                      (cts.univ cts.star cts.box cts.I)
                      (nat.le (nat.minus a c) __)
                      (nat.le (nat.minus a c) (nat.plus (nat.minus (nat.minus a b) c) b)))
                   (logic.rewrite_r
                      nat.nat
                      (nat.plus b (nat.minus (nat.minus a b) c))
                      (__:(cts.Term cts.box nat.nat) =>
                       logic.eq
                         (cts.univ cts.star cts.box cts.I)
                         (nat.le (nat.minus a c) (nat.plus b (nat.minus a (nat.plus c b))))
                         (nat.le (nat.minus a c) __))
                      (logic.rewrite_l
                         nat.nat
                         (nat.minus (nat.minus a b) c)
                         (__:(cts.Term cts.box nat.nat) =>
                          logic.eq
                            (cts.univ cts.star cts.box cts.I)
                            (nat.le (nat.minus a c) (nat.plus b __))
                            (nat.le
                               (nat.minus a c)
                               (nat.plus b (nat.minus (nat.minus a b) c))))
                         (logic.refl
                            (cts.univ cts.star cts.box cts.I)
                            (nat.le
                               (nat.minus a c)
                               (nat.plus b (nat.minus (nat.minus a b) c))))
                         (nat.minus a (nat.plus c b))
                         (logic.rewrite_l
                            nat.nat
                            (nat.plus b c)
                            (__:(cts.Term cts.box nat.nat) =>
                             logic.eq nat.nat (nat.minus (nat.minus a b) c) (nat.minus a __))
                            (nat.minus_plus a b c)
                            (nat.plus c b)
                            (nat.commutative_plus b c)))
                      (nat.plus (nat.minus (nat.minus a b) c) b)
                      (nat.commutative_plus (nat.minus (nat.minus a b) c) b))
                   (nat.plus (nat.minus a (nat.plus c b)) b)
                   (nat.commutative_plus (nat.minus a (nat.plus c b)) b))
                (nat.minus (nat.minus a c) b)
                (nat.minus_plus a c b))))
       (logic.rewrite_l
          nat.nat
          (nat.minus (nat.minus a b) c)
          (__:(cts.Term cts.box nat.nat) =>
           logic.eq
             (cts.univ cts.star cts.box cts.I)
             (nat.le (nat.minus (nat.minus a c) b) __)
             (nat.le (nat.minus (nat.minus a c) b) (nat.minus (nat.minus a b) c)))
          (logic.refl
             (cts.univ cts.star cts.box cts.I)
             (nat.le (nat.minus (nat.minus a c) b) (nat.minus (nat.minus a b) c)))
          (nat.minus (nat.plus (nat.minus (nat.minus a b) c) b) b)
          (nat.minus_plus_m_m (nat.minus (nat.minus a b) c) b))).

def minus_le_minus_minus_comm :
  cts.Term
    cts.star
    (cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       nat.nat
       (x:(cts.Term cts.box nat.nat) =>
        cts.prod
          cts.box
          cts.star
          cts.star
          cts.I
          nat.nat
          (x0:(cts.Term cts.box nat.nat) =>
           cts.prod
             cts.box
             cts.star
             cts.star
             cts.I
             nat.nat
             (x1:(cts.Term cts.box nat.nat) =>
              cts.prod
                cts.star
                cts.star
                cts.star
                cts.I
                (nat.le x0 x)
                (x2:(cts.Term cts.star (nat.le x0 x)) =>
                 logic.eq nat.nat (nat.minus x1 (nat.minus x x0)) (nat.minus (nat.plus x1 x0) x))))))
  :=
  b:(cts.Term cts.box nat.nat) =>
  c:(cts.Term cts.box nat.nat) =>
  a:(cts.Term cts.box nat.nat) =>
  H:(cts.Term cts.star (nat.le c b)) =>
  logic.eq_ind_r
    nat.nat
    (nat.plus (nat.minus b c) c)
    (x:(cts.Term cts.box nat.nat) =>
     logic.eq nat.nat (nat.minus a (nat.minus b c)) (nat.minus (nat.plus a c) x))
    (logic.rewrite_r
       nat.nat
       (nat.plus c a)
       (__:(cts.Term cts.box nat.nat) =>
        logic.eq nat.nat (nat.minus a (nat.minus b c)) (nat.minus __ (nat.plus (nat.minus b c) c)))
       (logic.rewrite_r
          nat.nat
          (nat.plus c (nat.minus b c))
          (__:(cts.Term cts.box nat.nat) =>
           logic.eq nat.nat (nat.minus a (nat.minus b c)) (nat.minus (nat.plus c a) __))
          (logic.rewrite_l
             nat.nat
             (nat.minus (nat.minus (nat.plus c a) c) (nat.minus b c))
             (__:(cts.Term cts.box nat.nat) => logic.eq nat.nat (nat.minus a (nat.minus b c)) __)
             (logic.rewrite_r
                nat.nat
                (nat.minus (nat.plus c a) c)
                (__:(cts.Term cts.box nat.nat) =>
                 logic.eq
                   nat.nat
                   (nat.minus __ (nat.minus b c))
                   (nat.minus (nat.minus (nat.plus c a) c) (nat.minus b c)))
                (logic.refl nat.nat (nat.minus (nat.minus (nat.plus c a) c) (nat.minus b c)))
                a
                (logic.rewrite_l
                   nat.nat
                   (nat.plus a c)
                   (__:(cts.Term cts.box nat.nat) => logic.eq nat.nat a (nat.minus __ c))
                   (nat.minus_plus_m_m a c)
                   (nat.plus c a)
                   (nat.commutative_plus a c)))
             (nat.minus (nat.plus c a) (nat.plus c (nat.minus b c)))
             (nat.minus_plus (nat.plus c a) c (nat.minus b c)))
          (nat.plus (nat.minus b c) c)
          (nat.commutative_plus (nat.minus b c) c))
       (nat.plus a c)
       (nat.commutative_plus a c))
    b
    (nat.plus_minus_m_m b c H).

def minus_plus_plus_l :
  cts.Term
    cts.star
    (cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       nat.nat
       (x:(cts.Term cts.box nat.nat) =>
        cts.prod
          cts.box
          cts.star
          cts.star
          cts.I
          nat.nat
          (x0:(cts.Term cts.box nat.nat) =>
           cts.prod
             cts.box
             cts.star
             cts.star
             cts.I
             nat.nat
             (x1:(cts.Term cts.box nat.nat) =>
              logic.eq nat.nat (nat.minus (nat.plus x x1) (nat.plus x0 x1)) (nat.minus x x0)))))
  :=
  x:(cts.Term cts.box nat.nat) =>
  y:(cts.Term cts.box nat.nat) =>
  h:(cts.Term cts.box nat.nat) =>
  logic.rewrite_l
    nat.nat
    (nat.minus (nat.minus (nat.plus x h) y) h)
    (__:(cts.Term cts.box nat.nat) => logic.eq nat.nat __ (nat.minus x y))
    (logic.rewrite_r
       nat.nat
       (nat.minus x y)
       (__:(cts.Term cts.box nat.nat) => logic.eq nat.nat __ (nat.minus x y))
       (logic.refl nat.nat (nat.minus x y))
       (nat.minus (nat.minus (nat.plus x h) y) h)
       (logic.rewrite_r
          nat.nat
          (nat.minus (nat.plus x h) h)
          (__:(cts.Term cts.box nat.nat) =>
           logic.eq nat.nat (nat.minus (nat.minus (nat.plus x h) y) h) (nat.minus __ y))
          (nat.minus_minus_comm (nat.plus x h) y h)
          x
          (nat.minus_plus_m_m x h)))
    (nat.minus (nat.plus x h) (nat.plus y h))
    (nat.minus_plus (nat.plus x h) y h).

eqb :
  cts.Term
    cts.diamond
    (cts.cast
       cts.triangle
       cts.sinf
       (cts.univ cts.box cts.triangle cts.I)
       (cts.univ cts.diamond cts.sinf cts.I)
       cts.I
       (cts.prod
          cts.box
          cts.box
          cts.box
          cts.I
          nat.nat
          (x:(cts.Term cts.box nat.nat) =>
           cts.prod
             cts.box
             cts.box
             cts.box
             cts.I
             nat.nat
             (x0:(cts.Term cts.box nat.nat) => bool.bool)))).

eqb_body :
  cts.Term
    cts.diamond
    (cts.cast
       cts.triangle
       cts.sinf
       (cts.univ cts.box cts.triangle cts.I)
       (cts.univ cts.diamond cts.sinf cts.I)
       cts.I
       (cts.prod
          cts.box
          cts.box
          cts.box
          cts.I
          nat.nat
          (x:(cts.Term cts.box nat.nat) =>
           cts.prod
             cts.box
             cts.box
             cts.box
             cts.I
             nat.nat
             (x0:(cts.Term cts.box nat.nat) => bool.bool)))).

axiom_eqb :
  cts.Term
    cts.star
    (cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       nat.nat
       (x:(cts.Term cts.box nat.nat) =>
        connectives.equal
          (cts.prod
             cts.box
             cts.box
             cts.box
             cts.I
             nat.nat
             (x0:(cts.Term cts.box nat.nat) => bool.bool))
          (nat.eqb x)
          (nat.filter_nat_type
             (cts.prod
                cts.box
                cts.box
                cts.box
                cts.I
                nat.nat
                (x0:(cts.Term cts.box nat.nat) => bool.bool))
             nat.eqb_body
             x))).

def eq_eqb :
  cts.Term
    cts.star
    (cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       nat.nat
       (x:(cts.Term cts.box nat.nat) =>
        leibniz.leibniz
          (cts.prod
             cts.box
             cts.box
             cts.box
             cts.I
             nat.nat
             (x0:(cts.Term cts.box nat.nat) => bool.bool))
          (nat.eqb x)
          (nat.filter_nat_type
             (cts.prod
                cts.box
                cts.box
                cts.box
                cts.I
                nat.nat
                (x0:(cts.Term cts.box nat.nat) => bool.bool))
             nat.eqb_body
             x)))
  :=
  n:(cts.Term cts.box nat.nat) =>
  connectives.equal_leibniz
    (cts.prod cts.box cts.box cts.box cts.I nat.nat (x:(cts.Term cts.box nat.nat) => bool.bool))
    (nat.eqb n)
    (nat.filter_nat_type
       (cts.prod cts.box cts.box cts.box cts.I nat.nat (x:(cts.Term cts.box nat.nat) => bool.bool))
       nat.eqb_body
       n)
    (nat.axiom_eqb n).

def sym_eq_eqb :
  cts.Term
    cts.star
    (cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       nat.nat
       (x:(cts.Term cts.box nat.nat) =>
        leibniz.leibniz
          (cts.prod
             cts.box
             cts.box
             cts.box
             cts.I
             nat.nat
             (x0:(cts.Term cts.box nat.nat) => bool.bool))
          (nat.filter_nat_type
             (cts.prod
                cts.box
                cts.box
                cts.box
                cts.I
                nat.nat
                (x0:(cts.Term cts.box nat.nat) => bool.bool))
             nat.eqb_body
             x)
          (nat.eqb x)))
  :=
  n:(cts.Term cts.box nat.nat) =>
  leibniz.sym_leibniz
    (cts.prod cts.box cts.box cts.box cts.I nat.nat (x:(cts.Term cts.box nat.nat) => bool.bool))
    (nat.eqb n)
    (nat.filter_nat_type
       (cts.prod cts.box cts.box cts.box cts.I nat.nat (x:(cts.Term cts.box nat.nat) => bool.bool))
       nat.eqb_body
       n)
    (nat.eq_eqb n).

axiom_eqb_body_O :
  cts.Term
    cts.star
    (connectives.equal
       (cts.prod cts.box cts.box cts.box cts.I nat.nat (x:(cts.Term cts.box nat.nat) => bool.bool))
       (nat.eqb_body nat.O)
       (m:(cts.Term cts.box nat.nat) =>
        nat.match_nat_type bool.bool bool.true (q:(cts.Term cts.box nat.nat) => bool.false) m)).

def eq_eqb_body_O :
  cts.Term
    cts.star
    (leibniz.leibniz
       (cts.prod cts.box cts.box cts.box cts.I nat.nat (x:(cts.Term cts.box nat.nat) => bool.bool))
       (nat.eqb_body nat.O)
       (m:(cts.Term cts.box nat.nat) =>
        nat.match_nat_type bool.bool bool.true (q:(cts.Term cts.box nat.nat) => bool.false) m))
  :=
  connectives.equal_leibniz
    (cts.prod cts.box cts.box cts.box cts.I nat.nat (x:(cts.Term cts.box nat.nat) => bool.bool))
    (nat.eqb_body nat.O)
    (m:(cts.Term cts.box nat.nat) =>
     nat.match_nat_type bool.bool bool.true (q:(cts.Term cts.box nat.nat) => bool.false) m)
    nat.axiom_eqb_body_O.

def sym_eq_eqb_body_O :
  cts.Term
    cts.star
    (leibniz.leibniz
       (cts.prod cts.box cts.box cts.box cts.I nat.nat (x:(cts.Term cts.box nat.nat) => bool.bool))
       (m:(cts.Term cts.box nat.nat) =>
        nat.match_nat_type bool.bool bool.true (q:(cts.Term cts.box nat.nat) => bool.false) m)
       (nat.eqb_body nat.O))
  :=
  leibniz.sym_leibniz
    (cts.prod cts.box cts.box cts.box cts.I nat.nat (x:(cts.Term cts.box nat.nat) => bool.bool))
    (nat.eqb_body nat.O)
    (m:(cts.Term cts.box nat.nat) =>
     nat.match_nat_type bool.bool bool.true (q:(cts.Term cts.box nat.nat) => bool.false) m)
    nat.eq_eqb_body_O.

axiom_eqb_body_S :
  cts.Term
    cts.star
    (cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       nat.nat
       (x:(cts.Term cts.box nat.nat) =>
        connectives.equal
          (cts.prod
             cts.box
             cts.box
             cts.box
             cts.I
             nat.nat
             (x0:(cts.Term cts.box nat.nat) => bool.bool))
          (nat.eqb_body (nat.S x))
          (m:(cts.Term cts.box nat.nat) =>
           nat.match_nat_type bool.bool bool.false (q:(cts.Term cts.box nat.nat) => nat.eqb x q) m))).

def eq_eqb_body_S :
  cts.Term
    cts.star
    (cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       nat.nat
       (x:(cts.Term cts.box nat.nat) =>
        leibniz.leibniz
          (cts.prod
             cts.box
             cts.box
             cts.box
             cts.I
             nat.nat
             (x0:(cts.Term cts.box nat.nat) => bool.bool))
          (nat.eqb_body (nat.S x))
          (m:(cts.Term cts.box nat.nat) =>
           nat.match_nat_type bool.bool bool.false (q:(cts.Term cts.box nat.nat) => nat.eqb x q) m)))
  :=
  n:(cts.Term cts.box nat.nat) =>
  connectives.equal_leibniz
    (cts.prod cts.box cts.box cts.box cts.I nat.nat (x:(cts.Term cts.box nat.nat) => bool.bool))
    (nat.eqb_body (nat.S n))
    (m:(cts.Term cts.box nat.nat) =>
     nat.match_nat_type bool.bool bool.false (q:(cts.Term cts.box nat.nat) => nat.eqb n q) m)
    (nat.axiom_eqb_body_S n).

def sym_eq_eqb_body_S :
  cts.Term
    cts.star
    (cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       nat.nat
       (x:(cts.Term cts.box nat.nat) =>
        leibniz.leibniz
          (cts.prod
             cts.box
             cts.box
             cts.box
             cts.I
             nat.nat
             (x0:(cts.Term cts.box nat.nat) => bool.bool))
          (m:(cts.Term cts.box nat.nat) =>
           nat.match_nat_type bool.bool bool.false (q:(cts.Term cts.box nat.nat) => nat.eqb x q) m)
          (nat.eqb_body (nat.S x))))
  :=
  n:(cts.Term cts.box nat.nat) =>
  leibniz.sym_leibniz
    (cts.prod cts.box cts.box cts.box cts.I nat.nat (x:(cts.Term cts.box nat.nat) => bool.bool))
    (nat.eqb_body (nat.S n))
    (m:(cts.Term cts.box nat.nat) =>
     nat.match_nat_type bool.bool bool.false (q:(cts.Term cts.box nat.nat) => nat.eqb n q) m)
    (nat.eq_eqb_body_S n).

def eqb_elim :
  cts.Term
    cts.star
    (cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       nat.nat
       (x:(cts.Term cts.box nat.nat) =>
        cts.prod
          cts.box
          cts.star
          cts.star
          cts.I
          nat.nat
          (x0:(cts.Term cts.box nat.nat) =>
           cts.prod
             cts.box
             cts.star
             cts.star
             cts.I
             (cts.prod
                cts.box
                cts.box
                cts.box
                cts.I
                bool.bool
                (x1:(cts.Term cts.box bool.bool) => cts.univ cts.star cts.box cts.I))
             (x1:(cts.Term
                    cts.box
                    (cts.prod
                       cts.box
                       cts.box
                       cts.box
                       cts.I
                       bool.bool
                       (x1:(cts.Term cts.box bool.bool) => cts.univ cts.star cts.box cts.I))) =>
              cts.prod
                cts.star
                cts.star
                cts.star
                cts.I
                (cts.prod
                   cts.star
                   cts.star
                   cts.star
                   cts.I
                   (logic.eq nat.nat x x0)
                   (x2:(cts.Term cts.star (logic.eq nat.nat x x0)) => x1 bool.true))
                (x2:(cts.Term
                       cts.star
                       (cts.prod
                          cts.star
                          cts.star
                          cts.star
                          cts.I
                          (logic.eq nat.nat x x0)
                          (x2:(cts.Term cts.star (logic.eq nat.nat x x0)) => x1 bool.true))) =>
                 cts.prod
                   cts.star
                   cts.star
                   cts.star
                   cts.I
                   (cts.prod
                      cts.star
                      cts.star
                      cts.star
                      cts.I
                      (connectives.Not (logic.eq nat.nat x x0))
                      (x3:(cts.Term cts.star (connectives.Not (logic.eq nat.nat x x0))) =>
                       x1 bool.false))
                   (x3:(cts.Term
                          cts.star
                          (cts.prod
                             cts.star
                             cts.star
                             cts.star
                             cts.I
                             (connectives.Not (logic.eq nat.nat x x0))
                             (x3:(cts.Term
                                    cts.star
                                    (connectives.Not (logic.eq nat.nat x x0))) =>
                              x1 bool.false))) =>
                    x1 (nat.eqb x x0)))))))
  :=
  nat.nat_elim2
    (__:(cts.Term cts.box nat.nat) =>
     _0:(cts.Term cts.box nat.nat) =>
     cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       (cts.prod
          cts.box
          cts.box
          cts.box
          cts.I
          bool.bool
          (x:(cts.Term cts.box bool.bool) => cts.univ cts.star cts.box cts.I))
       (x:(cts.Term
             cts.box
             (cts.prod
                cts.box
                cts.box
                cts.box
                cts.I
                bool.bool
                (x:(cts.Term cts.box bool.bool) => cts.univ cts.star cts.box cts.I))) =>
        cts.prod
          cts.star
          cts.star
          cts.star
          cts.I
          (cts.prod
             cts.star
             cts.star
             cts.star
             cts.I
             (logic.eq nat.nat __ _0)
             (x0:(cts.Term cts.star (logic.eq nat.nat __ _0)) => x bool.true))
          (x0:(cts.Term
                 cts.star
                 (cts.prod
                    cts.star
                    cts.star
                    cts.star
                    cts.I
                    (logic.eq nat.nat __ _0)
                    (x0:(cts.Term cts.star (logic.eq nat.nat __ _0)) => x bool.true))) =>
           cts.prod
             cts.star
             cts.star
             cts.star
             cts.I
             (cts.prod
                cts.star
                cts.star
                cts.star
                cts.I
                (connectives.Not (logic.eq nat.nat __ _0))
                (x1:(cts.Term cts.star (connectives.Not (logic.eq nat.nat __ _0))) =>
                 x bool.false))
             (x1:(cts.Term
                    cts.star
                    (cts.prod
                       cts.star
                       cts.star
                       cts.star
                       cts.I
                       (connectives.Not (logic.eq nat.nat __ _0))
                       (x1:(cts.Term cts.star (connectives.Not (logic.eq nat.nat __ _0))) =>
                        x bool.false))) =>
              x (nat.eqb __ _0)))))
    (n:(cts.Term cts.box nat.nat) =>
     nat.match_nat_prop
       (__:(cts.Term cts.box nat.nat) =>
        cts.prod
          cts.box
          cts.star
          cts.star
          cts.I
          (cts.prod
             cts.box
             cts.box
             cts.box
             cts.I
             bool.bool
             (x:(cts.Term cts.box bool.bool) => cts.univ cts.star cts.box cts.I))
          (x:(cts.Term
                cts.box
                (cts.prod
                   cts.box
                   cts.box
                   cts.box
                   cts.I
                   bool.bool
                   (x:(cts.Term cts.box bool.bool) => cts.univ cts.star cts.box cts.I))) =>
           cts.prod
             cts.star
             cts.star
             cts.star
             cts.I
             (cts.prod
                cts.star
                cts.star
                cts.star
                cts.I
                (logic.eq nat.nat nat.O __)
                (x0:(cts.Term cts.star (logic.eq nat.nat nat.O __)) => x bool.true))
             (x0:(cts.Term
                    cts.star
                    (cts.prod
                       cts.star
                       cts.star
                       cts.star
                       cts.I
                       (logic.eq nat.nat nat.O __)
                       (x0:(cts.Term cts.star (logic.eq nat.nat nat.O __)) => x bool.true))) =>
              cts.prod
                cts.star
                cts.star
                cts.star
                cts.I
                (cts.prod
                   cts.star
                   cts.star
                   cts.star
                   cts.I
                   (connectives.Not (logic.eq nat.nat nat.O __))
                   (x1:(cts.Term cts.star (connectives.Not (logic.eq nat.nat nat.O __))) =>
                    x bool.false))
                (x1:(cts.Term
                       cts.star
                       (cts.prod
                          cts.star
                          cts.star
                          cts.star
                          cts.I
                          (connectives.Not (logic.eq nat.nat nat.O __))
                          (x1:(cts.Term
                                 cts.star
                                 (connectives.Not (logic.eq nat.nat nat.O __))) =>
                           x bool.false))) =>
                 x (nat.eqb nat.O __)))))
       (nat.sym_eq_eqb
          nat.O
          (y:(cts.Term
                cts.box
                (cts.prod'
                   cts.box
                   cts.box
                   cts.box
                   nat.nat
                   (x0:(cts.Term cts.box nat.nat) => bool.bool))) =>
           cts.prod
             cts.box
             cts.star
             cts.star
             cts.I
             (cts.prod
                cts.box
                cts.box
                cts.box
                cts.I
                bool.bool
                (x:(cts.Term cts.box bool.bool) => cts.univ cts.star cts.box cts.I))
             (x:(cts.Term
                   cts.box
                   (cts.prod
                      cts.box
                      cts.box
                      cts.box
                      cts.I
                      bool.bool
                      (x:(cts.Term cts.box bool.bool) => cts.univ cts.star cts.box cts.I))) =>
              cts.prod
                cts.star
                cts.star
                cts.star
                cts.I
                (cts.prod
                   cts.star
                   cts.star
                   cts.star
                   cts.I
                   (logic.eq nat.nat nat.O nat.O)
                   (x0:(cts.Term cts.star (logic.eq nat.nat nat.O nat.O)) => x bool.true))
                (x0:(cts.Term
                       cts.star
                       (cts.prod
                          cts.star
                          cts.star
                          cts.star
                          cts.I
                          (logic.eq nat.nat nat.O nat.O)
                          (x0:(cts.Term cts.star (logic.eq nat.nat nat.O nat.O)) =>
                           x bool.true))) =>
                 cts.prod
                   cts.star
                   cts.star
                   cts.star
                   cts.I
                   (cts.prod
                      cts.star
                      cts.star
                      cts.star
                      cts.I
                      (connectives.Not (logic.eq nat.nat nat.O nat.O))
                      (x1:(cts.Term
                             cts.star
                             (connectives.Not (logic.eq nat.nat nat.O nat.O))) =>
                       x bool.false))
                   (x1:(cts.Term
                          cts.star
                          (cts.prod
                             cts.star
                             cts.star
                             cts.star
                             cts.I
                             (connectives.Not (logic.eq nat.nat nat.O nat.O))
                             (x1:(cts.Term
                                    cts.star
                                    (connectives.Not (logic.eq nat.nat nat.O nat.O))) =>
                              x bool.false))) =>
                    x (y nat.O)))))
          (nat.sym_eq_filter_nat_type_O
             (cts.prod
                cts.box
                cts.box
                cts.box
                cts.I
                nat.nat
                (x:(cts.Term cts.box nat.nat) => bool.bool))
             nat.eqb_body
             (y:(cts.Term
                   cts.box
                   (cts.prod'
                      cts.box
                      cts.box
                      cts.box
                      nat.nat
                      (x:(cts.Term cts.box nat.nat) => bool.bool))) =>
              cts.prod
                cts.box
                cts.star
                cts.star
                cts.I
                (cts.prod
                   cts.box
                   cts.box
                   cts.box
                   cts.I
                   bool.bool
                   (x:(cts.Term cts.box bool.bool) => cts.univ cts.star cts.box cts.I))
                (x:(cts.Term
                      cts.box
                      (cts.prod
                         cts.box
                         cts.box
                         cts.box
                         cts.I
                         bool.bool
                         (x:(cts.Term cts.box bool.bool) => cts.univ cts.star cts.box cts.I))) =>
                 cts.prod
                   cts.star
                   cts.star
                   cts.star
                   cts.I
                   (cts.prod
                      cts.star
                      cts.star
                      cts.star
                      cts.I
                      (logic.eq nat.nat nat.O nat.O)
                      (x0:(cts.Term cts.star (logic.eq nat.nat nat.O nat.O)) => x bool.true))
                   (x0:(cts.Term
                          cts.star
                          (cts.prod
                             cts.star
                             cts.star
                             cts.star
                             cts.I
                             (logic.eq nat.nat nat.O nat.O)
                             (x0:(cts.Term cts.star (logic.eq nat.nat nat.O nat.O)) =>
                              x bool.true))) =>
                    cts.prod
                      cts.star
                      cts.star
                      cts.star
                      cts.I
                      (cts.prod
                         cts.star
                         cts.star
                         cts.star
                         cts.I
                         (connectives.Not (logic.eq nat.nat nat.O nat.O))
                         (x1:(cts.Term
                                cts.star
                                (connectives.Not (logic.eq nat.nat nat.O nat.O))) =>
                          x bool.false))
                      (x1:(cts.Term
                             cts.star
                             (cts.prod
                                cts.star
                                cts.star
                                cts.star
                                cts.I
                                (connectives.Not (logic.eq nat.nat nat.O nat.O))
                                (x1:(cts.Term
                                       cts.star
                                       (connectives.Not (logic.eq nat.nat nat.O nat.O))) =>
                                 x bool.false))) =>
                       x (y nat.O)))))
             (nat.sym_eq_eqb_body_O
                (y:(cts.Term
                      cts.box
                      (cts.prod'
                         cts.box
                         cts.box
                         cts.box
                         nat.nat
                         (x:(cts.Term cts.box nat.nat) => bool.bool))) =>
                 cts.prod
                   cts.box
                   cts.star
                   cts.star
                   cts.I
                   (cts.prod
                      cts.box
                      cts.box
                      cts.box
                      cts.I
                      bool.bool
                      (x:(cts.Term cts.box bool.bool) => cts.univ cts.star cts.box cts.I))
                   (x:(cts.Term
                         cts.box
                         (cts.prod
                            cts.box
                            cts.box
                            cts.box
                            cts.I
                            bool.bool
                            (x:(cts.Term cts.box bool.bool) =>
                             cts.univ cts.star cts.box cts.I))) =>
                    cts.prod
                      cts.star
                      cts.star
                      cts.star
                      cts.I
                      (cts.prod
                         cts.star
                         cts.star
                         cts.star
                         cts.I
                         (logic.eq nat.nat nat.O nat.O)
                         (x0:(cts.Term cts.star (logic.eq nat.nat nat.O nat.O)) => x bool.true))
                      (x0:(cts.Term
                             cts.star
                             (cts.prod
                                cts.star
                                cts.star
                                cts.star
                                cts.I
                                (logic.eq nat.nat nat.O nat.O)
                                (x0:(cts.Term cts.star (logic.eq nat.nat nat.O nat.O)) =>
                                 x bool.true))) =>
                       cts.prod
                         cts.star
                         cts.star
                         cts.star
                         cts.I
                         (cts.prod
                            cts.star
                            cts.star
                            cts.star
                            cts.I
                            (connectives.Not (logic.eq nat.nat nat.O nat.O))
                            (x1:(cts.Term
                                   cts.star
                                   (connectives.Not (logic.eq nat.nat nat.O nat.O))) =>
                             x bool.false))
                         (x1:(cts.Term
                                cts.star
                                (cts.prod
                                   cts.star
                                   cts.star
                                   cts.star
                                   cts.I
                                   (connectives.Not (logic.eq nat.nat nat.O nat.O))
                                   (x1:(cts.Term
                                          cts.star
                                          (connectives.Not
                                             (logic.eq nat.nat nat.O nat.O))) =>
                                    x bool.false))) =>
                          x (y nat.O)))))
                (nat.sym_eq_match_nat_type_O
                   bool.bool
                   bool.true
                   (q:(cts.Term cts.box nat.nat) => bool.false)
                   (y:(cts.Term cts.box bool.bool) =>
                    cts.prod
                      cts.box
                      cts.star
                      cts.star
                      cts.I
                      (cts.prod
                         cts.box
                         cts.box
                         cts.box
                         cts.I
                         bool.bool
                         (x:(cts.Term cts.box bool.bool) => cts.univ cts.star cts.box cts.I))
                      (x:(cts.Term
                            cts.box
                            (cts.prod
                               cts.box
                               cts.box
                               cts.box
                               cts.I
                               bool.bool
                               (x:(cts.Term cts.box bool.bool) =>
                                cts.univ cts.star cts.box cts.I))) =>
                       cts.prod
                         cts.star
                         cts.star
                         cts.star
                         cts.I
                         (cts.prod
                            cts.star
                            cts.star
                            cts.star
                            cts.I
                            (logic.eq nat.nat nat.O nat.O)
                            (x0:(cts.Term cts.star (logic.eq nat.nat nat.O nat.O)) =>
                             x bool.true))
                         (x0:(cts.Term
                                cts.star
                                (cts.prod
                                   cts.star
                                   cts.star
                                   cts.star
                                   cts.I
                                   (logic.eq nat.nat nat.O nat.O)
                                   (x0:(cts.Term
                                          cts.star
                                          (logic.eq nat.nat nat.O nat.O)) =>
                                    x bool.true))) =>
                          cts.prod
                            cts.star
                            cts.star
                            cts.star
                            cts.I
                            (cts.prod
                               cts.star
                               cts.star
                               cts.star
                               cts.I
                               (connectives.Not (logic.eq nat.nat nat.O nat.O))
                               (x1:(cts.Term
                                      cts.star
                                      (connectives.Not (logic.eq nat.nat nat.O nat.O))) =>
                                x bool.false))
                            (x1:(cts.Term
                                   cts.star
                                   (cts.prod
                                      cts.star
                                      cts.star
                                      cts.star
                                      cts.I
                                      (connectives.Not (logic.eq nat.nat nat.O nat.O))
                                      (x1:(cts.Term
                                             cts.star
                                             (connectives.Not
                                                (logic.eq nat.nat nat.O nat.O))) =>
                                       x bool.false))) =>
                             x y))))
                   (P:(cts.Term
                         cts.box
                         (cts.prod'
                            cts.box
                            cts.box
                            cts.box
                            bool.bool
                            (x:(cts.Term cts.box bool.bool) =>
                             cts.univ cts.star cts.box cts.I))) =>
                    auto:(cts.Term
                            cts.star
                            (cts.prod'
                               cts.star
                               cts.star
                               cts.star
                               (logic.eq nat.nat nat.O nat.O)
                               (x0:(cts.Term cts.star (logic.eq nat.nat nat.O nat.O)) =>
                                P bool.true))) =>
                    auto':(cts.Term
                             cts.star
                             (cts.prod'
                                cts.star
                                cts.star
                                cts.star
                                (connectives.Not (logic.eq nat.nat nat.O nat.O))
                                (x1:(cts.Term
                                       cts.star
                                       (connectives.Not (logic.eq nat.nat nat.O nat.O))) =>
                                 P bool.false))) =>
                    auto (logic.refl nat.nat nat.O))))))
       (auto:(cts.Term cts.box nat.nat) =>
        nat.sym_eq_eqb
          nat.O
          (y:(cts.Term
                cts.box
                (cts.prod'
                   cts.box
                   cts.box
                   cts.box
                   nat.nat
                   (x0:(cts.Term cts.box nat.nat) => bool.bool))) =>
           cts.prod
             cts.box
             cts.star
             cts.star
             cts.I
             (cts.prod
                cts.box
                cts.box
                cts.box
                cts.I
                bool.bool
                (x:(cts.Term cts.box bool.bool) => cts.univ cts.star cts.box cts.I))
             (x:(cts.Term
                   cts.box
                   (cts.prod
                      cts.box
                      cts.box
                      cts.box
                      cts.I
                      bool.bool
                      (x:(cts.Term cts.box bool.bool) => cts.univ cts.star cts.box cts.I))) =>
              cts.prod
                cts.star
                cts.star
                cts.star
                cts.I
                (cts.prod
                   cts.star
                   cts.star
                   cts.star
                   cts.I
                   (logic.eq nat.nat nat.O (nat.S auto))
                   (x0:(cts.Term cts.star (logic.eq nat.nat nat.O (nat.S auto))) => x bool.true))
                (x0:(cts.Term
                       cts.star
                       (cts.prod
                          cts.star
                          cts.star
                          cts.star
                          cts.I
                          (logic.eq nat.nat nat.O (nat.S auto))
                          (x0:(cts.Term cts.star (logic.eq nat.nat nat.O (nat.S auto))) =>
                           x bool.true))) =>
                 cts.prod
                   cts.star
                   cts.star
                   cts.star
                   cts.I
                   (cts.prod
                      cts.star
                      cts.star
                      cts.star
                      cts.I
                      (connectives.Not (logic.eq nat.nat nat.O (nat.S auto)))
                      (x1:(cts.Term
                             cts.star
                             (connectives.Not (logic.eq nat.nat nat.O (nat.S auto)))) =>
                       x bool.false))
                   (x1:(cts.Term
                          cts.star
                          (cts.prod
                             cts.star
                             cts.star
                             cts.star
                             cts.I
                             (connectives.Not (logic.eq nat.nat nat.O (nat.S auto)))
                             (x1:(cts.Term
                                    cts.star
                                    (connectives.Not
                                       (logic.eq nat.nat nat.O (nat.S auto)))) =>
                              x bool.false))) =>
                    x (y (nat.S auto))))))
          (nat.sym_eq_filter_nat_type_O
             (cts.prod
                cts.box
                cts.box
                cts.box
                cts.I
                nat.nat
                (x:(cts.Term cts.box nat.nat) => bool.bool))
             nat.eqb_body
             (y:(cts.Term
                   cts.box
                   (cts.prod'
                      cts.box
                      cts.box
                      cts.box
                      nat.nat
                      (x:(cts.Term cts.box nat.nat) => bool.bool))) =>
              cts.prod
                cts.box
                cts.star
                cts.star
                cts.I
                (cts.prod
                   cts.box
                   cts.box
                   cts.box
                   cts.I
                   bool.bool
                   (x:(cts.Term cts.box bool.bool) => cts.univ cts.star cts.box cts.I))
                (x:(cts.Term
                      cts.box
                      (cts.prod
                         cts.box
                         cts.box
                         cts.box
                         cts.I
                         bool.bool
                         (x:(cts.Term cts.box bool.bool) => cts.univ cts.star cts.box cts.I))) =>
                 cts.prod
                   cts.star
                   cts.star
                   cts.star
                   cts.I
                   (cts.prod
                      cts.star
                      cts.star
                      cts.star
                      cts.I
                      (logic.eq nat.nat nat.O (nat.S auto))
                      (x0:(cts.Term cts.star (logic.eq nat.nat nat.O (nat.S auto))) =>
                       x bool.true))
                   (x0:(cts.Term
                          cts.star
                          (cts.prod
                             cts.star
                             cts.star
                             cts.star
                             cts.I
                             (logic.eq nat.nat nat.O (nat.S auto))
                             (x0:(cts.Term
                                    cts.star
                                    (logic.eq nat.nat nat.O (nat.S auto))) =>
                              x bool.true))) =>
                    cts.prod
                      cts.star
                      cts.star
                      cts.star
                      cts.I
                      (cts.prod
                         cts.star
                         cts.star
                         cts.star
                         cts.I
                         (connectives.Not (logic.eq nat.nat nat.O (nat.S auto)))
                         (x1:(cts.Term
                                cts.star
                                (connectives.Not (logic.eq nat.nat nat.O (nat.S auto)))) =>
                          x bool.false))
                      (x1:(cts.Term
                             cts.star
                             (cts.prod
                                cts.star
                                cts.star
                                cts.star
                                cts.I
                                (connectives.Not (logic.eq nat.nat nat.O (nat.S auto)))
                                (x1:(cts.Term
                                       cts.star
                                       (connectives.Not
                                          (logic.eq nat.nat nat.O (nat.S auto)))) =>
                                 x bool.false))) =>
                       x (y (nat.S auto))))))
             (nat.sym_eq_eqb_body_O
                (y:(cts.Term
                      cts.box
                      (cts.prod'
                         cts.box
                         cts.box
                         cts.box
                         nat.nat
                         (x:(cts.Term cts.box nat.nat) => bool.bool))) =>
                 cts.prod
                   cts.box
                   cts.star
                   cts.star
                   cts.I
                   (cts.prod
                      cts.box
                      cts.box
                      cts.box
                      cts.I
                      bool.bool
                      (x:(cts.Term cts.box bool.bool) => cts.univ cts.star cts.box cts.I))
                   (x:(cts.Term
                         cts.box
                         (cts.prod
                            cts.box
                            cts.box
                            cts.box
                            cts.I
                            bool.bool
                            (x:(cts.Term cts.box bool.bool) =>
                             cts.univ cts.star cts.box cts.I))) =>
                    cts.prod
                      cts.star
                      cts.star
                      cts.star
                      cts.I
                      (cts.prod
                         cts.star
                         cts.star
                         cts.star
                         cts.I
                         (logic.eq nat.nat nat.O (nat.S auto))
                         (x0:(cts.Term cts.star (logic.eq nat.nat nat.O (nat.S auto))) =>
                          x bool.true))
                      (x0:(cts.Term
                             cts.star
                             (cts.prod
                                cts.star
                                cts.star
                                cts.star
                                cts.I
                                (logic.eq nat.nat nat.O (nat.S auto))
                                (x0:(cts.Term
                                       cts.star
                                       (logic.eq nat.nat nat.O (nat.S auto))) =>
                                 x bool.true))) =>
                       cts.prod
                         cts.star
                         cts.star
                         cts.star
                         cts.I
                         (cts.prod
                            cts.star
                            cts.star
                            cts.star
                            cts.I
                            (connectives.Not (logic.eq nat.nat nat.O (nat.S auto)))
                            (x1:(cts.Term
                                   cts.star
                                   (connectives.Not (logic.eq nat.nat nat.O (nat.S auto)))) =>
                             x bool.false))
                         (x1:(cts.Term
                                cts.star
                                (cts.prod
                                   cts.star
                                   cts.star
                                   cts.star
                                   cts.I
                                   (connectives.Not (logic.eq nat.nat nat.O (nat.S auto)))
                                   (x1:(cts.Term
                                          cts.star
                                          (connectives.Not
                                             (logic.eq nat.nat nat.O (nat.S auto)))) =>
                                    x bool.false))) =>
                          x (y (nat.S auto))))))
                (nat.sym_eq_match_nat_type_S
                   bool.bool
                   bool.true
                   (q:(cts.Term cts.box nat.nat) => bool.false)
                   auto
                   (y:(cts.Term cts.box bool.bool) =>
                    cts.prod
                      cts.box
                      cts.star
                      cts.star
                      cts.I
                      (cts.prod
                         cts.box
                         cts.box
                         cts.box
                         cts.I
                         bool.bool
                         (x:(cts.Term cts.box bool.bool) => cts.univ cts.star cts.box cts.I))
                      (x:(cts.Term
                            cts.box
                            (cts.prod
                               cts.box
                               cts.box
                               cts.box
                               cts.I
                               bool.bool
                               (x:(cts.Term cts.box bool.bool) =>
                                cts.univ cts.star cts.box cts.I))) =>
                       cts.prod
                         cts.star
                         cts.star
                         cts.star
                         cts.I
                         (cts.prod
                            cts.star
                            cts.star
                            cts.star
                            cts.I
                            (logic.eq nat.nat nat.O (nat.S auto))
                            (x0:(cts.Term cts.star (logic.eq nat.nat nat.O (nat.S auto))) =>
                             x bool.true))
                         (x0:(cts.Term
                                cts.star
                                (cts.prod
                                   cts.star
                                   cts.star
                                   cts.star
                                   cts.I
                                   (logic.eq nat.nat nat.O (nat.S auto))
                                   (x0:(cts.Term
                                          cts.star
                                          (logic.eq nat.nat nat.O (nat.S auto))) =>
                                    x bool.true))) =>
                          cts.prod
                            cts.star
                            cts.star
                            cts.star
                            cts.I
                            (cts.prod
                               cts.star
                               cts.star
                               cts.star
                               cts.I
                               (connectives.Not (logic.eq nat.nat nat.O (nat.S auto)))
                               (x1:(cts.Term
                                      cts.star
                                      (connectives.Not
                                         (logic.eq nat.nat nat.O (nat.S auto)))) =>
                                x bool.false))
                            (x1:(cts.Term
                                   cts.star
                                   (cts.prod
                                      cts.star
                                      cts.star
                                      cts.star
                                      cts.I
                                      (connectives.Not
                                         (logic.eq nat.nat nat.O (nat.S auto)))
                                      (x1:(cts.Term
                                             cts.star
                                             (connectives.Not
                                                (logic.eq
                                                   nat.nat
                                                   nat.O
                                                   (nat.S auto)))) =>
                                       x bool.false))) =>
                             x y))))
                   (P:(cts.Term
                         cts.box
                         (cts.prod'
                            cts.box
                            cts.box
                            cts.box
                            bool.bool
                            (x:(cts.Term cts.box bool.bool) =>
                             cts.univ cts.star cts.box cts.I))) =>
                    auto':(cts.Term
                             cts.star
                             (cts.prod'
                                cts.star
                                cts.star
                                cts.star
                                (logic.eq nat.nat nat.O (nat.S auto))
                                (x0:(cts.Term
                                       cts.star
                                       (logic.eq nat.nat nat.O (nat.S auto))) =>
                                 P bool.true))) =>
                    auto'':(cts.Term
                              cts.star
                              (cts.prod'
                                 cts.star
                                 cts.star
                                 cts.star
                                 (connectives.Not (logic.eq nat.nat nat.O (nat.S auto)))
                                 (x1:(cts.Term
                                        cts.star
                                        (connectives.Not
                                           (logic.eq nat.nat nat.O (nat.S auto)))) =>
                                  P bool.false))) =>
                    auto'' (nat.not_eq_O_S auto))))))
       n)
    (n:(cts.Term cts.box nat.nat) =>
     nat.sym_eq_eqb
       (nat.S n)
       (y:(cts.Term
             cts.box
             (cts.prod'
                cts.box
                cts.box
                cts.box
                nat.nat
                (x0:(cts.Term cts.box nat.nat) => bool.bool))) =>
        cts.prod
          cts.box
          cts.star
          cts.star
          cts.I
          (cts.prod
             cts.box
             cts.box
             cts.box
             cts.I
             bool.bool
             (x:(cts.Term cts.box bool.bool) => cts.univ cts.star cts.box cts.I))
          (x:(cts.Term
                cts.box
                (cts.prod
                   cts.box
                   cts.box
                   cts.box
                   cts.I
                   bool.bool
                   (x:(cts.Term cts.box bool.bool) => cts.univ cts.star cts.box cts.I))) =>
           cts.prod
             cts.star
             cts.star
             cts.star
             cts.I
             (cts.prod
                cts.star
                cts.star
                cts.star
                cts.I
                (logic.eq nat.nat (nat.S n) nat.O)
                (x0:(cts.Term cts.star (logic.eq nat.nat (nat.S n) nat.O)) => x bool.true))
             (x0:(cts.Term
                    cts.star
                    (cts.prod
                       cts.star
                       cts.star
                       cts.star
                       cts.I
                       (logic.eq nat.nat (nat.S n) nat.O)
                       (x0:(cts.Term cts.star (logic.eq nat.nat (nat.S n) nat.O)) =>
                        x bool.true))) =>
              cts.prod
                cts.star
                cts.star
                cts.star
                cts.I
                (cts.prod
                   cts.star
                   cts.star
                   cts.star
                   cts.I
                   (connectives.Not (logic.eq nat.nat (nat.S n) nat.O))
                   (x1:(cts.Term
                          cts.star
                          (connectives.Not (logic.eq nat.nat (nat.S n) nat.O))) =>
                    x bool.false))
                (x1:(cts.Term
                       cts.star
                       (cts.prod
                          cts.star
                          cts.star
                          cts.star
                          cts.I
                          (connectives.Not (logic.eq nat.nat (nat.S n) nat.O))
                          (x1:(cts.Term
                                 cts.star
                                 (connectives.Not (logic.eq nat.nat (nat.S n) nat.O))) =>
                           x bool.false))) =>
                 x (y nat.O)))))
       (nat.sym_eq_filter_nat_type_S
          (cts.prod
             cts.box
             cts.box
             cts.box
             cts.I
             nat.nat
             (x:(cts.Term cts.box nat.nat) => bool.bool))
          nat.eqb_body
          n
          (y:(cts.Term
                cts.box
                (cts.prod'
                   cts.box
                   cts.box
                   cts.box
                   nat.nat
                   (x:(cts.Term cts.box nat.nat) => bool.bool))) =>
           cts.prod
             cts.box
             cts.star
             cts.star
             cts.I
             (cts.prod
                cts.box
                cts.box
                cts.box
                cts.I
                bool.bool
                (x:(cts.Term cts.box bool.bool) => cts.univ cts.star cts.box cts.I))
             (x:(cts.Term
                   cts.box
                   (cts.prod
                      cts.box
                      cts.box
                      cts.box
                      cts.I
                      bool.bool
                      (x:(cts.Term cts.box bool.bool) => cts.univ cts.star cts.box cts.I))) =>
              cts.prod
                cts.star
                cts.star
                cts.star
                cts.I
                (cts.prod
                   cts.star
                   cts.star
                   cts.star
                   cts.I
                   (logic.eq nat.nat (nat.S n) nat.O)
                   (x0:(cts.Term cts.star (logic.eq nat.nat (nat.S n) nat.O)) => x bool.true))
                (x0:(cts.Term
                       cts.star
                       (cts.prod
                          cts.star
                          cts.star
                          cts.star
                          cts.I
                          (logic.eq nat.nat (nat.S n) nat.O)
                          (x0:(cts.Term cts.star (logic.eq nat.nat (nat.S n) nat.O)) =>
                           x bool.true))) =>
                 cts.prod
                   cts.star
                   cts.star
                   cts.star
                   cts.I
                   (cts.prod
                      cts.star
                      cts.star
                      cts.star
                      cts.I
                      (connectives.Not (logic.eq nat.nat (nat.S n) nat.O))
                      (x1:(cts.Term
                             cts.star
                             (connectives.Not (logic.eq nat.nat (nat.S n) nat.O))) =>
                       x bool.false))
                   (x1:(cts.Term
                          cts.star
                          (cts.prod
                             cts.star
                             cts.star
                             cts.star
                             cts.I
                             (connectives.Not (logic.eq nat.nat (nat.S n) nat.O))
                             (x1:(cts.Term
                                    cts.star
                                    (connectives.Not (logic.eq nat.nat (nat.S n) nat.O))) =>
                              x bool.false))) =>
                    x (y nat.O)))))
          (nat.sym_eq_eqb_body_S
             n
             (y:(cts.Term
                   cts.box
                   (cts.prod'
                      cts.box
                      cts.box
                      cts.box
                      nat.nat
                      (x0:(cts.Term cts.box nat.nat) => bool.bool))) =>
              cts.prod
                cts.box
                cts.star
                cts.star
                cts.I
                (cts.prod
                   cts.box
                   cts.box
                   cts.box
                   cts.I
                   bool.bool
                   (x:(cts.Term cts.box bool.bool) => cts.univ cts.star cts.box cts.I))
                (x:(cts.Term
                      cts.box
                      (cts.prod
                         cts.box
                         cts.box
                         cts.box
                         cts.I
                         bool.bool
                         (x:(cts.Term cts.box bool.bool) => cts.univ cts.star cts.box cts.I))) =>
                 cts.prod
                   cts.star
                   cts.star
                   cts.star
                   cts.I
                   (cts.prod
                      cts.star
                      cts.star
                      cts.star
                      cts.I
                      (logic.eq nat.nat (nat.S n) nat.O)
                      (x0:(cts.Term cts.star (logic.eq nat.nat (nat.S n) nat.O)) => x bool.true))
                   (x0:(cts.Term
                          cts.star
                          (cts.prod
                             cts.star
                             cts.star
                             cts.star
                             cts.I
                             (logic.eq nat.nat (nat.S n) nat.O)
                             (x0:(cts.Term cts.star (logic.eq nat.nat (nat.S n) nat.O)) =>
                              x bool.true))) =>
                    cts.prod
                      cts.star
                      cts.star
                      cts.star
                      cts.I
                      (cts.prod
                         cts.star
                         cts.star
                         cts.star
                         cts.I
                         (connectives.Not (logic.eq nat.nat (nat.S n) nat.O))
                         (x1:(cts.Term
                                cts.star
                                (connectives.Not (logic.eq nat.nat (nat.S n) nat.O))) =>
                          x bool.false))
                      (x1:(cts.Term
                             cts.star
                             (cts.prod
                                cts.star
                                cts.star
                                cts.star
                                cts.I
                                (connectives.Not (logic.eq nat.nat (nat.S n) nat.O))
                                (x1:(cts.Term
                                       cts.star
                                       (connectives.Not
                                          (logic.eq nat.nat (nat.S n) nat.O))) =>
                                 x bool.false))) =>
                       x (y nat.O)))))
             (nat.sym_eq_match_nat_type_O
                bool.bool
                bool.false
                (q:(cts.Term cts.box nat.nat) => nat.eqb n q)
                (y:(cts.Term cts.box bool.bool) =>
                 cts.prod
                   cts.box
                   cts.star
                   cts.star
                   cts.I
                   (cts.prod
                      cts.box
                      cts.box
                      cts.box
                      cts.I
                      bool.bool
                      (x:(cts.Term cts.box bool.bool) => cts.univ cts.star cts.box cts.I))
                   (x:(cts.Term
                         cts.box
                         (cts.prod
                            cts.box
                            cts.box
                            cts.box
                            cts.I
                            bool.bool
                            (x:(cts.Term cts.box bool.bool) =>
                             cts.univ cts.star cts.box cts.I))) =>
                    cts.prod
                      cts.star
                      cts.star
                      cts.star
                      cts.I
                      (cts.prod
                         cts.star
                         cts.star
                         cts.star
                         cts.I
                         (logic.eq nat.nat (nat.S n) nat.O)
                         (x0:(cts.Term cts.star (logic.eq nat.nat (nat.S n) nat.O)) =>
                          x bool.true))
                      (x0:(cts.Term
                             cts.star
                             (cts.prod
                                cts.star
                                cts.star
                                cts.star
                                cts.I
                                (logic.eq nat.nat (nat.S n) nat.O)
                                (x0:(cts.Term
                                       cts.star
                                       (logic.eq nat.nat (nat.S n) nat.O)) =>
                                 x bool.true))) =>
                       cts.prod
                         cts.star
                         cts.star
                         cts.star
                         cts.I
                         (cts.prod
                            cts.star
                            cts.star
                            cts.star
                            cts.I
                            (connectives.Not (logic.eq nat.nat (nat.S n) nat.O))
                            (x1:(cts.Term
                                   cts.star
                                   (connectives.Not (logic.eq nat.nat (nat.S n) nat.O))) =>
                             x bool.false))
                         (x1:(cts.Term
                                cts.star
                                (cts.prod
                                   cts.star
                                   cts.star
                                   cts.star
                                   cts.I
                                   (connectives.Not (logic.eq nat.nat (nat.S n) nat.O))
                                   (x1:(cts.Term
                                          cts.star
                                          (connectives.Not
                                             (logic.eq nat.nat (nat.S n) nat.O))) =>
                                    x bool.false))) =>
                          x y))))
                (P:(cts.Term
                      cts.box
                      (cts.prod'
                         cts.box
                         cts.box
                         cts.box
                         bool.bool
                         (x:(cts.Term cts.box bool.bool) => cts.univ cts.star cts.box cts.I))) =>
                 auto:(cts.Term
                         cts.star
                         (cts.prod'
                            cts.star
                            cts.star
                            cts.star
                            (logic.eq nat.nat (nat.S n) nat.O)
                            (x0:(cts.Term cts.star (logic.eq nat.nat (nat.S n) nat.O)) =>
                             P bool.true))) =>
                 auto':(cts.Term
                          cts.star
                          (cts.prod'
                             cts.star
                             cts.star
                             cts.star
                             (connectives.Not (logic.eq nat.nat (nat.S n) nat.O))
                             (x1:(cts.Term
                                    cts.star
                                    (connectives.Not (logic.eq nat.nat (nat.S n) nat.O))) =>
                              P bool.false))) =>
                 auto' (logic.sym_not_eq nat.nat nat.O (nat.S n) (nat.not_eq_O_S n)))))))
    (n:(cts.Term cts.box nat.nat) =>
     m:(cts.Term cts.box nat.nat) =>
     nat.sym_eq_eqb
       (nat.S n)
       (y:(cts.Term
             cts.box
             (cts.prod'
                cts.box
                cts.box
                cts.box
                nat.nat
                (x0:(cts.Term cts.box nat.nat) => bool.bool))) =>
        cts.prod
          cts.star
          cts.star
          cts.star
          cts.I
          (cts.prod
             cts.box
             cts.star
             cts.star
             cts.I
             (cts.prod
                cts.box
                cts.box
                cts.box
                cts.I
                bool.bool
                (x:(cts.Term cts.box bool.bool) => cts.univ cts.star cts.box cts.I))
             (x:(cts.Term
                   cts.box
                   (cts.prod
                      cts.box
                      cts.box
                      cts.box
                      cts.I
                      bool.bool
                      (x:(cts.Term cts.box bool.bool) => cts.univ cts.star cts.box cts.I))) =>
              cts.prod
                cts.star
                cts.star
                cts.star
                cts.I
                (cts.prod
                   cts.star
                   cts.star
                   cts.star
                   cts.I
                   (logic.eq nat.nat n m)
                   (x0:(cts.Term cts.star (logic.eq nat.nat n m)) => x bool.true))
                (x0:(cts.Term
                       cts.star
                       (cts.prod
                          cts.star
                          cts.star
                          cts.star
                          cts.I
                          (logic.eq nat.nat n m)
                          (x0:(cts.Term cts.star (logic.eq nat.nat n m)) => x bool.true))) =>
                 cts.prod
                   cts.star
                   cts.star
                   cts.star
                   cts.I
                   (cts.prod
                      cts.star
                      cts.star
                      cts.star
                      cts.I
                      (connectives.Not (logic.eq nat.nat n m))
                      (x1:(cts.Term cts.star (connectives.Not (logic.eq nat.nat n m))) =>
                       x bool.false))
                   (x1:(cts.Term
                          cts.star
                          (cts.prod
                             cts.star
                             cts.star
                             cts.star
                             cts.I
                             (connectives.Not (logic.eq nat.nat n m))
                             (x1:(cts.Term
                                    cts.star
                                    (connectives.Not (logic.eq nat.nat n m))) =>
                              x bool.false))) =>
                    x (nat.eqb n m)))))
          (x:(cts.Term
                cts.star
                (cts.prod
                   cts.box
                   cts.star
                   cts.star
                   cts.I
                   (cts.prod
                      cts.box
                      cts.box
                      cts.box
                      cts.I
                      bool.bool
                      (x:(cts.Term cts.box bool.bool) => cts.univ cts.star cts.box cts.I))
                   (x:(cts.Term
                         cts.box
                         (cts.prod
                            cts.box
                            cts.box
                            cts.box
                            cts.I
                            bool.bool
                            (x:(cts.Term cts.box bool.bool) =>
                             cts.univ cts.star cts.box cts.I))) =>
                    cts.prod
                      cts.star
                      cts.star
                      cts.star
                      cts.I
                      (cts.prod
                         cts.star
                         cts.star
                         cts.star
                         cts.I
                         (logic.eq nat.nat n m)
                         (x0:(cts.Term cts.star (logic.eq nat.nat n m)) => x bool.true))
                      (x0:(cts.Term
                             cts.star
                             (cts.prod
                                cts.star
                                cts.star
                                cts.star
                                cts.I
                                (logic.eq nat.nat n m)
                                (x0:(cts.Term cts.star (logic.eq nat.nat n m)) =>
                                 x bool.true))) =>
                       cts.prod
                         cts.star
                         cts.star
                         cts.star
                         cts.I
                         (cts.prod
                            cts.star
                            cts.star
                            cts.star
                            cts.I
                            (connectives.Not (logic.eq nat.nat n m))
                            (x1:(cts.Term
                                   cts.star
                                   (connectives.Not (logic.eq nat.nat n m))) =>
                             x bool.false))
                         (x1:(cts.Term
                                cts.star
                                (cts.prod
                                   cts.star
                                   cts.star
                                   cts.star
                                   cts.I
                                   (connectives.Not (logic.eq nat.nat n m))
                                   (x1:(cts.Term
                                          cts.star
                                          (connectives.Not (logic.eq nat.nat n m))) =>
                                    x bool.false))) =>
                          x (nat.eqb n m)))))) =>
           cts.prod
             cts.box
             cts.star
             cts.star
             cts.I
             (cts.prod
                cts.box
                cts.box
                cts.box
                cts.I
                bool.bool
                (x0:(cts.Term cts.box bool.bool) => cts.univ cts.star cts.box cts.I))
             (x0:(cts.Term
                    cts.box
                    (cts.prod
                       cts.box
                       cts.box
                       cts.box
                       cts.I
                       bool.bool
                       (x0:(cts.Term cts.box bool.bool) => cts.univ cts.star cts.box cts.I))) =>
              cts.prod
                cts.star
                cts.star
                cts.star
                cts.I
                (cts.prod
                   cts.star
                   cts.star
                   cts.star
                   cts.I
                   (logic.eq nat.nat (nat.S n) (nat.S m))
                   (x1:(cts.Term cts.star (logic.eq nat.nat (nat.S n) (nat.S m))) =>
                    x0 bool.true))
                (x1:(cts.Term
                       cts.star
                       (cts.prod
                          cts.star
                          cts.star
                          cts.star
                          cts.I
                          (logic.eq nat.nat (nat.S n) (nat.S m))
                          (x1:(cts.Term cts.star (logic.eq nat.nat (nat.S n) (nat.S m))) =>
                           x0 bool.true))) =>
                 cts.prod
                   cts.star
                   cts.star
                   cts.star
                   cts.I
                   (cts.prod
                      cts.star
                      cts.star
                      cts.star
                      cts.I
                      (connectives.Not (logic.eq nat.nat (nat.S n) (nat.S m)))
                      (x2:(cts.Term
                             cts.star
                             (connectives.Not (logic.eq nat.nat (nat.S n) (nat.S m)))) =>
                       x0 bool.false))
                   (x2:(cts.Term
                          cts.star
                          (cts.prod
                             cts.star
                             cts.star
                             cts.star
                             cts.I
                             (connectives.Not (logic.eq nat.nat (nat.S n) (nat.S m)))
                             (x2:(cts.Term
                                    cts.star
                                    (connectives.Not
                                       (logic.eq nat.nat (nat.S n) (nat.S m)))) =>
                              x0 bool.false))) =>
                    x0 (y (nat.S m)))))))
       (nat.sym_eq_filter_nat_type_S
          (cts.prod
             cts.box
             cts.box
             cts.box
             cts.I
             nat.nat
             (x:(cts.Term cts.box nat.nat) => bool.bool))
          nat.eqb_body
          n
          (y:(cts.Term
                cts.box
                (cts.prod'
                   cts.box
                   cts.box
                   cts.box
                   nat.nat
                   (x:(cts.Term cts.box nat.nat) => bool.bool))) =>
           cts.prod
             cts.star
             cts.star
             cts.star
             cts.I
             (cts.prod
                cts.box
                cts.star
                cts.star
                cts.I
                (cts.prod
                   cts.box
                   cts.box
                   cts.box
                   cts.I
                   bool.bool
                   (x:(cts.Term cts.box bool.bool) => cts.univ cts.star cts.box cts.I))
                (x:(cts.Term
                      cts.box
                      (cts.prod
                         cts.box
                         cts.box
                         cts.box
                         cts.I
                         bool.bool
                         (x:(cts.Term cts.box bool.bool) => cts.univ cts.star cts.box cts.I))) =>
                 cts.prod
                   cts.star
                   cts.star
                   cts.star
                   cts.I
                   (cts.prod
                      cts.star
                      cts.star
                      cts.star
                      cts.I
                      (logic.eq nat.nat n m)
                      (x0:(cts.Term cts.star (logic.eq nat.nat n m)) => x bool.true))
                   (x0:(cts.Term
                          cts.star
                          (cts.prod
                             cts.star
                             cts.star
                             cts.star
                             cts.I
                             (logic.eq nat.nat n m)
                             (x0:(cts.Term cts.star (logic.eq nat.nat n m)) => x bool.true))) =>
                    cts.prod
                      cts.star
                      cts.star
                      cts.star
                      cts.I
                      (cts.prod
                         cts.star
                         cts.star
                         cts.star
                         cts.I
                         (connectives.Not (logic.eq nat.nat n m))
                         (x1:(cts.Term cts.star (connectives.Not (logic.eq nat.nat n m))) =>
                          x bool.false))
                      (x1:(cts.Term
                             cts.star
                             (cts.prod
                                cts.star
                                cts.star
                                cts.star
                                cts.I
                                (connectives.Not (logic.eq nat.nat n m))
                                (x1:(cts.Term
                                       cts.star
                                       (connectives.Not (logic.eq nat.nat n m))) =>
                                 x bool.false))) =>
                       x (nat.eqb n m)))))
             (x:(cts.Term
                   cts.star
                   (cts.prod
                      cts.box
                      cts.star
                      cts.star
                      cts.I
                      (cts.prod
                         cts.box
                         cts.box
                         cts.box
                         cts.I
                         bool.bool
                         (x:(cts.Term cts.box bool.bool) => cts.univ cts.star cts.box cts.I))
                      (x:(cts.Term
                            cts.box
                            (cts.prod
                               cts.box
                               cts.box
                               cts.box
                               cts.I
                               bool.bool
                               (x:(cts.Term cts.box bool.bool) =>
                                cts.univ cts.star cts.box cts.I))) =>
                       cts.prod
                         cts.star
                         cts.star
                         cts.star
                         cts.I
                         (cts.prod
                            cts.star
                            cts.star
                            cts.star
                            cts.I
                            (logic.eq nat.nat n m)
                            (x0:(cts.Term cts.star (logic.eq nat.nat n m)) => x bool.true))
                         (x0:(cts.Term
                                cts.star
                                (cts.prod
                                   cts.star
                                   cts.star
                                   cts.star
                                   cts.I
                                   (logic.eq nat.nat n m)
                                   (x0:(cts.Term cts.star (logic.eq nat.nat n m)) =>
                                    x bool.true))) =>
                          cts.prod
                            cts.star
                            cts.star
                            cts.star
                            cts.I
                            (cts.prod
                               cts.star
                               cts.star
                               cts.star
                               cts.I
                               (connectives.Not (logic.eq nat.nat n m))
                               (x1:(cts.Term
                                      cts.star
                                      (connectives.Not (logic.eq nat.nat n m))) =>
                                x bool.false))
                            (x1:(cts.Term
                                   cts.star
                                   (cts.prod
                                      cts.star
                                      cts.star
                                      cts.star
                                      cts.I
                                      (connectives.Not (logic.eq nat.nat n m))
                                      (x1:(cts.Term
                                             cts.star
                                             (connectives.Not
                                                (logic.eq nat.nat n m))) =>
                                       x bool.false))) =>
                             x (nat.eqb n m)))))) =>
              cts.prod
                cts.box
                cts.star
                cts.star
                cts.I
                (cts.prod
                   cts.box
                   cts.box
                   cts.box
                   cts.I
                   bool.bool
                   (x0:(cts.Term cts.box bool.bool) => cts.univ cts.star cts.box cts.I))
                (x0:(cts.Term
                       cts.box
                       (cts.prod
                          cts.box
                          cts.box
                          cts.box
                          cts.I
                          bool.bool
                          (x0:(cts.Term cts.box bool.bool) =>
                           cts.univ cts.star cts.box cts.I))) =>
                 cts.prod
                   cts.star
                   cts.star
                   cts.star
                   cts.I
                   (cts.prod
                      cts.star
                      cts.star
                      cts.star
                      cts.I
                      (logic.eq nat.nat (nat.S n) (nat.S m))
                      (x1:(cts.Term cts.star (logic.eq nat.nat (nat.S n) (nat.S m))) =>
                       x0 bool.true))
                   (x1:(cts.Term
                          cts.star
                          (cts.prod
                             cts.star
                             cts.star
                             cts.star
                             cts.I
                             (logic.eq nat.nat (nat.S n) (nat.S m))
                             (x1:(cts.Term
                                    cts.star
                                    (logic.eq nat.nat (nat.S n) (nat.S m))) =>
                              x0 bool.true))) =>
                    cts.prod
                      cts.star
                      cts.star
                      cts.star
                      cts.I
                      (cts.prod
                         cts.star
                         cts.star
                         cts.star
                         cts.I
                         (connectives.Not (logic.eq nat.nat (nat.S n) (nat.S m)))
                         (x2:(cts.Term
                                cts.star
                                (connectives.Not (logic.eq nat.nat (nat.S n) (nat.S m)))) =>
                          x0 bool.false))
                      (x2:(cts.Term
                             cts.star
                             (cts.prod
                                cts.star
                                cts.star
                                cts.star
                                cts.I
                                (connectives.Not (logic.eq nat.nat (nat.S n) (nat.S m)))
                                (x2:(cts.Term
                                       cts.star
                                       (connectives.Not
                                          (logic.eq nat.nat (nat.S n) (nat.S m)))) =>
                                 x0 bool.false))) =>
                       x0 (y (nat.S m)))))))
          (nat.sym_eq_eqb_body_S
             n
             (y:(cts.Term
                   cts.box
                   (cts.prod'
                      cts.box
                      cts.box
                      cts.box
                      nat.nat
                      (x0:(cts.Term cts.box nat.nat) => bool.bool))) =>
              cts.prod
                cts.star
                cts.star
                cts.star
                cts.I
                (cts.prod
                   cts.box
                   cts.star
                   cts.star
                   cts.I
                   (cts.prod
                      cts.box
                      cts.box
                      cts.box
                      cts.I
                      bool.bool
                      (x:(cts.Term cts.box bool.bool) => cts.univ cts.star cts.box cts.I))
                   (x:(cts.Term
                         cts.box
                         (cts.prod
                            cts.box
                            cts.box
                            cts.box
                            cts.I
                            bool.bool
                            (x:(cts.Term cts.box bool.bool) =>
                             cts.univ cts.star cts.box cts.I))) =>
                    cts.prod
                      cts.star
                      cts.star
                      cts.star
                      cts.I
                      (cts.prod
                         cts.star
                         cts.star
                         cts.star
                         cts.I
                         (logic.eq nat.nat n m)
                         (x0:(cts.Term cts.star (logic.eq nat.nat n m)) => x bool.true))
                      (x0:(cts.Term
                             cts.star
                             (cts.prod
                                cts.star
                                cts.star
                                cts.star
                                cts.I
                                (logic.eq nat.nat n m)
                                (x0:(cts.Term cts.star (logic.eq nat.nat n m)) =>
                                 x bool.true))) =>
                       cts.prod
                         cts.star
                         cts.star
                         cts.star
                         cts.I
                         (cts.prod
                            cts.star
                            cts.star
                            cts.star
                            cts.I
                            (connectives.Not (logic.eq nat.nat n m))
                            (x1:(cts.Term
                                   cts.star
                                   (connectives.Not (logic.eq nat.nat n m))) =>
                             x bool.false))
                         (x1:(cts.Term
                                cts.star
                                (cts.prod
                                   cts.star
                                   cts.star
                                   cts.star
                                   cts.I
                                   (connectives.Not (logic.eq nat.nat n m))
                                   (x1:(cts.Term
                                          cts.star
                                          (connectives.Not (logic.eq nat.nat n m))) =>
                                    x bool.false))) =>
                          x (nat.eqb n m)))))
                (x:(cts.Term
                      cts.star
                      (cts.prod
                         cts.box
                         cts.star
                         cts.star
                         cts.I
                         (cts.prod
                            cts.box
                            cts.box
                            cts.box
                            cts.I
                            bool.bool
                            (x:(cts.Term cts.box bool.bool) =>
                             cts.univ cts.star cts.box cts.I))
                         (x:(cts.Term
                               cts.box
                               (cts.prod
                                  cts.box
                                  cts.box
                                  cts.box
                                  cts.I
                                  bool.bool
                                  (x:(cts.Term cts.box bool.bool) =>
                                   cts.univ cts.star cts.box cts.I))) =>
                          cts.prod
                            cts.star
                            cts.star
                            cts.star
                            cts.I
                            (cts.prod
                               cts.star
                               cts.star
                               cts.star
                               cts.I
                               (logic.eq nat.nat n m)
                               (x0:(cts.Term cts.star (logic.eq nat.nat n m)) =>
                                x bool.true))
                            (x0:(cts.Term
                                   cts.star
                                   (cts.prod
                                      cts.star
                                      cts.star
                                      cts.star
                                      cts.I
                                      (logic.eq nat.nat n m)
                                      (x0:(cts.Term cts.star (logic.eq nat.nat n m)) =>
                                       x bool.true))) =>
                             cts.prod
                               cts.star
                               cts.star
                               cts.star
                               cts.I
                               (cts.prod
                                  cts.star
                                  cts.star
                                  cts.star
                                  cts.I
                                  (connectives.Not (logic.eq nat.nat n m))
                                  (x1:(cts.Term
                                         cts.star
                                         (connectives.Not (logic.eq nat.nat n m))) =>
                                   x bool.false))
                               (x1:(cts.Term
                                      cts.star
                                      (cts.prod
                                         cts.star
                                         cts.star
                                         cts.star
                                         cts.I
                                         (connectives.Not (logic.eq nat.nat n m))
                                         (x1:(cts.Term
                                                cts.star
                                                (connectives.Not
                                                   (logic.eq nat.nat n m))) =>
                                          x bool.false))) =>
                                x (nat.eqb n m)))))) =>
                 cts.prod
                   cts.box
                   cts.star
                   cts.star
                   cts.I
                   (cts.prod
                      cts.box
                      cts.box
                      cts.box
                      cts.I
                      bool.bool
                      (x0:(cts.Term cts.box bool.bool) => cts.univ cts.star cts.box cts.I))
                   (x0:(cts.Term
                          cts.box
                          (cts.prod
                             cts.box
                             cts.box
                             cts.box
                             cts.I
                             bool.bool
                             (x0:(cts.Term cts.box bool.bool) =>
                              cts.univ cts.star cts.box cts.I))) =>
                    cts.prod
                      cts.star
                      cts.star
                      cts.star
                      cts.I
                      (cts.prod
                         cts.star
                         cts.star
                         cts.star
                         cts.I
                         (logic.eq nat.nat (nat.S n) (nat.S m))
                         (x1:(cts.Term cts.star (logic.eq nat.nat (nat.S n) (nat.S m))) =>
                          x0 bool.true))
                      (x1:(cts.Term
                             cts.star
                             (cts.prod
                                cts.star
                                cts.star
                                cts.star
                                cts.I
                                (logic.eq nat.nat (nat.S n) (nat.S m))
                                (x1:(cts.Term
                                       cts.star
                                       (logic.eq nat.nat (nat.S n) (nat.S m))) =>
                                 x0 bool.true))) =>
                       cts.prod
                         cts.star
                         cts.star
                         cts.star
                         cts.I
                         (cts.prod
                            cts.star
                            cts.star
                            cts.star
                            cts.I
                            (connectives.Not (logic.eq nat.nat (nat.S n) (nat.S m)))
                            (x2:(cts.Term
                                   cts.star
                                   (connectives.Not
                                      (logic.eq nat.nat (nat.S n) (nat.S m)))) =>
                             x0 bool.false))
                         (x2:(cts.Term
                                cts.star
                                (cts.prod
                                   cts.star
                                   cts.star
                                   cts.star
                                   cts.I
                                   (connectives.Not
                                      (logic.eq nat.nat (nat.S n) (nat.S m)))
                                   (x2:(cts.Term
                                          cts.star
                                          (connectives.Not
                                             (logic.eq nat.nat (nat.S n) (nat.S m)))) =>
                                    x0 bool.false))) =>
                          x0 (y (nat.S m)))))))
             (nat.sym_eq_match_nat_type_S
                bool.bool
                bool.false
                (q:(cts.Term cts.box nat.nat) => nat.eqb n q)
                m
                (y:(cts.Term cts.box bool.bool) =>
                 cts.prod
                   cts.star
                   cts.star
                   cts.star
                   cts.I
                   (cts.prod
                      cts.box
                      cts.star
                      cts.star
                      cts.I
                      (cts.prod
                         cts.box
                         cts.box
                         cts.box
                         cts.I
                         bool.bool
                         (x:(cts.Term cts.box bool.bool) => cts.univ cts.star cts.box cts.I))
                      (x:(cts.Term
                            cts.box
                            (cts.prod
                               cts.box
                               cts.box
                               cts.box
                               cts.I
                               bool.bool
                               (x:(cts.Term cts.box bool.bool) =>
                                cts.univ cts.star cts.box cts.I))) =>
                       cts.prod
                         cts.star
                         cts.star
                         cts.star
                         cts.I
                         (cts.prod
                            cts.star
                            cts.star
                            cts.star
                            cts.I
                            (logic.eq nat.nat n m)
                            (x0:(cts.Term cts.star (logic.eq nat.nat n m)) => x bool.true))
                         (x0:(cts.Term
                                cts.star
                                (cts.prod
                                   cts.star
                                   cts.star
                                   cts.star
                                   cts.I
                                   (logic.eq nat.nat n m)
                                   (x0:(cts.Term cts.star (logic.eq nat.nat n m)) =>
                                    x bool.true))) =>
                          cts.prod
                            cts.star
                            cts.star
                            cts.star
                            cts.I
                            (cts.prod
                               cts.star
                               cts.star
                               cts.star
                               cts.I
                               (connectives.Not (logic.eq nat.nat n m))
                               (x1:(cts.Term
                                      cts.star
                                      (connectives.Not (logic.eq nat.nat n m))) =>
                                x bool.false))
                            (x1:(cts.Term
                                   cts.star
                                   (cts.prod
                                      cts.star
                                      cts.star
                                      cts.star
                                      cts.I
                                      (connectives.Not (logic.eq nat.nat n m))
                                      (x1:(cts.Term
                                             cts.star
                                             (connectives.Not (logic.eq nat.nat n m))) =>
                                       x bool.false))) =>
                             x (nat.eqb n m)))))
                   (x:(cts.Term
                         cts.star
                         (cts.prod
                            cts.box
                            cts.star
                            cts.star
                            cts.I
                            (cts.prod
                               cts.box
                               cts.box
                               cts.box
                               cts.I
                               bool.bool
                               (x:(cts.Term cts.box bool.bool) =>
                                cts.univ cts.star cts.box cts.I))
                            (x:(cts.Term
                                  cts.box
                                  (cts.prod
                                     cts.box
                                     cts.box
                                     cts.box
                                     cts.I
                                     bool.bool
                                     (x:(cts.Term cts.box bool.bool) =>
                                      cts.univ cts.star cts.box cts.I))) =>
                             cts.prod
                               cts.star
                               cts.star
                               cts.star
                               cts.I
                               (cts.prod
                                  cts.star
                                  cts.star
                                  cts.star
                                  cts.I
                                  (logic.eq nat.nat n m)
                                  (x0:(cts.Term cts.star (logic.eq nat.nat n m)) =>
                                   x bool.true))
                               (x0:(cts.Term
                                      cts.star
                                      (cts.prod
                                         cts.star
                                         cts.star
                                         cts.star
                                         cts.I
                                         (logic.eq nat.nat n m)
                                         (x0:(cts.Term
                                                cts.star
                                                (logic.eq nat.nat n m)) =>
                                          x bool.true))) =>
                                cts.prod
                                  cts.star
                                  cts.star
                                  cts.star
                                  cts.I
                                  (cts.prod
                                     cts.star
                                     cts.star
                                     cts.star
                                     cts.I
                                     (connectives.Not (logic.eq nat.nat n m))
                                     (x1:(cts.Term
                                            cts.star
                                            (connectives.Not (logic.eq nat.nat n m))) =>
                                      x bool.false))
                                  (x1:(cts.Term
                                         cts.star
                                         (cts.prod
                                            cts.star
                                            cts.star
                                            cts.star
                                            cts.I
                                            (connectives.Not (logic.eq nat.nat n m))
                                            (x1:(cts.Term
                                                   cts.star
                                                   (connectives.Not
                                                      (logic.eq nat.nat n m))) =>
                                             x bool.false))) =>
                                   x (nat.eqb n m)))))) =>
                    cts.prod
                      cts.box
                      cts.star
                      cts.star
                      cts.I
                      (cts.prod
                         cts.box
                         cts.box
                         cts.box
                         cts.I
                         bool.bool
                         (x0:(cts.Term cts.box bool.bool) => cts.univ cts.star cts.box cts.I))
                      (x0:(cts.Term
                             cts.box
                             (cts.prod
                                cts.box
                                cts.box
                                cts.box
                                cts.I
                                bool.bool
                                (x0:(cts.Term cts.box bool.bool) =>
                                 cts.univ cts.star cts.box cts.I))) =>
                       cts.prod
                         cts.star
                         cts.star
                         cts.star
                         cts.I
                         (cts.prod
                            cts.star
                            cts.star
                            cts.star
                            cts.I
                            (logic.eq nat.nat (nat.S n) (nat.S m))
                            (x1:(cts.Term cts.star (logic.eq nat.nat (nat.S n) (nat.S m))) =>
                             x0 bool.true))
                         (x1:(cts.Term
                                cts.star
                                (cts.prod
                                   cts.star
                                   cts.star
                                   cts.star
                                   cts.I
                                   (logic.eq nat.nat (nat.S n) (nat.S m))
                                   (x1:(cts.Term
                                          cts.star
                                          (logic.eq nat.nat (nat.S n) (nat.S m))) =>
                                    x0 bool.true))) =>
                          cts.prod
                            cts.star
                            cts.star
                            cts.star
                            cts.I
                            (cts.prod
                               cts.star
                               cts.star
                               cts.star
                               cts.I
                               (connectives.Not (logic.eq nat.nat (nat.S n) (nat.S m)))
                               (x2:(cts.Term
                                      cts.star
                                      (connectives.Not
                                         (logic.eq nat.nat (nat.S n) (nat.S m)))) =>
                                x0 bool.false))
                            (x2:(cts.Term
                                   cts.star
                                   (cts.prod
                                      cts.star
                                      cts.star
                                      cts.star
                                      cts.I
                                      (connectives.Not
                                         (logic.eq nat.nat (nat.S n) (nat.S m)))
                                      (x2:(cts.Term
                                             cts.star
                                             (connectives.Not
                                                (logic.eq
                                                   nat.nat
                                                   (nat.S n)
                                                   (nat.S m)))) =>
                                       x0 bool.false))) =>
                             x0 y)))))
                (auto:(cts.Term
                         cts.star
                         (cts.prod'
                            cts.box
                            cts.star
                            cts.star
                            (cts.prod'
                               cts.box
                               cts.box
                               cts.box
                               bool.bool
                               (x:(cts.Term cts.box bool.bool) =>
                                cts.univ cts.star cts.box cts.I))
                            (x:(cts.Term
                                  cts.box
                                  (cts.prod
                                     cts.box
                                     cts.box
                                     cts.box
                                     cts.I
                                     bool.bool
                                     (x:(cts.Term cts.box bool.bool) =>
                                      cts.univ cts.star cts.box cts.I))) =>
                             cts.prod
                               cts.star
                               cts.star
                               cts.star
                               cts.I
                               (cts.prod
                                  cts.star
                                  cts.star
                                  cts.star
                                  cts.I
                                  (logic.eq nat.nat n m)
                                  (x0:(cts.Term cts.star (logic.eq nat.nat n m)) =>
                                   x bool.true))
                               (x0:(cts.Term
                                      cts.star
                                      (cts.prod
                                         cts.star
                                         cts.star
                                         cts.star
                                         cts.I
                                         (logic.eq nat.nat n m)
                                         (x0:(cts.Term
                                                cts.star
                                                (logic.eq nat.nat n m)) =>
                                          x bool.true))) =>
                                cts.prod
                                  cts.star
                                  cts.star
                                  cts.star
                                  cts.I
                                  (cts.prod
                                     cts.star
                                     cts.star
                                     cts.star
                                     cts.I
                                     (connectives.Not (logic.eq nat.nat n m))
                                     (x1:(cts.Term
                                            cts.star
                                            (connectives.Not (logic.eq nat.nat n m))) =>
                                      x bool.false))
                                  (x1:(cts.Term
                                         cts.star
                                         (cts.prod
                                            cts.star
                                            cts.star
                                            cts.star
                                            cts.I
                                            (connectives.Not (logic.eq nat.nat n m))
                                            (x1:(cts.Term
                                                   cts.star
                                                   (connectives.Not
                                                      (logic.eq nat.nat n m))) =>
                                             x bool.false))) =>
                                   x (nat.eqb n m)))))) =>
                 P:(cts.Term
                      cts.box
                      (cts.prod'
                         cts.box
                         cts.box
                         cts.box
                         bool.bool
                         (x0:(cts.Term cts.box bool.bool) => cts.univ cts.star cts.box cts.I))) =>
                 auto':(cts.Term
                          cts.star
                          (cts.prod'
                             cts.star
                             cts.star
                             cts.star
                             (logic.eq nat.nat (nat.S n) (nat.S m))
                             (x1:(cts.Term
                                    cts.star
                                    (logic.eq nat.nat (nat.S n) (nat.S m))) =>
                              P bool.true))) =>
                 auto'':(cts.Term
                           cts.star
                           (cts.prod'
                              cts.star
                              cts.star
                              cts.star
                              (connectives.Not (logic.eq nat.nat (nat.S n) (nat.S m)))
                              (x2:(cts.Term
                                     cts.star
                                     (connectives.Not
                                        (logic.eq nat.nat (nat.S n) (nat.S m)))) =>
                               P bool.false))) =>
                 auto
                   P
                   (auto''':(cts.Term cts.star (logic.eq nat.nat n m)) =>
                    auto'
                      (logic.rewrite_l
                         nat.nat
                         n
                         (__:(cts.Term cts.box nat.nat) =>
                          logic.eq nat.nat (nat.S n) (nat.S __))
                         (logic.refl nat.nat (nat.S n))
                         m
                         auto'''))
                   (auto''':(cts.Term cts.star (connectives.Not (logic.eq nat.nat n m))) =>
                    auto'' (nat.not_eq_S n m auto'''))))))).

def eqb_n_n :
  cts.Term
    cts.star
    (cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       nat.nat
       (x:(cts.Term cts.box nat.nat) => logic.eq bool.bool (nat.eqb x x) bool.true))
  :=
  n:(cts.Term cts.box nat.nat) =>
  nat.nat_ind
    (_x_365:(cts.Term cts.box nat.nat) => logic.eq bool.bool (nat.eqb _x_365 _x_365) bool.true)
    (nat.sym_eq_eqb
       nat.O
       (y:(cts.Term
             cts.box
             (cts.prod'
                cts.box
                cts.box
                cts.box
                nat.nat
                (x0:(cts.Term cts.box nat.nat) => bool.bool))) =>
        logic.eq bool.bool (y nat.O) bool.true)
       (nat.sym_eq_filter_nat_type_O
          (cts.prod
             cts.box
             cts.box
             cts.box
             cts.I
             nat.nat
             (x:(cts.Term cts.box nat.nat) => bool.bool))
          nat.eqb_body
          (y:(cts.Term
                cts.box
                (cts.prod'
                   cts.box
                   cts.box
                   cts.box
                   nat.nat
                   (x:(cts.Term cts.box nat.nat) => bool.bool))) =>
           logic.eq bool.bool (y nat.O) bool.true)
          (nat.sym_eq_eqb_body_O
             (y:(cts.Term
                   cts.box
                   (cts.prod'
                      cts.box
                      cts.box
                      cts.box
                      nat.nat
                      (x:(cts.Term cts.box nat.nat) => bool.bool))) =>
              logic.eq bool.bool (y nat.O) bool.true)
             (nat.sym_eq_match_nat_type_O
                bool.bool
                bool.true
                (q:(cts.Term cts.box nat.nat) => bool.false)
                (y:(cts.Term cts.box bool.bool) => logic.eq bool.bool y bool.true)
                (logic.refl bool.bool bool.true)))))
    (x_366:(cts.Term cts.box nat.nat) =>
     nat.sym_eq_eqb
       (nat.S x_366)
       (y:(cts.Term
             cts.box
             (cts.prod'
                cts.box
                cts.box
                cts.box
                nat.nat
                (x0:(cts.Term cts.box nat.nat) => bool.bool))) =>
        cts.prod
          cts.star
          cts.star
          cts.star
          cts.I
          (logic.eq bool.bool (nat.eqb x_366 x_366) bool.true)
          (x:(cts.Term cts.star (logic.eq bool.bool (nat.eqb x_366 x_366) bool.true)) =>
           logic.eq bool.bool (y (nat.S x_366)) bool.true))
       (nat.sym_eq_filter_nat_type_S
          (cts.prod
             cts.box
             cts.box
             cts.box
             cts.I
             nat.nat
             (x:(cts.Term cts.box nat.nat) => bool.bool))
          nat.eqb_body
          x_366
          (y:(cts.Term
                cts.box
                (cts.prod'
                   cts.box
                   cts.box
                   cts.box
                   nat.nat
                   (x:(cts.Term cts.box nat.nat) => bool.bool))) =>
           cts.prod
             cts.star
             cts.star
             cts.star
             cts.I
             (logic.eq bool.bool (nat.eqb x_366 x_366) bool.true)
             (x:(cts.Term cts.star (logic.eq bool.bool (nat.eqb x_366 x_366) bool.true)) =>
              logic.eq bool.bool (y (nat.S x_366)) bool.true))
          (nat.sym_eq_eqb_body_S
             x_366
             (y:(cts.Term
                   cts.box
                   (cts.prod'
                      cts.box
                      cts.box
                      cts.box
                      nat.nat
                      (x0:(cts.Term cts.box nat.nat) => bool.bool))) =>
              cts.prod
                cts.star
                cts.star
                cts.star
                cts.I
                (logic.eq bool.bool (nat.eqb x_366 x_366) bool.true)
                (x:(cts.Term cts.star (logic.eq bool.bool (nat.eqb x_366 x_366) bool.true)) =>
                 logic.eq bool.bool (y (nat.S x_366)) bool.true))
             (nat.sym_eq_match_nat_type_S
                bool.bool
                bool.false
                (q:(cts.Term cts.box nat.nat) => nat.eqb x_366 q)
                x_366
                (y:(cts.Term cts.box bool.bool) =>
                 cts.prod
                   cts.star
                   cts.star
                   cts.star
                   cts.I
                   (logic.eq bool.bool (nat.eqb x_366 x_366) bool.true)
                   (x:(cts.Term cts.star (logic.eq bool.bool (nat.eqb x_366 x_366) bool.true)) =>
                    logic.eq bool.bool y bool.true))
                (_x_368:(cts.Term
                           cts.star
                           (logic.eq bool.bool (nat.eqb x_366 x_366) bool.true)) =>
                 logic.rewrite_r
                   bool.bool
                   bool.true
                   (__:(cts.Term cts.box bool.bool) => logic.eq bool.bool __ bool.true)
                   (logic.refl bool.bool bool.true)
                   (nat.eqb x_366 x_366)
                   _x_368)))))
    n.

def eqb_true_to_eq :
  cts.Term
    cts.star
    (cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       nat.nat
       (x:(cts.Term cts.box nat.nat) =>
        cts.prod
          cts.box
          cts.star
          cts.star
          cts.I
          nat.nat
          (x0:(cts.Term cts.box nat.nat) =>
           cts.prod
             cts.star
             cts.star
             cts.star
             cts.I
             (logic.eq bool.bool (nat.eqb x x0) bool.true)
             (x1:(cts.Term cts.star (logic.eq bool.bool (nat.eqb x x0) bool.true)) =>
              logic.eq nat.nat x x0))))
  :=
  n:(cts.Term cts.box nat.nat) =>
  m:(cts.Term cts.box nat.nat) =>
  nat.eqb_elim
    n
    m
    (__:(cts.Term cts.box bool.bool) =>
     cts.prod
       cts.star
       cts.star
       cts.star
       cts.I
       (logic.eq bool.bool __ bool.true)
       (x:(cts.Term cts.star (logic.eq bool.bool __ bool.true)) => logic.eq nat.nat n m))
    (auto:(cts.Term cts.star (logic.eq nat.nat n m)) =>
     auto':(cts.Term cts.star (logic.eq bool.bool bool.true bool.true)) =>
     logic.rewrite_l
       nat.nat
       n
       (__:(cts.Term cts.box nat.nat) => logic.eq nat.nat n __)
       (logic.refl nat.nat n)
       m
       auto)
    (__:(cts.Term cts.star (connectives.Not (logic.eq nat.nat n m))) =>
     abs:(cts.Term cts.star (logic.eq bool.bool bool.false bool.true)) =>
     connectives.falsity
       (logic.eq nat.nat n m)
       (logic.absurd
          (logic.eq bool.bool bool.true bool.false)
          (logic.rewrite_r
             bool.bool
             bool.true
             (__1:(cts.Term cts.box bool.bool) => logic.eq bool.bool bool.true __1)
             (logic.refl bool.bool bool.true)
             bool.false
             abs)
          bool.not_eq_true_false)).

def eqb_false_to_not_eq :
  cts.Term
    cts.star
    (cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       nat.nat
       (x:(cts.Term cts.box nat.nat) =>
        cts.prod
          cts.box
          cts.star
          cts.star
          cts.I
          nat.nat
          (x0:(cts.Term cts.box nat.nat) =>
           cts.prod
             cts.star
             cts.star
             cts.star
             cts.I
             (logic.eq bool.bool (nat.eqb x x0) bool.false)
             (x1:(cts.Term cts.star (logic.eq bool.bool (nat.eqb x x0) bool.false)) =>
              connectives.Not (logic.eq nat.nat x x0)))))
  :=
  n:(cts.Term cts.box nat.nat) =>
  m:(cts.Term cts.box nat.nat) =>
  nat.eqb_elim
    n
    m
    (__:(cts.Term cts.box bool.bool) =>
     cts.prod
       cts.star
       cts.star
       cts.star
       cts.I
       (logic.eq bool.bool __ bool.false)
       (x:(cts.Term cts.star (logic.eq bool.bool __ bool.false)) =>
        connectives.Not (logic.eq nat.nat n m)))
    (auto:(cts.Term cts.star (logic.eq nat.nat n m)) =>
     auto':(cts.Term cts.star (logic.eq bool.bool bool.true bool.false)) =>
     logic.not_to_not
       (logic.eq nat.nat n m)
       (logic.eq bool.bool bool.true bool.false)
       (auto'':(cts.Term cts.star (logic.eq nat.nat n m)) =>
        logic.rewrite_l
          bool.bool
          bool.true
          (__:(cts.Term cts.box bool.bool) => logic.eq bool.bool bool.true __)
          (logic.refl bool.bool bool.true)
          bool.false
          auto')
       bool.not_eq_true_false)
    (auto:(cts.Term cts.star (connectives.Not (logic.eq nat.nat n m))) =>
     auto':(cts.Term cts.star (logic.eq bool.bool bool.false bool.false)) => auto).

def eq_to_eqb_true :
  cts.Term
    cts.star
    (cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       nat.nat
       (x:(cts.Term cts.box nat.nat) =>
        cts.prod
          cts.box
          cts.star
          cts.star
          cts.I
          nat.nat
          (x0:(cts.Term cts.box nat.nat) =>
           cts.prod
             cts.star
             cts.star
             cts.star
             cts.I
             (logic.eq nat.nat x x0)
             (x1:(cts.Term cts.star (logic.eq nat.nat x x0)) =>
              logic.eq bool.bool (nat.eqb x x0) bool.true))))
  :=
  n:(cts.Term cts.box nat.nat) =>
  m:(cts.Term cts.box nat.nat) =>
  auto:(cts.Term cts.star (logic.eq nat.nat n m)) =>
  logic.rewrite_l
    nat.nat
    n
    (__:(cts.Term cts.box nat.nat) => logic.eq bool.bool (nat.eqb n __) bool.true)
    (logic.rewrite_r
       bool.bool
       bool.true
       (__:(cts.Term cts.box bool.bool) => logic.eq bool.bool __ bool.true)
       (logic.refl bool.bool bool.true)
       (nat.eqb n n)
       (nat.eqb_n_n n))
    m
    auto.

def not_eq_to_eqb_false :
  cts.Term
    cts.star
    (cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       nat.nat
       (x:(cts.Term cts.box nat.nat) =>
        cts.prod
          cts.box
          cts.star
          cts.star
          cts.I
          nat.nat
          (x0:(cts.Term cts.box nat.nat) =>
           cts.prod
             cts.star
             cts.star
             cts.star
             cts.I
             (connectives.Not (logic.eq nat.nat x x0))
             (x1:(cts.Term cts.star (connectives.Not (logic.eq nat.nat x x0))) =>
              logic.eq bool.bool (nat.eqb x x0) bool.false))))
  :=
  n:(cts.Term cts.box nat.nat) =>
  m:(cts.Term cts.box nat.nat) =>
  noteq:(cts.Term cts.star (connectives.Not (logic.eq nat.nat n m))) =>
  nat.eqb_elim
    n
    m
    (__:(cts.Term cts.box bool.bool) => logic.eq bool.bool __ bool.false)
    (Heq:(cts.Term cts.star (logic.eq nat.nat n m)) =>
     connectives.falsity
       (logic.eq bool.bool bool.true bool.false)
       (logic.absurd
          (logic.eq nat.nat n m)
          (logic.rewrite_l
             nat.nat
             n
             (__:(cts.Term cts.box nat.nat) => logic.eq nat.nat n __)
             (logic.refl nat.nat n)
             m
             Heq)
          noteq))
    (auto:(cts.Term cts.star (connectives.Not (logic.eq nat.nat n m))) =>
     logic.refl bool.bool bool.false).

leb :
  cts.Term
    cts.diamond
    (cts.cast
       cts.triangle
       cts.sinf
       (cts.univ cts.box cts.triangle cts.I)
       (cts.univ cts.diamond cts.sinf cts.I)
       cts.I
       (cts.prod
          cts.box
          cts.box
          cts.box
          cts.I
          nat.nat
          (x:(cts.Term cts.box nat.nat) =>
           cts.prod
             cts.box
             cts.box
             cts.box
             cts.I
             nat.nat
             (x0:(cts.Term cts.box nat.nat) => bool.bool)))).

leb_body :
  cts.Term
    cts.diamond
    (cts.cast
       cts.triangle
       cts.sinf
       (cts.univ cts.box cts.triangle cts.I)
       (cts.univ cts.diamond cts.sinf cts.I)
       cts.I
       (cts.prod
          cts.box
          cts.box
          cts.box
          cts.I
          nat.nat
          (x:(cts.Term cts.box nat.nat) =>
           cts.prod
             cts.box
             cts.box
             cts.box
             cts.I
             nat.nat
             (x0:(cts.Term cts.box nat.nat) => bool.bool)))).

axiom_leb :
  cts.Term
    cts.star
    (cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       nat.nat
       (x:(cts.Term cts.box nat.nat) =>
        connectives.equal
          (cts.prod
             cts.box
             cts.box
             cts.box
             cts.I
             nat.nat
             (x0:(cts.Term cts.box nat.nat) => bool.bool))
          (nat.leb x)
          (nat.filter_nat_type
             (cts.prod
                cts.box
                cts.box
                cts.box
                cts.I
                nat.nat
                (x0:(cts.Term cts.box nat.nat) => bool.bool))
             nat.leb_body
             x))).

def eq_leb :
  cts.Term
    cts.star
    (cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       nat.nat
       (x:(cts.Term cts.box nat.nat) =>
        leibniz.leibniz
          (cts.prod
             cts.box
             cts.box
             cts.box
             cts.I
             nat.nat
             (x0:(cts.Term cts.box nat.nat) => bool.bool))
          (nat.leb x)
          (nat.filter_nat_type
             (cts.prod
                cts.box
                cts.box
                cts.box
                cts.I
                nat.nat
                (x0:(cts.Term cts.box nat.nat) => bool.bool))
             nat.leb_body
             x)))
  :=
  n:(cts.Term cts.box nat.nat) =>
  connectives.equal_leibniz
    (cts.prod cts.box cts.box cts.box cts.I nat.nat (x:(cts.Term cts.box nat.nat) => bool.bool))
    (nat.leb n)
    (nat.filter_nat_type
       (cts.prod cts.box cts.box cts.box cts.I nat.nat (x:(cts.Term cts.box nat.nat) => bool.bool))
       nat.leb_body
       n)
    (nat.axiom_leb n).

def sym_eq_leb :
  cts.Term
    cts.star
    (cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       nat.nat
       (x:(cts.Term cts.box nat.nat) =>
        leibniz.leibniz
          (cts.prod
             cts.box
             cts.box
             cts.box
             cts.I
             nat.nat
             (x0:(cts.Term cts.box nat.nat) => bool.bool))
          (nat.filter_nat_type
             (cts.prod
                cts.box
                cts.box
                cts.box
                cts.I
                nat.nat
                (x0:(cts.Term cts.box nat.nat) => bool.bool))
             nat.leb_body
             x)
          (nat.leb x)))
  :=
  n:(cts.Term cts.box nat.nat) =>
  leibniz.sym_leibniz
    (cts.prod cts.box cts.box cts.box cts.I nat.nat (x:(cts.Term cts.box nat.nat) => bool.bool))
    (nat.leb n)
    (nat.filter_nat_type
       (cts.prod cts.box cts.box cts.box cts.I nat.nat (x:(cts.Term cts.box nat.nat) => bool.bool))
       nat.leb_body
       n)
    (nat.eq_leb n).

axiom_leb_body_O :
  cts.Term
    cts.star
    (connectives.equal
       (cts.prod cts.box cts.box cts.box cts.I nat.nat (x:(cts.Term cts.box nat.nat) => bool.bool))
       (nat.leb_body nat.O)
       (m:(cts.Term cts.box nat.nat) => bool.true)).

def eq_leb_body_O :
  cts.Term
    cts.star
    (leibniz.leibniz
       (cts.prod cts.box cts.box cts.box cts.I nat.nat (x:(cts.Term cts.box nat.nat) => bool.bool))
       (nat.leb_body nat.O)
       (m:(cts.Term cts.box nat.nat) => bool.true))
  :=
  connectives.equal_leibniz
    (cts.prod cts.box cts.box cts.box cts.I nat.nat (x:(cts.Term cts.box nat.nat) => bool.bool))
    (nat.leb_body nat.O)
    (m:(cts.Term cts.box nat.nat) => bool.true)
    nat.axiom_leb_body_O.

def sym_eq_leb_body_O :
  cts.Term
    cts.star
    (leibniz.leibniz
       (cts.prod cts.box cts.box cts.box cts.I nat.nat (x:(cts.Term cts.box nat.nat) => bool.bool))
       (m:(cts.Term cts.box nat.nat) => bool.true)
       (nat.leb_body nat.O))
  :=
  leibniz.sym_leibniz
    (cts.prod cts.box cts.box cts.box cts.I nat.nat (x:(cts.Term cts.box nat.nat) => bool.bool))
    (nat.leb_body nat.O)
    (m:(cts.Term cts.box nat.nat) => bool.true)
    nat.eq_leb_body_O.

axiom_leb_body_S :
  cts.Term
    cts.star
    (cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       nat.nat
       (x:(cts.Term cts.box nat.nat) =>
        connectives.equal
          (cts.prod
             cts.box
             cts.box
             cts.box
             cts.I
             nat.nat
             (x0:(cts.Term cts.box nat.nat) => bool.bool))
          (nat.leb_body (nat.S x))
          (m:(cts.Term cts.box nat.nat) =>
           nat.match_nat_type bool.bool bool.false (q:(cts.Term cts.box nat.nat) => nat.leb x q) m))).

def eq_leb_body_S :
  cts.Term
    cts.star
    (cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       nat.nat
       (x:(cts.Term cts.box nat.nat) =>
        leibniz.leibniz
          (cts.prod
             cts.box
             cts.box
             cts.box
             cts.I
             nat.nat
             (x0:(cts.Term cts.box nat.nat) => bool.bool))
          (nat.leb_body (nat.S x))
          (m:(cts.Term cts.box nat.nat) =>
           nat.match_nat_type bool.bool bool.false (q:(cts.Term cts.box nat.nat) => nat.leb x q) m)))
  :=
  n:(cts.Term cts.box nat.nat) =>
  connectives.equal_leibniz
    (cts.prod cts.box cts.box cts.box cts.I nat.nat (x:(cts.Term cts.box nat.nat) => bool.bool))
    (nat.leb_body (nat.S n))
    (m:(cts.Term cts.box nat.nat) =>
     nat.match_nat_type bool.bool bool.false (q:(cts.Term cts.box nat.nat) => nat.leb n q) m)
    (nat.axiom_leb_body_S n).

def sym_eq_leb_body_S :
  cts.Term
    cts.star
    (cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       nat.nat
       (x:(cts.Term cts.box nat.nat) =>
        leibniz.leibniz
          (cts.prod
             cts.box
             cts.box
             cts.box
             cts.I
             nat.nat
             (x0:(cts.Term cts.box nat.nat) => bool.bool))
          (m:(cts.Term cts.box nat.nat) =>
           nat.match_nat_type bool.bool bool.false (q:(cts.Term cts.box nat.nat) => nat.leb x q) m)
          (nat.leb_body (nat.S x))))
  :=
  n:(cts.Term cts.box nat.nat) =>
  leibniz.sym_leibniz
    (cts.prod cts.box cts.box cts.box cts.I nat.nat (x:(cts.Term cts.box nat.nat) => bool.bool))
    (nat.leb_body (nat.S n))
    (m:(cts.Term cts.box nat.nat) =>
     nat.match_nat_type bool.bool bool.false (q:(cts.Term cts.box nat.nat) => nat.leb n q) m)
    (nat.eq_leb_body_S n).

def leb_elim :
  cts.Term
    cts.star
    (cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       nat.nat
       (x:(cts.Term cts.box nat.nat) =>
        cts.prod
          cts.box
          cts.star
          cts.star
          cts.I
          nat.nat
          (x0:(cts.Term cts.box nat.nat) =>
           cts.prod
             cts.box
             cts.star
             cts.star
             cts.I
             (cts.prod
                cts.box
                cts.box
                cts.box
                cts.I
                bool.bool
                (x1:(cts.Term cts.box bool.bool) => cts.univ cts.star cts.box cts.I))
             (x1:(cts.Term
                    cts.box
                    (cts.prod
                       cts.box
                       cts.box
                       cts.box
                       cts.I
                       bool.bool
                       (x1:(cts.Term cts.box bool.bool) => cts.univ cts.star cts.box cts.I))) =>
              cts.prod
                cts.star
                cts.star
                cts.star
                cts.I
                (cts.prod
                   cts.star
                   cts.star
                   cts.star
                   cts.I
                   (nat.le x x0)
                   (x2:(cts.Term cts.star (nat.le x x0)) => x1 bool.true))
                (x2:(cts.Term
                       cts.star
                       (cts.prod
                          cts.star
                          cts.star
                          cts.star
                          cts.I
                          (nat.le x x0)
                          (x2:(cts.Term cts.star (nat.le x x0)) => x1 bool.true))) =>
                 cts.prod
                   cts.star
                   cts.star
                   cts.star
                   cts.I
                   (cts.prod
                      cts.star
                      cts.star
                      cts.star
                      cts.I
                      (connectives.Not (nat.le x x0))
                      (x3:(cts.Term cts.star (connectives.Not (nat.le x x0))) => x1 bool.false))
                   (x3:(cts.Term
                          cts.star
                          (cts.prod
                             cts.star
                             cts.star
                             cts.star
                             cts.I
                             (connectives.Not (nat.le x x0))
                             (x3:(cts.Term cts.star (connectives.Not (nat.le x x0))) =>
                              x1 bool.false))) =>
                    x1 (nat.leb x x0)))))))
  :=
  nat.nat_elim2
    (__:(cts.Term cts.box nat.nat) =>
     _0:(cts.Term cts.box nat.nat) =>
     cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       (cts.prod
          cts.box
          cts.box
          cts.box
          cts.I
          bool.bool
          (x:(cts.Term cts.box bool.bool) => cts.univ cts.star cts.box cts.I))
       (x:(cts.Term
             cts.box
             (cts.prod
                cts.box
                cts.box
                cts.box
                cts.I
                bool.bool
                (x:(cts.Term cts.box bool.bool) => cts.univ cts.star cts.box cts.I))) =>
        cts.prod
          cts.star
          cts.star
          cts.star
          cts.I
          (cts.prod
             cts.star
             cts.star
             cts.star
             cts.I
             (nat.le __ _0)
             (x0:(cts.Term cts.star (nat.le __ _0)) => x bool.true))
          (x0:(cts.Term
                 cts.star
                 (cts.prod
                    cts.star
                    cts.star
                    cts.star
                    cts.I
                    (nat.le __ _0)
                    (x0:(cts.Term cts.star (nat.le __ _0)) => x bool.true))) =>
           cts.prod
             cts.star
             cts.star
             cts.star
             cts.I
             (cts.prod
                cts.star
                cts.star
                cts.star
                cts.I
                (connectives.Not (nat.le __ _0))
                (x1:(cts.Term cts.star (connectives.Not (nat.le __ _0))) => x bool.false))
             (x1:(cts.Term
                    cts.star
                    (cts.prod
                       cts.star
                       cts.star
                       cts.star
                       cts.I
                       (connectives.Not (nat.le __ _0))
                       (x1:(cts.Term cts.star (connectives.Not (nat.le __ _0))) =>
                        x bool.false))) =>
              x (nat.leb __ _0)))))
    (n:(cts.Term cts.box nat.nat) =>
     nat.sym_eq_leb
       nat.O
       (y:(cts.Term
             cts.box
             (cts.prod'
                cts.box
                cts.box
                cts.box
                nat.nat
                (x0:(cts.Term cts.box nat.nat) => bool.bool))) =>
        cts.prod
          cts.box
          cts.star
          cts.star
          cts.I
          (cts.prod
             cts.box
             cts.box
             cts.box
             cts.I
             bool.bool
             (x:(cts.Term cts.box bool.bool) => cts.univ cts.star cts.box cts.I))
          (x:(cts.Term
                cts.box
                (cts.prod
                   cts.box
                   cts.box
                   cts.box
                   cts.I
                   bool.bool
                   (x:(cts.Term cts.box bool.bool) => cts.univ cts.star cts.box cts.I))) =>
           cts.prod
             cts.star
             cts.star
             cts.star
             cts.I
             (cts.prod
                cts.star
                cts.star
                cts.star
                cts.I
                (nat.le nat.O n)
                (x0:(cts.Term cts.star (nat.le nat.O n)) => x bool.true))
             (x0:(cts.Term
                    cts.star
                    (cts.prod
                       cts.star
                       cts.star
                       cts.star
                       cts.I
                       (nat.le nat.O n)
                       (x0:(cts.Term cts.star (nat.le nat.O n)) => x bool.true))) =>
              cts.prod
                cts.star
                cts.star
                cts.star
                cts.I
                (cts.prod
                   cts.star
                   cts.star
                   cts.star
                   cts.I
                   (connectives.Not (nat.le nat.O n))
                   (x1:(cts.Term cts.star (connectives.Not (nat.le nat.O n))) => x bool.false))
                (x1:(cts.Term
                       cts.star
                       (cts.prod
                          cts.star
                          cts.star
                          cts.star
                          cts.I
                          (connectives.Not (nat.le nat.O n))
                          (x1:(cts.Term cts.star (connectives.Not (nat.le nat.O n))) =>
                           x bool.false))) =>
                 x (y n)))))
       (nat.sym_eq_filter_nat_type_O
          (cts.prod
             cts.box
             cts.box
             cts.box
             cts.I
             nat.nat
             (x:(cts.Term cts.box nat.nat) => bool.bool))
          nat.leb_body
          (y:(cts.Term
                cts.box
                (cts.prod'
                   cts.box
                   cts.box
                   cts.box
                   nat.nat
                   (x:(cts.Term cts.box nat.nat) => bool.bool))) =>
           cts.prod
             cts.box
             cts.star
             cts.star
             cts.I
             (cts.prod
                cts.box
                cts.box
                cts.box
                cts.I
                bool.bool
                (x:(cts.Term cts.box bool.bool) => cts.univ cts.star cts.box cts.I))
             (x:(cts.Term
                   cts.box
                   (cts.prod
                      cts.box
                      cts.box
                      cts.box
                      cts.I
                      bool.bool
                      (x:(cts.Term cts.box bool.bool) => cts.univ cts.star cts.box cts.I))) =>
              cts.prod
                cts.star
                cts.star
                cts.star
                cts.I
                (cts.prod
                   cts.star
                   cts.star
                   cts.star
                   cts.I
                   (nat.le nat.O n)
                   (x0:(cts.Term cts.star (nat.le nat.O n)) => x bool.true))
                (x0:(cts.Term
                       cts.star
                       (cts.prod
                          cts.star
                          cts.star
                          cts.star
                          cts.I
                          (nat.le nat.O n)
                          (x0:(cts.Term cts.star (nat.le nat.O n)) => x bool.true))) =>
                 cts.prod
                   cts.star
                   cts.star
                   cts.star
                   cts.I
                   (cts.prod
                      cts.star
                      cts.star
                      cts.star
                      cts.I
                      (connectives.Not (nat.le nat.O n))
                      (x1:(cts.Term cts.star (connectives.Not (nat.le nat.O n))) =>
                       x bool.false))
                   (x1:(cts.Term
                          cts.star
                          (cts.prod
                             cts.star
                             cts.star
                             cts.star
                             cts.I
                             (connectives.Not (nat.le nat.O n))
                             (x1:(cts.Term cts.star (connectives.Not (nat.le nat.O n))) =>
                              x bool.false))) =>
                    x (y n)))))
          (nat.sym_eq_leb_body_O
             (y:(cts.Term
                   cts.box
                   (cts.prod'
                      cts.box
                      cts.box
                      cts.box
                      nat.nat
                      (x:(cts.Term cts.box nat.nat) => bool.bool))) =>
              cts.prod
                cts.box
                cts.star
                cts.star
                cts.I
                (cts.prod
                   cts.box
                   cts.box
                   cts.box
                   cts.I
                   bool.bool
                   (x:(cts.Term cts.box bool.bool) => cts.univ cts.star cts.box cts.I))
                (x:(cts.Term
                      cts.box
                      (cts.prod
                         cts.box
                         cts.box
                         cts.box
                         cts.I
                         bool.bool
                         (x:(cts.Term cts.box bool.bool) => cts.univ cts.star cts.box cts.I))) =>
                 cts.prod
                   cts.star
                   cts.star
                   cts.star
                   cts.I
                   (cts.prod
                      cts.star
                      cts.star
                      cts.star
                      cts.I
                      (nat.le nat.O n)
                      (x0:(cts.Term cts.star (nat.le nat.O n)) => x bool.true))
                   (x0:(cts.Term
                          cts.star
                          (cts.prod
                             cts.star
                             cts.star
                             cts.star
                             cts.I
                             (nat.le nat.O n)
                             (x0:(cts.Term cts.star (nat.le nat.O n)) => x bool.true))) =>
                    cts.prod
                      cts.star
                      cts.star
                      cts.star
                      cts.I
                      (cts.prod
                         cts.star
                         cts.star
                         cts.star
                         cts.I
                         (connectives.Not (nat.le nat.O n))
                         (x1:(cts.Term cts.star (connectives.Not (nat.le nat.O n))) =>
                          x bool.false))
                      (x1:(cts.Term
                             cts.star
                             (cts.prod
                                cts.star
                                cts.star
                                cts.star
                                cts.I
                                (connectives.Not (nat.le nat.O n))
                                (x1:(cts.Term
                                       cts.star
                                       (connectives.Not (nat.le nat.O n))) =>
                                 x bool.false))) =>
                       x (y n)))))
             (P:(cts.Term
                   cts.box
                   (cts.prod'
                      cts.box
                      cts.box
                      cts.box
                      bool.bool
                      (x:(cts.Term cts.box bool.bool) => cts.univ cts.star cts.box cts.I))) =>
              auto:(cts.Term
                      cts.star
                      (cts.prod'
                         cts.star
                         cts.star
                         cts.star
                         (nat.le nat.O n)
                         (x0:(cts.Term cts.star (nat.le nat.O n)) => P bool.true))) =>
              auto':(cts.Term
                       cts.star
                       (cts.prod'
                          cts.star
                          cts.star
                          cts.star
                          (connectives.Not (nat.le nat.O n))
                          (x1:(cts.Term cts.star (connectives.Not (nat.le nat.O n))) =>
                           P bool.false))) =>
              auto (nat.le_O_n n)))))
    (n:(cts.Term cts.box nat.nat) =>
     nat.sym_eq_leb
       (nat.S n)
       (y:(cts.Term
             cts.box
             (cts.prod'
                cts.box
                cts.box
                cts.box
                nat.nat
                (x0:(cts.Term cts.box nat.nat) => bool.bool))) =>
        cts.prod
          cts.box
          cts.star
          cts.star
          cts.I
          (cts.prod
             cts.box
             cts.box
             cts.box
             cts.I
             bool.bool
             (x:(cts.Term cts.box bool.bool) => cts.univ cts.star cts.box cts.I))
          (x:(cts.Term
                cts.box
                (cts.prod
                   cts.box
                   cts.box
                   cts.box
                   cts.I
                   bool.bool
                   (x:(cts.Term cts.box bool.bool) => cts.univ cts.star cts.box cts.I))) =>
           cts.prod
             cts.star
             cts.star
             cts.star
             cts.I
             (cts.prod
                cts.star
                cts.star
                cts.star
                cts.I
                (nat.le (nat.S n) nat.O)
                (x0:(cts.Term cts.star (nat.le (nat.S n) nat.O)) => x bool.true))
             (x0:(cts.Term
                    cts.star
                    (cts.prod
                       cts.star
                       cts.star
                       cts.star
                       cts.I
                       (nat.le (nat.S n) nat.O)
                       (x0:(cts.Term cts.star (nat.le (nat.S n) nat.O)) => x bool.true))) =>
              cts.prod
                cts.star
                cts.star
                cts.star
                cts.I
                (cts.prod
                   cts.star
                   cts.star
                   cts.star
                   cts.I
                   (connectives.Not (nat.le (nat.S n) nat.O))
                   (x1:(cts.Term cts.star (connectives.Not (nat.le (nat.S n) nat.O))) =>
                    x bool.false))
                (x1:(cts.Term
                       cts.star
                       (cts.prod
                          cts.star
                          cts.star
                          cts.star
                          cts.I
                          (connectives.Not (nat.le (nat.S n) nat.O))
                          (x1:(cts.Term
                                 cts.star
                                 (connectives.Not (nat.le (nat.S n) nat.O))) =>
                           x bool.false))) =>
                 x (y nat.O)))))
       (nat.sym_eq_filter_nat_type_S
          (cts.prod
             cts.box
             cts.box
             cts.box
             cts.I
             nat.nat
             (x:(cts.Term cts.box nat.nat) => bool.bool))
          nat.leb_body
          n
          (y:(cts.Term
                cts.box
                (cts.prod'
                   cts.box
                   cts.box
                   cts.box
                   nat.nat
                   (x:(cts.Term cts.box nat.nat) => bool.bool))) =>
           cts.prod
             cts.box
             cts.star
             cts.star
             cts.I
             (cts.prod
                cts.box
                cts.box
                cts.box
                cts.I
                bool.bool
                (x:(cts.Term cts.box bool.bool) => cts.univ cts.star cts.box cts.I))
             (x:(cts.Term
                   cts.box
                   (cts.prod
                      cts.box
                      cts.box
                      cts.box
                      cts.I
                      bool.bool
                      (x:(cts.Term cts.box bool.bool) => cts.univ cts.star cts.box cts.I))) =>
              cts.prod
                cts.star
                cts.star
                cts.star
                cts.I
                (cts.prod
                   cts.star
                   cts.star
                   cts.star
                   cts.I
                   (nat.le (nat.S n) nat.O)
                   (x0:(cts.Term cts.star (nat.le (nat.S n) nat.O)) => x bool.true))
                (x0:(cts.Term
                       cts.star
                       (cts.prod
                          cts.star
                          cts.star
                          cts.star
                          cts.I
                          (nat.le (nat.S n) nat.O)
                          (x0:(cts.Term cts.star (nat.le (nat.S n) nat.O)) => x bool.true))) =>
                 cts.prod
                   cts.star
                   cts.star
                   cts.star
                   cts.I
                   (cts.prod
                      cts.star
                      cts.star
                      cts.star
                      cts.I
                      (connectives.Not (nat.le (nat.S n) nat.O))
                      (x1:(cts.Term cts.star (connectives.Not (nat.le (nat.S n) nat.O))) =>
                       x bool.false))
                   (x1:(cts.Term
                          cts.star
                          (cts.prod
                             cts.star
                             cts.star
                             cts.star
                             cts.I
                             (connectives.Not (nat.le (nat.S n) nat.O))
                             (x1:(cts.Term
                                    cts.star
                                    (connectives.Not (nat.le (nat.S n) nat.O))) =>
                              x bool.false))) =>
                    x (y nat.O)))))
          (nat.sym_eq_leb_body_S
             n
             (y:(cts.Term
                   cts.box
                   (cts.prod'
                      cts.box
                      cts.box
                      cts.box
                      nat.nat
                      (x0:(cts.Term cts.box nat.nat) => bool.bool))) =>
              cts.prod
                cts.box
                cts.star
                cts.star
                cts.I
                (cts.prod
                   cts.box
                   cts.box
                   cts.box
                   cts.I
                   bool.bool
                   (x:(cts.Term cts.box bool.bool) => cts.univ cts.star cts.box cts.I))
                (x:(cts.Term
                      cts.box
                      (cts.prod
                         cts.box
                         cts.box
                         cts.box
                         cts.I
                         bool.bool
                         (x:(cts.Term cts.box bool.bool) => cts.univ cts.star cts.box cts.I))) =>
                 cts.prod
                   cts.star
                   cts.star
                   cts.star
                   cts.I
                   (cts.prod
                      cts.star
                      cts.star
                      cts.star
                      cts.I
                      (nat.le (nat.S n) nat.O)
                      (x0:(cts.Term cts.star (nat.le (nat.S n) nat.O)) => x bool.true))
                   (x0:(cts.Term
                          cts.star
                          (cts.prod
                             cts.star
                             cts.star
                             cts.star
                             cts.I
                             (nat.le (nat.S n) nat.O)
                             (x0:(cts.Term cts.star (nat.le (nat.S n) nat.O)) =>
                              x bool.true))) =>
                    cts.prod
                      cts.star
                      cts.star
                      cts.star
                      cts.I
                      (cts.prod
                         cts.star
                         cts.star
                         cts.star
                         cts.I
                         (connectives.Not (nat.le (nat.S n) nat.O))
                         (x1:(cts.Term cts.star (connectives.Not (nat.le (nat.S n) nat.O))) =>
                          x bool.false))
                      (x1:(cts.Term
                             cts.star
                             (cts.prod
                                cts.star
                                cts.star
                                cts.star
                                cts.I
                                (connectives.Not (nat.le (nat.S n) nat.O))
                                (x1:(cts.Term
                                       cts.star
                                       (connectives.Not (nat.le (nat.S n) nat.O))) =>
                                 x bool.false))) =>
                       x (y nat.O)))))
             (nat.sym_eq_match_nat_type_O
                bool.bool
                bool.false
                (q:(cts.Term cts.box nat.nat) => nat.leb n q)
                (y:(cts.Term cts.box bool.bool) =>
                 cts.prod
                   cts.box
                   cts.star
                   cts.star
                   cts.I
                   (cts.prod
                      cts.box
                      cts.box
                      cts.box
                      cts.I
                      bool.bool
                      (x:(cts.Term cts.box bool.bool) => cts.univ cts.star cts.box cts.I))
                   (x:(cts.Term
                         cts.box
                         (cts.prod
                            cts.box
                            cts.box
                            cts.box
                            cts.I
                            bool.bool
                            (x:(cts.Term cts.box bool.bool) =>
                             cts.univ cts.star cts.box cts.I))) =>
                    cts.prod
                      cts.star
                      cts.star
                      cts.star
                      cts.I
                      (cts.prod
                         cts.star
                         cts.star
                         cts.star
                         cts.I
                         (nat.le (nat.S n) nat.O)
                         (x0:(cts.Term cts.star (nat.le (nat.S n) nat.O)) => x bool.true))
                      (x0:(cts.Term
                             cts.star
                             (cts.prod
                                cts.star
                                cts.star
                                cts.star
                                cts.I
                                (nat.le (nat.S n) nat.O)
                                (x0:(cts.Term cts.star (nat.le (nat.S n) nat.O)) =>
                                 x bool.true))) =>
                       cts.prod
                         cts.star
                         cts.star
                         cts.star
                         cts.I
                         (cts.prod
                            cts.star
                            cts.star
                            cts.star
                            cts.I
                            (connectives.Not (nat.le (nat.S n) nat.O))
                            (x1:(cts.Term
                                   cts.star
                                   (connectives.Not (nat.le (nat.S n) nat.O))) =>
                             x bool.false))
                         (x1:(cts.Term
                                cts.star
                                (cts.prod
                                   cts.star
                                   cts.star
                                   cts.star
                                   cts.I
                                   (connectives.Not (nat.le (nat.S n) nat.O))
                                   (x1:(cts.Term
                                          cts.star
                                          (connectives.Not (nat.le (nat.S n) nat.O))) =>
                                    x bool.false))) =>
                          x y))))
                (P:(cts.Term
                      cts.box
                      (cts.prod'
                         cts.box
                         cts.box
                         cts.box
                         bool.bool
                         (x:(cts.Term cts.box bool.bool) => cts.univ cts.star cts.box cts.I))) =>
                 auto:(cts.Term
                         cts.star
                         (cts.prod'
                            cts.star
                            cts.star
                            cts.star
                            (nat.le (nat.S n) nat.O)
                            (x0:(cts.Term cts.star (nat.le (nat.S n) nat.O)) => P bool.true))) =>
                 auto':(cts.Term
                          cts.star
                          (cts.prod'
                             cts.star
                             cts.star
                             cts.star
                             (connectives.Not (nat.le (nat.S n) nat.O))
                             (x1:(cts.Term
                                    cts.star
                                    (connectives.Not (nat.le (nat.S n) nat.O))) =>
                              P bool.false))) =>
                 auto' (nat.not_le_Sn_O n))))))
    (n:(cts.Term cts.box nat.nat) =>
     m:(cts.Term cts.box nat.nat) =>
     nat.sym_eq_leb
       (nat.S n)
       (y:(cts.Term
             cts.box
             (cts.prod'
                cts.box
                cts.box
                cts.box
                nat.nat
                (x0:(cts.Term cts.box nat.nat) => bool.bool))) =>
        cts.prod
          cts.star
          cts.star
          cts.star
          cts.I
          (cts.prod
             cts.box
             cts.star
             cts.star
             cts.I
             (cts.prod
                cts.box
                cts.box
                cts.box
                cts.I
                bool.bool
                (x:(cts.Term cts.box bool.bool) => cts.univ cts.star cts.box cts.I))
             (x:(cts.Term
                   cts.box
                   (cts.prod
                      cts.box
                      cts.box
                      cts.box
                      cts.I
                      bool.bool
                      (x:(cts.Term cts.box bool.bool) => cts.univ cts.star cts.box cts.I))) =>
              cts.prod
                cts.star
                cts.star
                cts.star
                cts.I
                (cts.prod
                   cts.star
                   cts.star
                   cts.star
                   cts.I
                   (nat.le n m)
                   (x0:(cts.Term cts.star (nat.le n m)) => x bool.true))
                (x0:(cts.Term
                       cts.star
                       (cts.prod
                          cts.star
                          cts.star
                          cts.star
                          cts.I
                          (nat.le n m)
                          (x0:(cts.Term cts.star (nat.le n m)) => x bool.true))) =>
                 cts.prod
                   cts.star
                   cts.star
                   cts.star
                   cts.I
                   (cts.prod
                      cts.star
                      cts.star
                      cts.star
                      cts.I
                      (connectives.Not (nat.le n m))
                      (x1:(cts.Term cts.star (connectives.Not (nat.le n m))) => x bool.false))
                   (x1:(cts.Term
                          cts.star
                          (cts.prod
                             cts.star
                             cts.star
                             cts.star
                             cts.I
                             (connectives.Not (nat.le n m))
                             (x1:(cts.Term cts.star (connectives.Not (nat.le n m))) =>
                              x bool.false))) =>
                    x (nat.leb n m)))))
          (x:(cts.Term
                cts.star
                (cts.prod
                   cts.box
                   cts.star
                   cts.star
                   cts.I
                   (cts.prod
                      cts.box
                      cts.box
                      cts.box
                      cts.I
                      bool.bool
                      (x:(cts.Term cts.box bool.bool) => cts.univ cts.star cts.box cts.I))
                   (x:(cts.Term
                         cts.box
                         (cts.prod
                            cts.box
                            cts.box
                            cts.box
                            cts.I
                            bool.bool
                            (x:(cts.Term cts.box bool.bool) =>
                             cts.univ cts.star cts.box cts.I))) =>
                    cts.prod
                      cts.star
                      cts.star
                      cts.star
                      cts.I
                      (cts.prod
                         cts.star
                         cts.star
                         cts.star
                         cts.I
                         (nat.le n m)
                         (x0:(cts.Term cts.star (nat.le n m)) => x bool.true))
                      (x0:(cts.Term
                             cts.star
                             (cts.prod
                                cts.star
                                cts.star
                                cts.star
                                cts.I
                                (nat.le n m)
                                (x0:(cts.Term cts.star (nat.le n m)) => x bool.true))) =>
                       cts.prod
                         cts.star
                         cts.star
                         cts.star
                         cts.I
                         (cts.prod
                            cts.star
                            cts.star
                            cts.star
                            cts.I
                            (connectives.Not (nat.le n m))
                            (x1:(cts.Term cts.star (connectives.Not (nat.le n m))) =>
                             x bool.false))
                         (x1:(cts.Term
                                cts.star
                                (cts.prod
                                   cts.star
                                   cts.star
                                   cts.star
                                   cts.I
                                   (connectives.Not (nat.le n m))
                                   (x1:(cts.Term
                                          cts.star
                                          (connectives.Not (nat.le n m))) =>
                                    x bool.false))) =>
                          x (nat.leb n m)))))) =>
           cts.prod
             cts.box
             cts.star
             cts.star
             cts.I
             (cts.prod
                cts.box
                cts.box
                cts.box
                cts.I
                bool.bool
                (x0:(cts.Term cts.box bool.bool) => cts.univ cts.star cts.box cts.I))
             (x0:(cts.Term
                    cts.box
                    (cts.prod
                       cts.box
                       cts.box
                       cts.box
                       cts.I
                       bool.bool
                       (x0:(cts.Term cts.box bool.bool) => cts.univ cts.star cts.box cts.I))) =>
              cts.prod
                cts.star
                cts.star
                cts.star
                cts.I
                (cts.prod
                   cts.star
                   cts.star
                   cts.star
                   cts.I
                   (nat.le (nat.S n) (nat.S m))
                   (x1:(cts.Term cts.star (nat.le (nat.S n) (nat.S m))) => x0 bool.true))
                (x1:(cts.Term
                       cts.star
                       (cts.prod
                          cts.star
                          cts.star
                          cts.star
                          cts.I
                          (nat.le (nat.S n) (nat.S m))
                          (x1:(cts.Term cts.star (nat.le (nat.S n) (nat.S m))) =>
                           x0 bool.true))) =>
                 cts.prod
                   cts.star
                   cts.star
                   cts.star
                   cts.I
                   (cts.prod
                      cts.star
                      cts.star
                      cts.star
                      cts.I
                      (connectives.Not (nat.le (nat.S n) (nat.S m)))
                      (x2:(cts.Term cts.star (connectives.Not (nat.le (nat.S n) (nat.S m)))) =>
                       x0 bool.false))
                   (x2:(cts.Term
                          cts.star
                          (cts.prod
                             cts.star
                             cts.star
                             cts.star
                             cts.I
                             (connectives.Not (nat.le (nat.S n) (nat.S m)))
                             (x2:(cts.Term
                                    cts.star
                                    (connectives.Not (nat.le (nat.S n) (nat.S m)))) =>
                              x0 bool.false))) =>
                    x0 (y (nat.S m)))))))
       (nat.sym_eq_filter_nat_type_S
          (cts.prod
             cts.box
             cts.box
             cts.box
             cts.I
             nat.nat
             (x:(cts.Term cts.box nat.nat) => bool.bool))
          nat.leb_body
          n
          (y:(cts.Term
                cts.box
                (cts.prod'
                   cts.box
                   cts.box
                   cts.box
                   nat.nat
                   (x:(cts.Term cts.box nat.nat) => bool.bool))) =>
           cts.prod
             cts.star
             cts.star
             cts.star
             cts.I
             (cts.prod
                cts.box
                cts.star
                cts.star
                cts.I
                (cts.prod
                   cts.box
                   cts.box
                   cts.box
                   cts.I
                   bool.bool
                   (x:(cts.Term cts.box bool.bool) => cts.univ cts.star cts.box cts.I))
                (x:(cts.Term
                      cts.box
                      (cts.prod
                         cts.box
                         cts.box
                         cts.box
                         cts.I
                         bool.bool
                         (x:(cts.Term cts.box bool.bool) => cts.univ cts.star cts.box cts.I))) =>
                 cts.prod
                   cts.star
                   cts.star
                   cts.star
                   cts.I
                   (cts.prod
                      cts.star
                      cts.star
                      cts.star
                      cts.I
                      (nat.le n m)
                      (x0:(cts.Term cts.star (nat.le n m)) => x bool.true))
                   (x0:(cts.Term
                          cts.star
                          (cts.prod
                             cts.star
                             cts.star
                             cts.star
                             cts.I
                             (nat.le n m)
                             (x0:(cts.Term cts.star (nat.le n m)) => x bool.true))) =>
                    cts.prod
                      cts.star
                      cts.star
                      cts.star
                      cts.I
                      (cts.prod
                         cts.star
                         cts.star
                         cts.star
                         cts.I
                         (connectives.Not (nat.le n m))
                         (x1:(cts.Term cts.star (connectives.Not (nat.le n m))) =>
                          x bool.false))
                      (x1:(cts.Term
                             cts.star
                             (cts.prod
                                cts.star
                                cts.star
                                cts.star
                                cts.I
                                (connectives.Not (nat.le n m))
                                (x1:(cts.Term cts.star (connectives.Not (nat.le n m))) =>
                                 x bool.false))) =>
                       x (nat.leb n m)))))
             (x:(cts.Term
                   cts.star
                   (cts.prod
                      cts.box
                      cts.star
                      cts.star
                      cts.I
                      (cts.prod
                         cts.box
                         cts.box
                         cts.box
                         cts.I
                         bool.bool
                         (x:(cts.Term cts.box bool.bool) => cts.univ cts.star cts.box cts.I))
                      (x:(cts.Term
                            cts.box
                            (cts.prod
                               cts.box
                               cts.box
                               cts.box
                               cts.I
                               bool.bool
                               (x:(cts.Term cts.box bool.bool) =>
                                cts.univ cts.star cts.box cts.I))) =>
                       cts.prod
                         cts.star
                         cts.star
                         cts.star
                         cts.I
                         (cts.prod
                            cts.star
                            cts.star
                            cts.star
                            cts.I
                            (nat.le n m)
                            (x0:(cts.Term cts.star (nat.le n m)) => x bool.true))
                         (x0:(cts.Term
                                cts.star
                                (cts.prod
                                   cts.star
                                   cts.star
                                   cts.star
                                   cts.I
                                   (nat.le n m)
                                   (x0:(cts.Term cts.star (nat.le n m)) => x bool.true))) =>
                          cts.prod
                            cts.star
                            cts.star
                            cts.star
                            cts.I
                            (cts.prod
                               cts.star
                               cts.star
                               cts.star
                               cts.I
                               (connectives.Not (nat.le n m))
                               (x1:(cts.Term cts.star (connectives.Not (nat.le n m))) =>
                                x bool.false))
                            (x1:(cts.Term
                                   cts.star
                                   (cts.prod
                                      cts.star
                                      cts.star
                                      cts.star
                                      cts.I
                                      (connectives.Not (nat.le n m))
                                      (x1:(cts.Term
                                             cts.star
                                             (connectives.Not (nat.le n m))) =>
                                       x bool.false))) =>
                             x (nat.leb n m)))))) =>
              cts.prod
                cts.box
                cts.star
                cts.star
                cts.I
                (cts.prod
                   cts.box
                   cts.box
                   cts.box
                   cts.I
                   bool.bool
                   (x0:(cts.Term cts.box bool.bool) => cts.univ cts.star cts.box cts.I))
                (x0:(cts.Term
                       cts.box
                       (cts.prod
                          cts.box
                          cts.box
                          cts.box
                          cts.I
                          bool.bool
                          (x0:(cts.Term cts.box bool.bool) =>
                           cts.univ cts.star cts.box cts.I))) =>
                 cts.prod
                   cts.star
                   cts.star
                   cts.star
                   cts.I
                   (cts.prod
                      cts.star
                      cts.star
                      cts.star
                      cts.I
                      (nat.le (nat.S n) (nat.S m))
                      (x1:(cts.Term cts.star (nat.le (nat.S n) (nat.S m))) => x0 bool.true))
                   (x1:(cts.Term
                          cts.star
                          (cts.prod
                             cts.star
                             cts.star
                             cts.star
                             cts.I
                             (nat.le (nat.S n) (nat.S m))
                             (x1:(cts.Term cts.star (nat.le (nat.S n) (nat.S m))) =>
                              x0 bool.true))) =>
                    cts.prod
                      cts.star
                      cts.star
                      cts.star
                      cts.I
                      (cts.prod
                         cts.star
                         cts.star
                         cts.star
                         cts.I
                         (connectives.Not (nat.le (nat.S n) (nat.S m)))
                         (x2:(cts.Term
                                cts.star
                                (connectives.Not (nat.le (nat.S n) (nat.S m)))) =>
                          x0 bool.false))
                      (x2:(cts.Term
                             cts.star
                             (cts.prod
                                cts.star
                                cts.star
                                cts.star
                                cts.I
                                (connectives.Not (nat.le (nat.S n) (nat.S m)))
                                (x2:(cts.Term
                                       cts.star
                                       (connectives.Not (nat.le (nat.S n) (nat.S m)))) =>
                                 x0 bool.false))) =>
                       x0 (y (nat.S m)))))))
          (nat.sym_eq_leb_body_S
             n
             (y:(cts.Term
                   cts.box
                   (cts.prod'
                      cts.box
                      cts.box
                      cts.box
                      nat.nat
                      (x0:(cts.Term cts.box nat.nat) => bool.bool))) =>
              cts.prod
                cts.star
                cts.star
                cts.star
                cts.I
                (cts.prod
                   cts.box
                   cts.star
                   cts.star
                   cts.I
                   (cts.prod
                      cts.box
                      cts.box
                      cts.box
                      cts.I
                      bool.bool
                      (x:(cts.Term cts.box bool.bool) => cts.univ cts.star cts.box cts.I))
                   (x:(cts.Term
                         cts.box
                         (cts.prod
                            cts.box
                            cts.box
                            cts.box
                            cts.I
                            bool.bool
                            (x:(cts.Term cts.box bool.bool) =>
                             cts.univ cts.star cts.box cts.I))) =>
                    cts.prod
                      cts.star
                      cts.star
                      cts.star
                      cts.I
                      (cts.prod
                         cts.star
                         cts.star
                         cts.star
                         cts.I
                         (nat.le n m)
                         (x0:(cts.Term cts.star (nat.le n m)) => x bool.true))
                      (x0:(cts.Term
                             cts.star
                             (cts.prod
                                cts.star
                                cts.star
                                cts.star
                                cts.I
                                (nat.le n m)
                                (x0:(cts.Term cts.star (nat.le n m)) => x bool.true))) =>
                       cts.prod
                         cts.star
                         cts.star
                         cts.star
                         cts.I
                         (cts.prod
                            cts.star
                            cts.star
                            cts.star
                            cts.I
                            (connectives.Not (nat.le n m))
                            (x1:(cts.Term cts.star (connectives.Not (nat.le n m))) =>
                             x bool.false))
                         (x1:(cts.Term
                                cts.star
                                (cts.prod
                                   cts.star
                                   cts.star
                                   cts.star
                                   cts.I
                                   (connectives.Not (nat.le n m))
                                   (x1:(cts.Term
                                          cts.star
                                          (connectives.Not (nat.le n m))) =>
                                    x bool.false))) =>
                          x (nat.leb n m)))))
                (x:(cts.Term
                      cts.star
                      (cts.prod
                         cts.box
                         cts.star
                         cts.star
                         cts.I
                         (cts.prod
                            cts.box
                            cts.box
                            cts.box
                            cts.I
                            bool.bool
                            (x:(cts.Term cts.box bool.bool) =>
                             cts.univ cts.star cts.box cts.I))
                         (x:(cts.Term
                               cts.box
                               (cts.prod
                                  cts.box
                                  cts.box
                                  cts.box
                                  cts.I
                                  bool.bool
                                  (x:(cts.Term cts.box bool.bool) =>
                                   cts.univ cts.star cts.box cts.I))) =>
                          cts.prod
                            cts.star
                            cts.star
                            cts.star
                            cts.I
                            (cts.prod
                               cts.star
                               cts.star
                               cts.star
                               cts.I
                               (nat.le n m)
                               (x0:(cts.Term cts.star (nat.le n m)) => x bool.true))
                            (x0:(cts.Term
                                   cts.star
                                   (cts.prod
                                      cts.star
                                      cts.star
                                      cts.star
                                      cts.I
                                      (nat.le n m)
                                      (x0:(cts.Term cts.star (nat.le n m)) =>
                                       x bool.true))) =>
                             cts.prod
                               cts.star
                               cts.star
                               cts.star
                               cts.I
                               (cts.prod
                                  cts.star
                                  cts.star
                                  cts.star
                                  cts.I
                                  (connectives.Not (nat.le n m))
                                  (x1:(cts.Term
                                         cts.star
                                         (connectives.Not (nat.le n m))) =>
                                   x bool.false))
                               (x1:(cts.Term
                                      cts.star
                                      (cts.prod
                                         cts.star
                                         cts.star
                                         cts.star
                                         cts.I
                                         (connectives.Not (nat.le n m))
                                         (x1:(cts.Term
                                                cts.star
                                                (connectives.Not (nat.le n m))) =>
                                          x bool.false))) =>
                                x (nat.leb n m)))))) =>
                 cts.prod
                   cts.box
                   cts.star
                   cts.star
                   cts.I
                   (cts.prod
                      cts.box
                      cts.box
                      cts.box
                      cts.I
                      bool.bool
                      (x0:(cts.Term cts.box bool.bool) => cts.univ cts.star cts.box cts.I))
                   (x0:(cts.Term
                          cts.box
                          (cts.prod
                             cts.box
                             cts.box
                             cts.box
                             cts.I
                             bool.bool
                             (x0:(cts.Term cts.box bool.bool) =>
                              cts.univ cts.star cts.box cts.I))) =>
                    cts.prod
                      cts.star
                      cts.star
                      cts.star
                      cts.I
                      (cts.prod
                         cts.star
                         cts.star
                         cts.star
                         cts.I
                         (nat.le (nat.S n) (nat.S m))
                         (x1:(cts.Term cts.star (nat.le (nat.S n) (nat.S m))) => x0 bool.true))
                      (x1:(cts.Term
                             cts.star
                             (cts.prod
                                cts.star
                                cts.star
                                cts.star
                                cts.I
                                (nat.le (nat.S n) (nat.S m))
                                (x1:(cts.Term cts.star (nat.le (nat.S n) (nat.S m))) =>
                                 x0 bool.true))) =>
                       cts.prod
                         cts.star
                         cts.star
                         cts.star
                         cts.I
                         (cts.prod
                            cts.star
                            cts.star
                            cts.star
                            cts.I
                            (connectives.Not (nat.le (nat.S n) (nat.S m)))
                            (x2:(cts.Term
                                   cts.star
                                   (connectives.Not (nat.le (nat.S n) (nat.S m)))) =>
                             x0 bool.false))
                         (x2:(cts.Term
                                cts.star
                                (cts.prod
                                   cts.star
                                   cts.star
                                   cts.star
                                   cts.I
                                   (connectives.Not (nat.le (nat.S n) (nat.S m)))
                                   (x2:(cts.Term
                                          cts.star
                                          (connectives.Not
                                             (nat.le (nat.S n) (nat.S m)))) =>
                                    x0 bool.false))) =>
                          x0 (y (nat.S m)))))))
             (nat.sym_eq_match_nat_type_S
                bool.bool
                bool.false
                (q:(cts.Term cts.box nat.nat) => nat.leb n q)
                m
                (y:(cts.Term cts.box bool.bool) =>
                 cts.prod
                   cts.star
                   cts.star
                   cts.star
                   cts.I
                   (cts.prod
                      cts.box
                      cts.star
                      cts.star
                      cts.I
                      (cts.prod
                         cts.box
                         cts.box
                         cts.box
                         cts.I
                         bool.bool
                         (x:(cts.Term cts.box bool.bool) => cts.univ cts.star cts.box cts.I))
                      (x:(cts.Term
                            cts.box
                            (cts.prod
                               cts.box
                               cts.box
                               cts.box
                               cts.I
                               bool.bool
                               (x:(cts.Term cts.box bool.bool) =>
                                cts.univ cts.star cts.box cts.I))) =>
                       cts.prod
                         cts.star
                         cts.star
                         cts.star
                         cts.I
                         (cts.prod
                            cts.star
                            cts.star
                            cts.star
                            cts.I
                            (nat.le n m)
                            (x0:(cts.Term cts.star (nat.le n m)) => x bool.true))
                         (x0:(cts.Term
                                cts.star
                                (cts.prod
                                   cts.star
                                   cts.star
                                   cts.star
                                   cts.I
                                   (nat.le n m)
                                   (x0:(cts.Term cts.star (nat.le n m)) => x bool.true))) =>
                          cts.prod
                            cts.star
                            cts.star
                            cts.star
                            cts.I
                            (cts.prod
                               cts.star
                               cts.star
                               cts.star
                               cts.I
                               (connectives.Not (nat.le n m))
                               (x1:(cts.Term cts.star (connectives.Not (nat.le n m))) =>
                                x bool.false))
                            (x1:(cts.Term
                                   cts.star
                                   (cts.prod
                                      cts.star
                                      cts.star
                                      cts.star
                                      cts.I
                                      (connectives.Not (nat.le n m))
                                      (x1:(cts.Term
                                             cts.star
                                             (connectives.Not (nat.le n m))) =>
                                       x bool.false))) =>
                             x (nat.leb n m)))))
                   (x:(cts.Term
                         cts.star
                         (cts.prod
                            cts.box
                            cts.star
                            cts.star
                            cts.I
                            (cts.prod
                               cts.box
                               cts.box
                               cts.box
                               cts.I
                               bool.bool
                               (x:(cts.Term cts.box bool.bool) =>
                                cts.univ cts.star cts.box cts.I))
                            (x:(cts.Term
                                  cts.box
                                  (cts.prod
                                     cts.box
                                     cts.box
                                     cts.box
                                     cts.I
                                     bool.bool
                                     (x:(cts.Term cts.box bool.bool) =>
                                      cts.univ cts.star cts.box cts.I))) =>
                             cts.prod
                               cts.star
                               cts.star
                               cts.star
                               cts.I
                               (cts.prod
                                  cts.star
                                  cts.star
                                  cts.star
                                  cts.I
                                  (nat.le n m)
                                  (x0:(cts.Term cts.star (nat.le n m)) => x bool.true))
                               (x0:(cts.Term
                                      cts.star
                                      (cts.prod
                                         cts.star
                                         cts.star
                                         cts.star
                                         cts.I
                                         (nat.le n m)
                                         (x0:(cts.Term cts.star (nat.le n m)) =>
                                          x bool.true))) =>
                                cts.prod
                                  cts.star
                                  cts.star
                                  cts.star
                                  cts.I
                                  (cts.prod
                                     cts.star
                                     cts.star
                                     cts.star
                                     cts.I
                                     (connectives.Not (nat.le n m))
                                     (x1:(cts.Term
                                            cts.star
                                            (connectives.Not (nat.le n m))) =>
                                      x bool.false))
                                  (x1:(cts.Term
                                         cts.star
                                         (cts.prod
                                            cts.star
                                            cts.star
                                            cts.star
                                            cts.I
                                            (connectives.Not (nat.le n m))
                                            (x1:(cts.Term
                                                   cts.star
                                                   (connectives.Not (nat.le n m))) =>
                                             x bool.false))) =>
                                   x (nat.leb n m)))))) =>
                    cts.prod
                      cts.box
                      cts.star
                      cts.star
                      cts.I
                      (cts.prod
                         cts.box
                         cts.box
                         cts.box
                         cts.I
                         bool.bool
                         (x0:(cts.Term cts.box bool.bool) => cts.univ cts.star cts.box cts.I))
                      (x0:(cts.Term
                             cts.box
                             (cts.prod
                                cts.box
                                cts.box
                                cts.box
                                cts.I
                                bool.bool
                                (x0:(cts.Term cts.box bool.bool) =>
                                 cts.univ cts.star cts.box cts.I))) =>
                       cts.prod
                         cts.star
                         cts.star
                         cts.star
                         cts.I
                         (cts.prod
                            cts.star
                            cts.star
                            cts.star
                            cts.I
                            (nat.le (nat.S n) (nat.S m))
                            (x1:(cts.Term cts.star (nat.le (nat.S n) (nat.S m))) =>
                             x0 bool.true))
                         (x1:(cts.Term
                                cts.star
                                (cts.prod
                                   cts.star
                                   cts.star
                                   cts.star
                                   cts.I
                                   (nat.le (nat.S n) (nat.S m))
                                   (x1:(cts.Term cts.star (nat.le (nat.S n) (nat.S m))) =>
                                    x0 bool.true))) =>
                          cts.prod
                            cts.star
                            cts.star
                            cts.star
                            cts.I
                            (cts.prod
                               cts.star
                               cts.star
                               cts.star
                               cts.I
                               (connectives.Not (nat.le (nat.S n) (nat.S m)))
                               (x2:(cts.Term
                                      cts.star
                                      (connectives.Not (nat.le (nat.S n) (nat.S m)))) =>
                                x0 bool.false))
                            (x2:(cts.Term
                                   cts.star
                                   (cts.prod
                                      cts.star
                                      cts.star
                                      cts.star
                                      cts.I
                                      (connectives.Not (nat.le (nat.S n) (nat.S m)))
                                      (x2:(cts.Term
                                             cts.star
                                             (connectives.Not
                                                (nat.le (nat.S n) (nat.S m)))) =>
                                       x0 bool.false))) =>
                             x0 y)))))
                (Hind:(cts.Term
                         cts.star
                         (cts.prod'
                            cts.box
                            cts.star
                            cts.star
                            (cts.prod'
                               cts.box
                               cts.box
                               cts.box
                               bool.bool
                               (x:(cts.Term cts.box bool.bool) =>
                                cts.univ cts.star cts.box cts.I))
                            (x:(cts.Term
                                  cts.box
                                  (cts.prod
                                     cts.box
                                     cts.box
                                     cts.box
                                     cts.I
                                     bool.bool
                                     (x:(cts.Term cts.box bool.bool) =>
                                      cts.univ cts.star cts.box cts.I))) =>
                             cts.prod
                               cts.star
                               cts.star
                               cts.star
                               cts.I
                               (cts.prod
                                  cts.star
                                  cts.star
                                  cts.star
                                  cts.I
                                  (nat.le n m)
                                  (x0:(cts.Term cts.star (nat.le n m)) => x bool.true))
                               (x0:(cts.Term
                                      cts.star
                                      (cts.prod
                                         cts.star
                                         cts.star
                                         cts.star
                                         cts.I
                                         (nat.le n m)
                                         (x0:(cts.Term cts.star (nat.le n m)) =>
                                          x bool.true))) =>
                                cts.prod
                                  cts.star
                                  cts.star
                                  cts.star
                                  cts.I
                                  (cts.prod
                                     cts.star
                                     cts.star
                                     cts.star
                                     cts.I
                                     (connectives.Not (nat.le n m))
                                     (x1:(cts.Term
                                            cts.star
                                            (connectives.Not (nat.le n m))) =>
                                      x bool.false))
                                  (x1:(cts.Term
                                         cts.star
                                         (cts.prod
                                            cts.star
                                            cts.star
                                            cts.star
                                            cts.I
                                            (connectives.Not (nat.le n m))
                                            (x1:(cts.Term
                                                   cts.star
                                                   (connectives.Not (nat.le n m))) =>
                                             x bool.false))) =>
                                   x (nat.leb n m)))))) =>
                 P:(cts.Term
                      cts.box
                      (cts.prod'
                         cts.box
                         cts.box
                         cts.box
                         bool.bool
                         (x0:(cts.Term cts.box bool.bool) => cts.univ cts.star cts.box cts.I))) =>
                 Pt:(cts.Term
                       cts.star
                       (cts.prod'
                          cts.star
                          cts.star
                          cts.star
                          (nat.le (nat.S n) (nat.S m))
                          (x1:(cts.Term cts.star (nat.le (nat.S n) (nat.S m))) =>
                           P bool.true))) =>
                 Pf:(cts.Term
                       cts.star
                       (cts.prod'
                          cts.star
                          cts.star
                          cts.star
                          (connectives.Not (nat.le (nat.S n) (nat.S m)))
                          (x2:(cts.Term
                                 cts.star
                                 (connectives.Not (nat.le (nat.S n) (nat.S m)))) =>
                           P bool.false))) =>
                 Hind
                   P
                   (lenm:(cts.Term cts.star (nat.le n m)) => Pt (nat.le_S_S n m lenm))
                   (nlenm:(cts.Term cts.star (connectives.Not (nat.le n m))) =>
                    Pf (nat.not_le_to_not_le_S_S n m nlenm))))))).

def leb_true_to_le :
  cts.Term
    cts.star
    (cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       nat.nat
       (x:(cts.Term cts.box nat.nat) =>
        cts.prod
          cts.box
          cts.star
          cts.star
          cts.I
          nat.nat
          (x0:(cts.Term cts.box nat.nat) =>
           cts.prod
             cts.star
             cts.star
             cts.star
             cts.I
             (logic.eq bool.bool (nat.leb x x0) bool.true)
             (x1:(cts.Term cts.star (logic.eq bool.bool (nat.leb x x0) bool.true)) => nat.le x x0))))
  :=
  n:(cts.Term cts.box nat.nat) =>
  m:(cts.Term cts.box nat.nat) =>
  nat.leb_elim
    n
    m
    (__:(cts.Term cts.box bool.bool) =>
     cts.prod
       cts.star
       cts.star
       cts.star
       cts.I
       (logic.eq bool.bool __ bool.true)
       (x:(cts.Term cts.star (logic.eq bool.bool __ bool.true)) => nat.le n m))
    (auto:(cts.Term cts.star (nat.le n m)) =>
     auto':(cts.Term cts.star (logic.eq bool.bool bool.true bool.true)) => auto)
    (__:(cts.Term cts.star (connectives.Not (nat.le n m))) =>
     abs:(cts.Term cts.star (logic.eq bool.bool bool.false bool.true)) =>
     connectives.falsity
       (nat.le n m)
       (logic.absurd
          (logic.eq bool.bool bool.true bool.false)
          (logic.rewrite_r
             bool.bool
             bool.true
             (__1:(cts.Term cts.box bool.bool) => logic.eq bool.bool bool.true __1)
             (logic.refl bool.bool bool.true)
             bool.false
             abs)
          bool.not_eq_true_false)).

def le_to_leb_true :
  cts.Term
    cts.star
    (cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       nat.nat
       (x:(cts.Term cts.box nat.nat) =>
        cts.prod
          cts.box
          cts.star
          cts.star
          cts.I
          nat.nat
          (x0:(cts.Term cts.box nat.nat) =>
           cts.prod
             cts.star
             cts.star
             cts.star
             cts.I
             (nat.le x x0)
             (x1:(cts.Term cts.star (nat.le x x0)) => logic.eq bool.bool (nat.leb x x0) bool.true))))
  :=
  n:(cts.Term cts.box nat.nat) =>
  m:(cts.Term cts.box nat.nat) =>
  nat.leb_elim
    n
    m
    (__:(cts.Term cts.box bool.bool) =>
     cts.prod
       cts.star
       cts.star
       cts.star
       cts.I
       (nat.le n m)
       (x:(cts.Term cts.star (nat.le n m)) => logic.eq bool.bool __ bool.true))
    (auto:(cts.Term cts.star (nat.le n m)) =>
     auto':(cts.Term cts.star (nat.le n m)) => logic.refl bool.bool bool.true)
    (H:(cts.Term cts.star (connectives.Not (nat.le n m))) =>
     H1:(cts.Term cts.star (nat.le n m)) =>
     connectives.falsity (logic.eq bool.bool bool.false bool.true) (logic.absurd (nat.le n m) H1 H)).

def not_le_to_leb_false :
  cts.Term
    cts.star
    (cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       nat.nat
       (x:(cts.Term cts.box nat.nat) =>
        cts.prod
          cts.box
          cts.star
          cts.star
          cts.I
          nat.nat
          (x0:(cts.Term cts.box nat.nat) =>
           cts.prod
             cts.star
             cts.star
             cts.star
             cts.I
             (connectives.Not (nat.le x x0))
             (x1:(cts.Term cts.star (connectives.Not (nat.le x x0))) =>
              logic.eq bool.bool (nat.leb x x0) bool.false))))
  :=
  n:(cts.Term cts.box nat.nat) =>
  m:(cts.Term cts.box nat.nat) =>
  nat.leb_elim
    n
    m
    (__:(cts.Term cts.box bool.bool) =>
     cts.prod
       cts.star
       cts.star
       cts.star
       cts.I
       (connectives.Not (nat.le n m))
       (x:(cts.Term cts.star (connectives.Not (nat.le n m))) => logic.eq bool.bool __ bool.false))
    (H:(cts.Term cts.star (nat.le n m)) =>
     H1:(cts.Term cts.star (connectives.Not (nat.le n m))) =>
     connectives.falsity (logic.eq bool.bool bool.true bool.false) (logic.absurd (nat.le n m) H H1))
    (auto:(cts.Term cts.star (connectives.Not (nat.le n m))) =>
     auto':(cts.Term cts.star (connectives.Not (nat.le n m))) => logic.refl bool.bool bool.false).

