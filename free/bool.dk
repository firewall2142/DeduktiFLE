bool : cts.Term cts.triangle (cts.univ cts.box cts.triangle cts.I).

true :
  cts.Term
    cts.diamond
    (cts.cast
       cts.triangle
       cts.sinf
       (cts.univ cts.box cts.triangle cts.I)
       (cts.univ cts.diamond cts.sinf cts.I)
       cts.I
       bool.bool).

false :
  cts.Term
    cts.diamond
    (cts.cast
       cts.triangle
       cts.sinf
       (cts.univ cts.box cts.triangle cts.I)
       (cts.univ cts.diamond cts.sinf cts.I)
       cts.I
       bool.bool).

match_bool_prop :
  cts.Term
    cts.star
    (cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       (cts.prod
          cts.box
          cts.box
          cts.box
          cts.I
          bool.bool
          (x:(cts.Term cts.box bool.bool) => cts.univ cts.star cts.box cts.I))
       (x:(cts.Term
             cts.box
             (cts.prod
                cts.box
                cts.box
                cts.box
                cts.I
                bool.bool
                (x:(cts.Term cts.box bool.bool) => cts.univ cts.star cts.box cts.I))) =>
        cts.prod
          cts.star
          cts.star
          cts.star
          cts.I
          (x bool.true)
          (x0:(cts.Term cts.star (x bool.true)) =>
           cts.prod
             cts.star
             cts.star
             cts.star
             cts.I
             (x bool.false)
             (x1:(cts.Term cts.star (x bool.false)) =>
              cts.prod
                cts.box
                cts.star
                cts.star
                cts.I
                bool.bool
                (x2:(cts.Term cts.box bool.bool) => x x2))))).

match_bool_type :
  cts.Term
    cts.diamond
    (cts.prod
       cts.triangle
       cts.diamond
       cts.diamond
       cts.I
       (cts.univ cts.box cts.triangle cts.I)
       (x:(cts.Term cts.triangle (cts.univ cts.box cts.triangle cts.I)) =>
        cts.cast
          cts.triangle
          cts.sinf
          (cts.univ cts.box cts.triangle cts.I)
          (cts.univ cts.diamond cts.sinf cts.I)
          cts.I
          (cts.prod
             cts.box
             cts.box
             cts.box
             cts.I
             x
             (x0:(cts.Term cts.box x) =>
              cts.prod
                cts.box
                cts.box
                cts.box
                cts.I
                x
                (x1:(cts.Term cts.box x) =>
                 cts.prod
                   cts.box
                   cts.box
                   cts.box
                   cts.I
                   bool.bool
                   (x2:(cts.Term cts.box bool.bool) => x)))))).

axiom_match_bool_type_true :
  cts.Term
    cts.star
    (cts.prod
       cts.triangle
       cts.star
       cts.star
       cts.I
       (cts.univ cts.box cts.triangle cts.I)
       (x:(cts.Term cts.triangle (cts.univ cts.box cts.triangle cts.I)) =>
        cts.prod
          cts.box
          cts.star
          cts.star
          cts.I
          x
          (x0:(cts.Term cts.box x) =>
           cts.prod
             cts.box
             cts.star
             cts.star
             cts.I
             x
             (x1:(cts.Term cts.box x) =>
              connectives.equal x (bool.match_bool_type x x0 x1 bool.true) x0)))).

def eq_match_bool_type_true :
  cts.Term
    cts.star
    (cts.prod
       cts.triangle
       cts.star
       cts.star
       cts.I
       (cts.univ cts.box cts.triangle cts.I)
       (x:(cts.Term cts.triangle (cts.univ cts.box cts.triangle cts.I)) =>
        cts.prod
          cts.box
          cts.star
          cts.star
          cts.I
          x
          (x0:(cts.Term cts.box x) =>
           cts.prod
             cts.box
             cts.star
             cts.star
             cts.I
             x
             (x1:(cts.Term cts.box x) =>
              leibniz.leibniz x (bool.match_bool_type x x0 x1 bool.true) x0))))
  :=
  return:(cts.Term cts.triangle (cts.univ' cts.box cts.triangle)) =>
  case_true:(cts.Term cts.box return) =>
  case_false:(cts.Term cts.box return) =>
  connectives.equal_leibniz
    return
    (bool.match_bool_type return case_true case_false bool.true)
    case_true
    (bool.axiom_match_bool_type_true return case_true case_false).

axiom_match_bool_type_false :
  cts.Term
    cts.star
    (cts.prod
       cts.triangle
       cts.star
       cts.star
       cts.I
       (cts.univ cts.box cts.triangle cts.I)
       (x:(cts.Term cts.triangle (cts.univ cts.box cts.triangle cts.I)) =>
        cts.prod
          cts.box
          cts.star
          cts.star
          cts.I
          x
          (x0:(cts.Term cts.box x) =>
           cts.prod
             cts.box
             cts.star
             cts.star
             cts.I
             x
             (x1:(cts.Term cts.box x) =>
              connectives.equal x (bool.match_bool_type x x0 x1 bool.false) x1)))).

def eq_match_bool_type_false :
  cts.Term
    cts.star
    (cts.prod
       cts.triangle
       cts.star
       cts.star
       cts.I
       (cts.univ cts.box cts.triangle cts.I)
       (x:(cts.Term cts.triangle (cts.univ cts.box cts.triangle cts.I)) =>
        cts.prod
          cts.box
          cts.star
          cts.star
          cts.I
          x
          (x0:(cts.Term cts.box x) =>
           cts.prod
             cts.box
             cts.star
             cts.star
             cts.I
             x
             (x1:(cts.Term cts.box x) =>
              leibniz.leibniz x (bool.match_bool_type x x0 x1 bool.false) x1))))
  :=
  return:(cts.Term cts.triangle (cts.univ' cts.box cts.triangle)) =>
  case_true:(cts.Term cts.box return) =>
  case_false:(cts.Term cts.box return) =>
  connectives.equal_leibniz
    return
    (bool.match_bool_type return case_true case_false bool.false)
    case_false
    (bool.axiom_match_bool_type_false return case_true case_false).

def sym_eq_match_bool_type_true :
  cts.Term
    cts.star
    (cts.prod
       cts.triangle
       cts.star
       cts.star
       cts.I
       (cts.univ cts.box cts.triangle cts.I)
       (x:(cts.Term cts.triangle (cts.univ cts.box cts.triangle cts.I)) =>
        cts.prod
          cts.box
          cts.star
          cts.star
          cts.I
          x
          (x0:(cts.Term cts.box x) =>
           cts.prod
             cts.box
             cts.star
             cts.star
             cts.I
             x
             (x1:(cts.Term cts.box x) =>
              leibniz.leibniz x x0 (bool.match_bool_type x x0 x1 bool.true)))))
  :=
  return:(cts.Term cts.triangle (cts.univ' cts.box cts.triangle)) =>
  case_true:(cts.Term cts.box return) =>
  case_false:(cts.Term cts.box return) =>
  leibniz.sym_leibniz
    return
    (bool.match_bool_type return case_true case_false bool.true)
    case_true
    (bool.eq_match_bool_type_true return case_true case_false).

def sym_eq_match_bool_type_false :
  cts.Term
    cts.star
    (cts.prod
       cts.triangle
       cts.star
       cts.star
       cts.I
       (cts.univ cts.box cts.triangle cts.I)
       (x:(cts.Term cts.triangle (cts.univ cts.box cts.triangle cts.I)) =>
        cts.prod
          cts.box
          cts.star
          cts.star
          cts.I
          x
          (x0:(cts.Term cts.box x) =>
           cts.prod
             cts.box
             cts.star
             cts.star
             cts.I
             x
             (x1:(cts.Term cts.box x) =>
              leibniz.leibniz x x1 (bool.match_bool_type x x0 x1 bool.false)))))
  :=
  return:(cts.Term cts.triangle (cts.univ' cts.box cts.triangle)) =>
  case_true:(cts.Term cts.box return) =>
  case_false:(cts.Term cts.box return) =>
  leibniz.sym_leibniz
    return
    (bool.match_bool_type return case_true case_false bool.false)
    case_false
    (bool.eq_match_bool_type_false return case_true case_false).

def bool_discr :
  cts.Term
    cts.star
    (cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       bool.bool
       (x:(cts.Term cts.box bool.bool) =>
        cts.prod
          cts.box
          cts.star
          cts.star
          cts.I
          bool.bool
          (x0:(cts.Term cts.box bool.bool) =>
           cts.prod
             cts.star
             cts.star
             cts.star
             cts.I
             (logic.eq bool.bool x x0)
             (x1:(cts.Term cts.star (logic.eq bool.bool x x0)) =>
              bool.match_bool_type
                (cts.univ cts.star cts.box cts.I)
                (bool.match_bool_type
                   (cts.univ cts.star cts.box cts.I)
                   (cts.prod
                      cts.box
                      cts.star
                      cts.star
                      cts.I
                      (cts.univ cts.star cts.box cts.I)
                      (x2:(cts.Term cts.box (cts.univ cts.star cts.box cts.I)) =>
                       cts.prod
                         cts.star
                         cts.star
                         cts.star
                         cts.I
                         x2
                         (x3:(cts.Term cts.star x2) => x2)))
                   (cts.prod
                      cts.box
                      cts.star
                      cts.star
                      cts.I
                      (cts.univ cts.star cts.box cts.I)
                      (x2:(cts.Term cts.box (cts.univ cts.star cts.box cts.I)) => x2))
                   x0)
                (bool.match_bool_type
                   (cts.univ cts.star cts.box cts.I)
                   (cts.prod
                      cts.box
                      cts.star
                      cts.star
                      cts.I
                      (cts.univ cts.star cts.box cts.I)
                      (x2:(cts.Term cts.box (cts.univ cts.star cts.box cts.I)) => x2))
                   (cts.prod
                      cts.box
                      cts.star
                      cts.star
                      cts.I
                      (cts.univ cts.star cts.box cts.I)
                      (x2:(cts.Term cts.box (cts.univ cts.star cts.box cts.I)) =>
                       cts.prod
                         cts.star
                         cts.star
                         cts.star
                         cts.I
                         x2
                         (x3:(cts.Term cts.star x2) => x2)))
                   x0)
                x))))
  :=
  x:(cts.Term cts.box bool.bool) =>
  y:(cts.Term cts.box bool.bool) =>
  Deq:(cts.Term cts.star (logic.eq bool.bool x y)) =>
  logic.eq_ind
    bool.bool
    x
    (x_13:(cts.Term cts.box bool.bool) =>
     bool.match_bool_type
       (cts.univ cts.star cts.box cts.I)
       (bool.match_bool_type
          (cts.univ cts.star cts.box cts.I)
          (cts.prod
             cts.box
             cts.star
             cts.star
             cts.I
             (cts.univ cts.star cts.box cts.I)
             (x0:(cts.Term cts.box (cts.univ cts.star cts.box cts.I)) =>
              cts.prod cts.star cts.star cts.star cts.I x0 (x1:(cts.Term cts.star x0) => x0)))
          (cts.prod
             cts.box
             cts.star
             cts.star
             cts.I
             (cts.univ cts.star cts.box cts.I)
             (x0:(cts.Term cts.box (cts.univ cts.star cts.box cts.I)) => x0))
          x_13)
       (bool.match_bool_type
          (cts.univ cts.star cts.box cts.I)
          (cts.prod
             cts.box
             cts.star
             cts.star
             cts.I
             (cts.univ cts.star cts.box cts.I)
             (x0:(cts.Term cts.box (cts.univ cts.star cts.box cts.I)) => x0))
          (cts.prod
             cts.box
             cts.star
             cts.star
             cts.I
             (cts.univ cts.star cts.box cts.I)
             (x0:(cts.Term cts.box (cts.univ cts.star cts.box cts.I)) =>
              cts.prod cts.star cts.star cts.star cts.I x0 (x1:(cts.Term cts.star x0) => x0)))
          x_13)
       x)
    (bool.match_bool_prop
       (__:(cts.Term cts.box bool.bool) =>
        bool.match_bool_type
          (cts.univ cts.star cts.box cts.I)
          (bool.match_bool_type
             (cts.univ cts.star cts.box cts.I)
             (cts.prod
                cts.box
                cts.star
                cts.star
                cts.I
                (cts.univ cts.star cts.box cts.I)
                (x0:(cts.Term cts.box (cts.univ cts.star cts.box cts.I)) =>
                 cts.prod cts.star cts.star cts.star cts.I x0 (x1:(cts.Term cts.star x0) => x0)))
             (cts.prod
                cts.box
                cts.star
                cts.star
                cts.I
                (cts.univ cts.star cts.box cts.I)
                (x0:(cts.Term cts.box (cts.univ cts.star cts.box cts.I)) => x0))
             __)
          (bool.match_bool_type
             (cts.univ cts.star cts.box cts.I)
             (cts.prod
                cts.box
                cts.star
                cts.star
                cts.I
                (cts.univ cts.star cts.box cts.I)
                (x0:(cts.Term cts.box (cts.univ cts.star cts.box cts.I)) => x0))
             (cts.prod
                cts.box
                cts.star
                cts.star
                cts.I
                (cts.univ cts.star cts.box cts.I)
                (x0:(cts.Term cts.box (cts.univ cts.star cts.box cts.I)) =>
                 cts.prod cts.star cts.star cts.star cts.I x0 (x1:(cts.Term cts.star x0) => x0)))
             __)
          __)
       (bool.sym_eq_match_bool_type_true
          (cts.univ cts.star cts.box cts.I)
          (bool.match_bool_type
             (cts.univ cts.star cts.box cts.I)
             (cts.prod
                cts.box
                cts.star
                cts.star
                cts.I
                (cts.univ cts.star cts.box cts.I)
                (x0:(cts.Term cts.box (cts.univ cts.star cts.box cts.I)) =>
                 cts.prod cts.star cts.star cts.star cts.I x0 (x1:(cts.Term cts.star x0) => x0)))
             (cts.prod
                cts.box
                cts.star
                cts.star
                cts.I
                (cts.univ cts.star cts.box cts.I)
                (x0:(cts.Term cts.box (cts.univ cts.star cts.box cts.I)) => x0))
             bool.true)
          (bool.match_bool_type
             (cts.univ cts.star cts.box cts.I)
             (cts.prod
                cts.box
                cts.star
                cts.star
                cts.I
                (cts.univ cts.star cts.box cts.I)
                (x0:(cts.Term cts.box (cts.univ cts.star cts.box cts.I)) => x0))
             (cts.prod
                cts.box
                cts.star
                cts.star
                cts.I
                (cts.univ cts.star cts.box cts.I)
                (x0:(cts.Term cts.box (cts.univ cts.star cts.box cts.I)) =>
                 cts.prod cts.star cts.star cts.star cts.I x0 (x1:(cts.Term cts.star x0) => x0)))
             bool.true)
          (x0:(cts.Term cts.box (cts.univ' cts.star cts.box)) => x0)
          (bool.sym_eq_match_bool_type_true
             (cts.univ cts.star cts.box cts.I)
             (cts.prod
                cts.box
                cts.star
                cts.star
                cts.I
                (cts.univ cts.star cts.box cts.I)
                (x0:(cts.Term cts.box (cts.univ cts.star cts.box cts.I)) =>
                 cts.prod cts.star cts.star cts.star cts.I x0 (x1:(cts.Term cts.star x0) => x0)))
             (cts.prod
                cts.box
                cts.star
                cts.star
                cts.I
                (cts.univ cts.star cts.box cts.I)
                (x0:(cts.Term cts.box (cts.univ cts.star cts.box cts.I)) => x0))
             (x0:(cts.Term cts.box (cts.univ' cts.star cts.box)) => x0)
             (P:(cts.Term cts.box (cts.univ' cts.star cts.box)) => DH:(cts.Term cts.star P) => DH)))
       (bool.sym_eq_match_bool_type_false
          (cts.univ cts.star cts.box cts.I)
          (bool.match_bool_type
             (cts.univ cts.star cts.box cts.I)
             (cts.prod
                cts.box
                cts.star
                cts.star
                cts.I
                (cts.univ cts.star cts.box cts.I)
                (x0:(cts.Term cts.box (cts.univ cts.star cts.box cts.I)) =>
                 cts.prod cts.star cts.star cts.star cts.I x0 (x1:(cts.Term cts.star x0) => x0)))
             (cts.prod
                cts.box
                cts.star
                cts.star
                cts.I
                (cts.univ cts.star cts.box cts.I)
                (x0:(cts.Term cts.box (cts.univ cts.star cts.box cts.I)) => x0))
             bool.false)
          (bool.match_bool_type
             (cts.univ cts.star cts.box cts.I)
             (cts.prod
                cts.box
                cts.star
                cts.star
                cts.I
                (cts.univ cts.star cts.box cts.I)
                (x0:(cts.Term cts.box (cts.univ cts.star cts.box cts.I)) => x0))
             (cts.prod
                cts.box
                cts.star
                cts.star
                cts.I
                (cts.univ cts.star cts.box cts.I)
                (x0:(cts.Term cts.box (cts.univ cts.star cts.box cts.I)) =>
                 cts.prod cts.star cts.star cts.star cts.I x0 (x1:(cts.Term cts.star x0) => x0)))
             bool.false)
          (x0:(cts.Term cts.box (cts.univ' cts.star cts.box)) => x0)
          (bool.sym_eq_match_bool_type_false
             (cts.univ cts.star cts.box cts.I)
             (cts.prod
                cts.box
                cts.star
                cts.star
                cts.I
                (cts.univ cts.star cts.box cts.I)
                (x0:(cts.Term cts.box (cts.univ cts.star cts.box cts.I)) => x0))
             (cts.prod
                cts.box
                cts.star
                cts.star
                cts.I
                (cts.univ cts.star cts.box cts.I)
                (x0:(cts.Term cts.box (cts.univ cts.star cts.box cts.I)) =>
                 cts.prod cts.star cts.star cts.star cts.I x0 (x1:(cts.Term cts.star x0) => x0)))
             (x0:(cts.Term cts.box (cts.univ' cts.star cts.box)) => x0)
             (P:(cts.Term cts.box (cts.univ' cts.star cts.box)) => DH:(cts.Term cts.star P) => DH)))
       x)
    y
    Deq.

def not_eq_true_false :
  cts.Term cts.star (connectives.Not (logic.eq bool.bool bool.true bool.false))
  :=
  connectives.nmk
    (logic.eq bool.bool bool.true bool.false)
    (Heq:(cts.Term cts.star (logic.eq bool.bool bool.true bool.false)) =>
     bool.eq_match_bool_type_false
       (cts.univ cts.star cts.box cts.I)
       (cts.prod
          cts.box
          cts.star
          cts.star
          cts.I
          (cts.univ cts.star cts.box cts.I)
          (x:(cts.Term cts.box (cts.univ cts.star cts.box cts.I)) =>
           cts.prod cts.star cts.star cts.star cts.I x (x0:(cts.Term cts.star x) => x)))
       (cts.prod
          cts.box
          cts.star
          cts.star
          cts.I
          (cts.univ cts.star cts.box cts.I)
          (x:(cts.Term cts.box (cts.univ cts.star cts.box cts.I)) => x))
       (x:(cts.Term cts.box (cts.univ' cts.star cts.box)) => x)
       (bool.eq_match_bool_type_true
          (cts.univ cts.star cts.box cts.I)
          (bool.match_bool_type
             (cts.univ cts.star cts.box cts.I)
             (cts.prod
                cts.box
                cts.star
                cts.star
                cts.I
                (cts.univ cts.star cts.box cts.I)
                (x:(cts.Term cts.box (cts.univ cts.star cts.box cts.I)) =>
                 cts.prod cts.star cts.star cts.star cts.I x (x0:(cts.Term cts.star x) => x)))
             (cts.prod
                cts.box
                cts.star
                cts.star
                cts.I
                (cts.univ cts.star cts.box cts.I)
                (x:(cts.Term cts.box (cts.univ cts.star cts.box cts.I)) => x))
             bool.false)
          (bool.match_bool_type
             (cts.univ cts.star cts.box cts.I)
             (cts.prod
                cts.box
                cts.star
                cts.star
                cts.I
                (cts.univ cts.star cts.box cts.I)
                (x:(cts.Term cts.box (cts.univ cts.star cts.box cts.I)) => x))
             (cts.prod
                cts.box
                cts.star
                cts.star
                cts.I
                (cts.univ cts.star cts.box cts.I)
                (x:(cts.Term cts.box (cts.univ cts.star cts.box cts.I)) =>
                 cts.prod cts.star cts.star cts.star cts.I x (x0:(cts.Term cts.star x) => x)))
             bool.false)
          (x:(cts.Term cts.box (cts.univ' cts.star cts.box)) => x)
          (bool.bool_discr bool.true bool.false Heq))
       connectives.False).

def notb :
  cts.Term
    cts.diamond
    (cts.cast
       cts.triangle
       cts.sinf
       (cts.univ cts.box cts.triangle cts.I)
       (cts.univ cts.diamond cts.sinf cts.I)
       cts.I
       (cts.prod
          cts.box
          cts.box
          cts.box
          cts.I
          bool.bool
          (x:(cts.Term cts.box bool.bool) => bool.bool)))
  :=
  b:(cts.Term cts.box bool.bool) => bool.match_bool_type bool.bool bool.false bool.true b.

def andb :
  cts.Term
    cts.diamond
    (cts.cast
       cts.triangle
       cts.sinf
       (cts.univ cts.box cts.triangle cts.I)
       (cts.univ cts.diamond cts.sinf cts.I)
       cts.I
       (cts.prod
          cts.box
          cts.box
          cts.box
          cts.I
          bool.bool
          (x:(cts.Term cts.box bool.bool) =>
           cts.prod
             cts.box
             cts.box
             cts.box
             cts.I
             bool.bool
             (x0:(cts.Term cts.box bool.bool) => bool.bool))))
  :=
  b1:(cts.Term cts.box bool.bool) =>
  b2:(cts.Term cts.box bool.bool) => bool.match_bool_type bool.bool b2 bool.false b1.

def andb_true_l :
  cts.Term
    cts.star
    (cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       bool.bool
       (x:(cts.Term cts.box bool.bool) =>
        cts.prod
          cts.box
          cts.star
          cts.star
          cts.I
          bool.bool
          (x0:(cts.Term cts.box bool.bool) =>
           cts.prod
             cts.star
             cts.star
             cts.star
             cts.I
             (logic.eq bool.bool (bool.andb x x0) bool.true)
             (x1:(cts.Term cts.star (logic.eq bool.bool (bool.andb x x0) bool.true)) =>
              logic.eq bool.bool x bool.true))))
  :=
  b1:(cts.Term cts.box bool.bool) =>
  bool.match_bool_prop
    (__:(cts.Term cts.box bool.bool) =>
     cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       bool.bool
       (x:(cts.Term cts.box bool.bool) =>
        cts.prod
          cts.star
          cts.star
          cts.star
          cts.I
          (logic.eq bool.bool (bool.andb __ x) bool.true)
          (x0:(cts.Term cts.star (logic.eq bool.bool (bool.andb __ x) bool.true)) =>
           logic.eq bool.bool __ bool.true)))
    (b2:(cts.Term cts.box bool.bool) =>
     bool.sym_eq_match_bool_type_true
       bool.bool
       b2
       bool.false
       (x:(cts.Term cts.box bool.bool) =>
        cts.prod
          cts.star
          cts.star
          cts.star
          cts.I
          (logic.eq bool.bool x bool.true)
          (x0:(cts.Term cts.star (logic.eq bool.bool x bool.true)) =>
           logic.eq bool.bool bool.true bool.true))
       (auto:(cts.Term cts.star (logic.eq bool.bool b2 bool.true)) =>
        logic.rewrite_l
          bool.bool
          b2
          (__:(cts.Term cts.box bool.bool) => logic.eq bool.bool __ bool.true)
          (logic.rewrite_l
             bool.bool
             b2
             (__:(cts.Term cts.box bool.bool) => logic.eq bool.bool b2 __)
             (logic.refl bool.bool b2)
             bool.true
             auto)
          bool.true
          auto))
    (_b2:(cts.Term cts.box bool.bool) =>
     bool.sym_eq_match_bool_type_false
       bool.bool
       _b2
       bool.false
       (x:(cts.Term cts.box bool.bool) =>
        cts.prod
          cts.star
          cts.star
          cts.star
          cts.I
          (logic.eq bool.bool x bool.true)
          (x0:(cts.Term cts.star (logic.eq bool.bool x bool.true)) =>
           logic.eq bool.bool bool.false bool.true))
       (auto:(cts.Term cts.star (logic.eq bool.bool bool.false bool.true)) =>
        logic.rewrite_r
          bool.bool
          bool.true
          (__:(cts.Term cts.box bool.bool) => logic.eq bool.bool __ bool.true)
          (logic.refl bool.bool bool.true)
          bool.false
          auto))
    b1.

def andb_true_r :
  cts.Term
    cts.star
    (cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       bool.bool
       (x:(cts.Term cts.box bool.bool) =>
        cts.prod
          cts.box
          cts.star
          cts.star
          cts.I
          bool.bool
          (x0:(cts.Term cts.box bool.bool) =>
           cts.prod
             cts.star
             cts.star
             cts.star
             cts.I
             (logic.eq bool.bool (bool.andb x x0) bool.true)
             (x1:(cts.Term cts.star (logic.eq bool.bool (bool.andb x x0) bool.true)) =>
              logic.eq bool.bool x0 bool.true))))
  :=
  b1:(cts.Term cts.box bool.bool) =>
  b2:(cts.Term cts.box bool.bool) =>
  bool.match_bool_prop
    (__:(cts.Term cts.box bool.bool) =>
     cts.prod
       cts.star
       cts.star
       cts.star
       cts.I
       (logic.eq bool.bool (bool.andb __ b2) bool.true)
       (x:(cts.Term cts.star (logic.eq bool.bool (bool.andb __ b2) bool.true)) =>
        logic.eq bool.bool b2 bool.true))
    (bool.sym_eq_match_bool_type_true
       bool.bool
       b2
       bool.false
       (x:(cts.Term cts.box bool.bool) =>
        cts.prod
          cts.star
          cts.star
          cts.star
          cts.I
          (logic.eq bool.bool x bool.true)
          (x0:(cts.Term cts.star (logic.eq bool.bool x bool.true)) =>
           logic.eq bool.bool b2 bool.true))
       (auto:(cts.Term cts.star (logic.eq bool.bool b2 bool.true)) =>
        logic.rewrite_l
          bool.bool
          b2
          (__:(cts.Term cts.box bool.bool) => logic.eq bool.bool b2 __)
          (logic.refl bool.bool b2)
          bool.true
          auto))
    (bool.sym_eq_match_bool_type_false
       bool.bool
       b2
       bool.false
       (x:(cts.Term cts.box bool.bool) =>
        cts.prod
          cts.star
          cts.star
          cts.star
          cts.I
          (logic.eq bool.bool x bool.true)
          (x0:(cts.Term cts.star (logic.eq bool.bool x bool.true)) =>
           logic.eq bool.bool b2 bool.true))
       (bool.match_bool_prop
          (__:(cts.Term cts.box bool.bool) =>
           cts.prod
             cts.star
             cts.star
             cts.star
             cts.I
             (logic.eq bool.bool bool.false bool.true)
             (x:(cts.Term cts.star (logic.eq bool.bool bool.false bool.true)) =>
              logic.eq bool.bool __ bool.true))
          (auto:(cts.Term cts.star (logic.eq bool.bool bool.false bool.true)) =>
           logic.refl bool.bool bool.true)
          (auto:(cts.Term cts.star (logic.eq bool.bool bool.false bool.true)) =>
           logic.rewrite_r
             bool.bool
             bool.true
             (__:(cts.Term cts.box bool.bool) => logic.eq bool.bool __ bool.true)
             (logic.refl bool.bool bool.true)
             bool.false
             auto)
          b2))
    b1.

def true_or_false :
  cts.Term
    cts.star
    (cts.prod
       cts.box
       cts.star
       cts.star
       cts.I
       bool.bool
       (x:(cts.Term cts.box bool.bool) =>
        connectives.Or (logic.eq bool.bool x bool.true) (logic.eq bool.bool x bool.false)))
  :=
  b:(cts.Term cts.box bool.bool) =>
  bool.match_bool_prop
    (__:(cts.Term cts.box bool.bool) =>
     connectives.Or (logic.eq bool.bool __ bool.true) (logic.eq bool.bool __ bool.false))
    (connectives.or_introl
       (logic.eq bool.bool bool.true bool.true)
       (logic.eq bool.bool bool.true bool.false)
       (logic.refl bool.bool bool.true))
    (relations.RC_reflexive
       bool.bool
       (__:(cts.Term cts.box bool.bool) =>
        _0:(cts.Term cts.box bool.bool) => logic.eq bool.bool bool.false bool.true)
       bool.false)
    b.

